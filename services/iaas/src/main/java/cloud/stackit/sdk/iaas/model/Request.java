/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Object that represents a request. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class Request {
	public static final String SERIALIZED_NAME_DETAILS = "details";

	@SerializedName(SERIALIZED_NAME_DETAILS)
	@javax.annotation.Nullable private String details;

	public static final String SERIALIZED_NAME_REQUEST_ACTION = "requestAction";

	@SerializedName(SERIALIZED_NAME_REQUEST_ACTION)
	@javax.annotation.Nonnull
	private String requestAction;

	public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";

	@SerializedName(SERIALIZED_NAME_REQUEST_ID)
	@javax.annotation.Nonnull
	private String requestId;

	public static final String SERIALIZED_NAME_REQUEST_TYPE = "requestType";

	@SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
	@javax.annotation.Nonnull
	private String requestType;

	public static final String SERIALIZED_NAME_RESOURCES = "resources";

	@SerializedName(SERIALIZED_NAME_RESOURCES)
	@javax.annotation.Nonnull
	private List<RequestResource> resources = new ArrayList<>();

	public static final String SERIALIZED_NAME_STATUS = "status";

	@SerializedName(SERIALIZED_NAME_STATUS)
	@javax.annotation.Nonnull
	private String status;

	public Request() {}

	public Request details(@javax.annotation.Nullable String details) {
		this.details = details;
		return this;
	}

	/**
	 * Get details
	 *
	 * @return details
	 */
	@javax.annotation.Nullable public String getDetails() {
		return details;
	}

	public void setDetails(@javax.annotation.Nullable String details) {
		this.details = details;
	}

	public Request requestAction(@javax.annotation.Nonnull String requestAction) {
		this.requestAction = requestAction;
		return this;
	}

	/**
	 * Object that represents a resource action. Possible values: &#x60;CREATE&#x60;,
	 * &#x60;DELETE&#x60;, &#x60;UPDATE&#x60;.
	 *
	 * @return requestAction
	 */
	@javax.annotation.Nonnull
	public String getRequestAction() {
		return requestAction;
	}

	public void setRequestAction(@javax.annotation.Nonnull String requestAction) {
		this.requestAction = requestAction;
	}

	public Request requestId(@javax.annotation.Nonnull String requestId) {
		this.requestId = requestId;
		return this;
	}

	/**
	 * Identifier (ID) representing a single API request.
	 *
	 * @return requestId
	 */
	@javax.annotation.Nonnull
	public String getRequestId() {
		return requestId;
	}

	public void setRequestId(@javax.annotation.Nonnull String requestId) {
		this.requestId = requestId;
	}

	public Request requestType(@javax.annotation.Nonnull String requestType) {
		this.requestType = requestType;
		return this;
	}

	/**
	 * Object that represents a resource type. Possible values: &#x60;BACKUP&#x60;,
	 * &#x60;IMAGE&#x60;, &#x60;NETWORK&#x60;, &#x60;NETWORKAREA&#x60;, &#x60;NIC&#x60;,
	 * &#x60;PROJECT&#x60;, &#x60;ROUTE&#x60;, &#x60;SERVER&#x60;, &#x60;SERVICEACCOUNT&#x60;,
	 * &#x60;SNAPSHOT&#x60;, &#x60;VIRTUALIP&#x60;, &#x60;VOLUME&#x60;.
	 *
	 * @return requestType
	 */
	@javax.annotation.Nonnull
	public String getRequestType() {
		return requestType;
	}

	public void setRequestType(@javax.annotation.Nonnull String requestType) {
		this.requestType = requestType;
	}

	public Request resources(@javax.annotation.Nonnull List<RequestResource> resources) {
		this.resources = resources;
		return this;
	}

	public Request addResourcesItem(RequestResource resourcesItem) {
		if (this.resources == null) {
			this.resources = new ArrayList<>();
		}
		this.resources.add(resourcesItem);
		return this;
	}

	/**
	 * Get resources
	 *
	 * @return resources
	 */
	@javax.annotation.Nonnull
	public List<RequestResource> getResources() {
		return resources;
	}

	public void setResources(@javax.annotation.Nonnull List<RequestResource> resources) {
		this.resources = resources;
	}

	public Request status(@javax.annotation.Nonnull String status) {
		this.status = status;
		return this;
	}

	/**
	 * The state of a resource object. Possible values: &#x60;CREATING&#x60;, &#x60;CREATED&#x60;,
	 * &#x60;DELETING&#x60;, &#x60;DELETED&#x60;, &#x60;FAILED&#x60;, &#x60;UPDATED&#x60;,
	 * &#x60;UPDATING&#x60;.
	 *
	 * @return status
	 */
	@javax.annotation.Nonnull
	public String getStatus() {
		return status;
	}

	public void setStatus(@javax.annotation.Nonnull String status) {
		this.status = status;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Request request = (Request) o;
		return Objects.equals(this.details, request.details)
				&& Objects.equals(this.requestAction, request.requestAction)
				&& Objects.equals(this.requestId, request.requestId)
				&& Objects.equals(this.requestType, request.requestType)
				&& Objects.equals(this.resources, request.resources)
				&& Objects.equals(this.status, request.status);
	}

	@Override
	public int hashCode() {
		return Objects.hash(details, requestAction, requestId, requestType, resources, status);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Request {\n");
		sb.append("    details: ").append(toIndentedString(details)).append("\n");
		sb.append("    requestAction: ").append(toIndentedString(requestAction)).append("\n");
		sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
		sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
		sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"details",
								"requestAction",
								"requestId",
								"requestType",
								"resources",
								"status"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields =
				new HashSet<String>(
						Arrays.asList(
								"requestAction",
								"requestId",
								"requestType",
								"resources",
								"status"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to Request
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!Request.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in Request is not found in the empty JSON string",
								Request.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!Request.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `Request` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : Request.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull())
				&& !jsonObj.get("details").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `details` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("details").toString()));
		}
		if (!jsonObj.get("requestAction").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `requestAction` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("requestAction").toString()));
		}
		if (!jsonObj.get("requestId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `requestId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("requestId").toString()));
		}
		if (!jsonObj.get("requestType").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `requestType` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("requestType").toString()));
		}
		// ensure the json data is an array
		if (!jsonObj.get("resources").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `resources` to be an array in the JSON string but got `%s`",
							jsonObj.get("resources").toString()));
		}

		JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
		// validate the required field `resources` (array)
		for (int i = 0; i < jsonArrayresources.size(); i++) {
			RequestResource.validateJsonElement(jsonArrayresources.get(i));
		}
		;
		if (!jsonObj.get("status").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `status` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("status").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!Request.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'Request' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<Request> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(Request.class));

			return (TypeAdapter<T>)
					new TypeAdapter<Request>() {
						@Override
						public void write(JsonWriter out, Request value) throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public Request read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of Request given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of Request
	 * @throws IOException if the JSON string is invalid with respect to Request
	 */
	public static Request fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, Request.class);
	}

	/**
	 * Convert an instance of Request to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
