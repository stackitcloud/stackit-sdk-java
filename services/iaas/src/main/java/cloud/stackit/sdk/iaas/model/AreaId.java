/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 2beta1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;

@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class AreaId extends AbstractOpenApiSchema {
	private static final Logger log = Logger.getLogger(AreaId.class.getName());

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!AreaId.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'AreaId' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<UUID> adapterUUID =
					gson.getDelegateAdapter(this, TypeToken.get(UUID.class));
			final TypeAdapter<StaticAreaID> adapterStaticAreaID =
					gson.getDelegateAdapter(this, TypeToken.get(StaticAreaID.class));

			return (TypeAdapter<T>)
					new TypeAdapter<AreaId>() {
						@Override
						public void write(JsonWriter out, AreaId value) throws IOException {
							if (value == null || value.getActualInstance() == null) {
								elementAdapter.write(out, null);
								return;
							}

							// check if the actual instance is of the type `UUID`
							if (value.getActualInstance() instanceof UUID) {
								JsonElement element =
										adapterUUID.toJsonTree((UUID) value.getActualInstance());
								elementAdapter.write(out, element);
								return;
							}
							// check if the actual instance is of the type `StaticAreaID`
							if (value.getActualInstance() instanceof StaticAreaID) {
								JsonElement element =
										adapterStaticAreaID.toJsonTree(
												(StaticAreaID) value.getActualInstance());
								elementAdapter.write(out, element);
								return;
							}
							throw new IOException(
									"Failed to serialize as the type doesn't match oneOf schemas: StaticAreaID, UUID");
						}

						@Override
						public AreaId read(JsonReader in) throws IOException {
							Object deserialized = null;
							JsonElement jsonElement = elementAdapter.read(in);

							int match = 0;
							ArrayList<String> errorMessages = new ArrayList<>();
							TypeAdapter actualAdapter = elementAdapter;

							// deserialize UUID
							try {
								// validate the JSON object to see if any exception is thrown
								UUID.fromString(jsonElement.getAsString());
								actualAdapter = adapterUUID;
								match++;
								log.log(Level.FINER, "Input data matches schema 'UUID'");
							} catch (Exception e) {
								// deserialization failed, continue
								errorMessages.add(
										String.format(
												"Deserialization for UUID failed with `%s`.",
												e.getMessage()));
								log.log(Level.FINER, "Input data does not match schema 'UUID'", e);
							}
							// deserialize StaticAreaID
							try {
								// validate the JSON object to see if any exception is thrown
								StaticAreaID.validateJsonElement(jsonElement);
								actualAdapter = adapterStaticAreaID;
								match++;
								log.log(Level.FINER, "Input data matches schema 'StaticAreaID'");
							} catch (Exception e) {
								// deserialization failed, continue
								errorMessages.add(
										String.format(
												"Deserialization for StaticAreaID failed with `%s`.",
												e.getMessage()));
								log.log(
										Level.FINER,
										"Input data does not match schema 'StaticAreaID'",
										e);
							}

							if (match == 1) {
								AreaId ret = new AreaId();
								ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
								return ret;
							}

							throw new IOException(
									String.format(
											"Failed deserialization for AreaId: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s",
											match, errorMessages, jsonElement.toString()));
						}
					}.nullSafe();
		}
	}

	// store a list of schema names defined in oneOf
	public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

	public AreaId() {
		super("oneOf", Boolean.FALSE);
	}

	public AreaId(Object o) {
		super("oneOf", Boolean.FALSE);
		setActualInstance(o);
	}

	static {
		schemas.put("UUID", UUID.class);
		schemas.put("StaticAreaID", StaticAreaID.class);
	}

	@Override
	public Map<String, Class<?>> getSchemas() {
		return AreaId.schemas;
	}

	/**
	 * Set the instance that matches the oneOf child schema, check the instance parameter is valid
	 * against the oneOf child schemas: StaticAreaID, UUID
	 *
	 * <p>It could be an instance of the 'oneOf' schemas.
	 */
	@Override
	public void setActualInstance(Object instance) {
		if (instance instanceof UUID) {
			super.setActualInstance(instance);
			return;
		}

		if (instance instanceof StaticAreaID) {
			super.setActualInstance(instance);
			return;
		}

		throw new RuntimeException("Invalid instance type. Must be StaticAreaID, UUID");
	}

	/**
	 * Get the actual instance, which can be the following: StaticAreaID, UUID
	 *
	 * @return The actual instance (StaticAreaID, UUID)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public Object getActualInstance() {
		return super.getActualInstance();
	}

	/**
	 * Get the actual instance of `UUID`. If the actual instance is not `UUID`, the
	 * ClassCastException will be thrown.
	 *
	 * @return The actual instance of `UUID`
	 * @throws ClassCastException if the instance is not `UUID`
	 */
	public UUID getUUID() throws ClassCastException {
		return (UUID) super.getActualInstance();
	}

	/**
	 * Get the actual instance of `StaticAreaID`. If the actual instance is not `StaticAreaID`, the
	 * ClassCastException will be thrown.
	 *
	 * @return The actual instance of `StaticAreaID`
	 * @throws ClassCastException if the instance is not `StaticAreaID`
	 */
	public StaticAreaID getStaticAreaID() throws ClassCastException {
		return (StaticAreaID) super.getActualInstance();
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to AreaId
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		// validate oneOf schemas one by one
		int validCount = 0;
		ArrayList<String> errorMessages = new ArrayList<>();
		// validate the json string with UUID
		try {
			UUID.fromString(jsonElement.getAsString());
			validCount++;
		} catch (Exception e) {
			errorMessages.add(
					String.format("Deserialization for UUID failed with `%s`.", e.getMessage()));
			// continue to the next one
		}
		// validate the json string with StaticAreaID
		try {
			StaticAreaID.validateJsonElement(jsonElement);
			validCount++;
		} catch (Exception e) {
			errorMessages.add(
					String.format(
							"Deserialization for StaticAreaID failed with `%s`.", e.getMessage()));
			// continue to the next one
		}
		if (validCount != 1) {
			throw new IOException(
					String.format(
							"The JSON string is invalid for AreaId with oneOf schemas: StaticAreaID, UUID. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s",
							validCount, errorMessages, jsonElement.toString()));
		}
	}

	/**
	 * Create an instance of AreaId given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of AreaId
	 * @throws IOException if the JSON string is invalid with respect to AreaId
	 */
	public static AreaId fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, AreaId.class);
	}

	/**
	 * Convert an instance of AreaId to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
