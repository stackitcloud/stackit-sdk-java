/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/** The base schema for a security group rule. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class BaseSecurityGroupRule {
	public static final String SERIALIZED_NAME_DESCRIPTION = "description";

	@SerializedName(SERIALIZED_NAME_DESCRIPTION)
	@javax.annotation.Nullable private String description;

	public static final String SERIALIZED_NAME_DIRECTION = "direction";

	@SerializedName(SERIALIZED_NAME_DIRECTION)
	@javax.annotation.Nonnull
	private String direction;

	public static final String SERIALIZED_NAME_ETHERTYPE = "ethertype";

	@SerializedName(SERIALIZED_NAME_ETHERTYPE)
	@javax.annotation.Nullable private String ethertype = "IPv4";

	public static final String SERIALIZED_NAME_ICMP_PARAMETERS = "icmpParameters";

	@SerializedName(SERIALIZED_NAME_ICMP_PARAMETERS)
	@javax.annotation.Nullable private ICMPParameters icmpParameters;

	public static final String SERIALIZED_NAME_ID = "id";

	@SerializedName(SERIALIZED_NAME_ID)
	@javax.annotation.Nullable private UUID id;

	public static final String SERIALIZED_NAME_IP_RANGE = "ipRange";

	@SerializedName(SERIALIZED_NAME_IP_RANGE)
	@javax.annotation.Nullable private String ipRange;

	public static final String SERIALIZED_NAME_PORT_RANGE = "portRange";

	@SerializedName(SERIALIZED_NAME_PORT_RANGE)
	@javax.annotation.Nullable private PortRange portRange;

	public static final String SERIALIZED_NAME_REMOTE_SECURITY_GROUP_ID = "remoteSecurityGroupId";

	@SerializedName(SERIALIZED_NAME_REMOTE_SECURITY_GROUP_ID)
	@javax.annotation.Nullable private UUID remoteSecurityGroupId;

	public static final String SERIALIZED_NAME_SECURITY_GROUP_ID = "securityGroupId";

	@SerializedName(SERIALIZED_NAME_SECURITY_GROUP_ID)
	@javax.annotation.Nullable private UUID securityGroupId;

	public BaseSecurityGroupRule() {}

	public BaseSecurityGroupRule(UUID id, UUID securityGroupId) {
		this();
		this.id = id;
		this.securityGroupId = securityGroupId;
	}

	public BaseSecurityGroupRule description(@javax.annotation.Nullable String description) {
		this.description = description;
		return this;
	}

	/**
	 * Description Object. Allows string up to 255 Characters.
	 *
	 * @return description
	 */
	@javax.annotation.Nullable public String getDescription() {
		return description;
	}

	public void setDescription(@javax.annotation.Nullable String description) {
		this.description = description;
	}

	public BaseSecurityGroupRule direction(@javax.annotation.Nonnull String direction) {
		this.direction = direction;
		return this;
	}

	/**
	 * The direction of the traffic which the rule should match. Possible values:
	 * &#x60;ingress&#x60;, &#x60;egress&#x60;.
	 *
	 * @return direction
	 */
	@javax.annotation.Nonnull
	public String getDirection() {
		return direction;
	}

	public void setDirection(@javax.annotation.Nonnull String direction) {
		this.direction = direction;
	}

	public BaseSecurityGroupRule ethertype(@javax.annotation.Nullable String ethertype) {
		this.ethertype = ethertype;
		return this;
	}

	/**
	 * The ethertype which the rule should match. Possible values: &#x60;IPv4&#x60;,
	 * &#x60;IPv6&#x60;.
	 *
	 * @return ethertype
	 */
	@javax.annotation.Nullable public String getEthertype() {
		return ethertype;
	}

	public void setEthertype(@javax.annotation.Nullable String ethertype) {
		this.ethertype = ethertype;
	}

	public BaseSecurityGroupRule icmpParameters(
			@javax.annotation.Nullable ICMPParameters icmpParameters) {
		this.icmpParameters = icmpParameters;
		return this;
	}

	/**
	 * Get icmpParameters
	 *
	 * @return icmpParameters
	 */
	@javax.annotation.Nullable public ICMPParameters getIcmpParameters() {
		return icmpParameters;
	}

	public void setIcmpParameters(@javax.annotation.Nullable ICMPParameters icmpParameters) {
		this.icmpParameters = icmpParameters;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return id
	 */
	@javax.annotation.Nullable public UUID getId() {
		return id;
	}

	public BaseSecurityGroupRule ipRange(@javax.annotation.Nullable String ipRange) {
		this.ipRange = ipRange;
		return this;
	}

	/**
	 * The remote IP range which the rule should match.
	 *
	 * @return ipRange
	 */
	@javax.annotation.Nullable public String getIpRange() {
		return ipRange;
	}

	public void setIpRange(@javax.annotation.Nullable String ipRange) {
		this.ipRange = ipRange;
	}

	public BaseSecurityGroupRule portRange(@javax.annotation.Nullable PortRange portRange) {
		this.portRange = portRange;
		return this;
	}

	/**
	 * Get portRange
	 *
	 * @return portRange
	 */
	@javax.annotation.Nullable public PortRange getPortRange() {
		return portRange;
	}

	public void setPortRange(@javax.annotation.Nullable PortRange portRange) {
		this.portRange = portRange;
	}

	public BaseSecurityGroupRule remoteSecurityGroupId(
			@javax.annotation.Nullable UUID remoteSecurityGroupId) {
		this.remoteSecurityGroupId = remoteSecurityGroupId;
		return this;
	}

	/**
	 * The remote security group which the rule should match.
	 *
	 * @return remoteSecurityGroupId
	 */
	@javax.annotation.Nullable public UUID getRemoteSecurityGroupId() {
		return remoteSecurityGroupId;
	}

	public void setRemoteSecurityGroupId(@javax.annotation.Nullable UUID remoteSecurityGroupId) {
		this.remoteSecurityGroupId = remoteSecurityGroupId;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return securityGroupId
	 */
	@javax.annotation.Nullable public UUID getSecurityGroupId() {
		return securityGroupId;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		BaseSecurityGroupRule baseSecurityGroupRule = (BaseSecurityGroupRule) o;
		return Objects.equals(this.description, baseSecurityGroupRule.description)
				&& Objects.equals(this.direction, baseSecurityGroupRule.direction)
				&& Objects.equals(this.ethertype, baseSecurityGroupRule.ethertype)
				&& Objects.equals(this.icmpParameters, baseSecurityGroupRule.icmpParameters)
				&& Objects.equals(this.id, baseSecurityGroupRule.id)
				&& Objects.equals(this.ipRange, baseSecurityGroupRule.ipRange)
				&& Objects.equals(this.portRange, baseSecurityGroupRule.portRange)
				&& Objects.equals(
						this.remoteSecurityGroupId, baseSecurityGroupRule.remoteSecurityGroupId)
				&& Objects.equals(this.securityGroupId, baseSecurityGroupRule.securityGroupId);
	}

	@Override
	public int hashCode() {
		return Objects.hash(
				description,
				direction,
				ethertype,
				icmpParameters,
				id,
				ipRange,
				portRange,
				remoteSecurityGroupId,
				securityGroupId);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class BaseSecurityGroupRule {\n");
		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
		sb.append("    ethertype: ").append(toIndentedString(ethertype)).append("\n");
		sb.append("    icmpParameters: ").append(toIndentedString(icmpParameters)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    ipRange: ").append(toIndentedString(ipRange)).append("\n");
		sb.append("    portRange: ").append(toIndentedString(portRange)).append("\n");
		sb.append("    remoteSecurityGroupId: ")
				.append(toIndentedString(remoteSecurityGroupId))
				.append("\n");
		sb.append("    securityGroupId: ").append(toIndentedString(securityGroupId)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"description",
								"direction",
								"ethertype",
								"icmpParameters",
								"id",
								"ipRange",
								"portRange",
								"remoteSecurityGroupId",
								"securityGroupId"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(Arrays.asList("direction"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to BaseSecurityGroupRule
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!BaseSecurityGroupRule.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in BaseSecurityGroupRule is not found in the empty JSON string",
								BaseSecurityGroupRule.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!BaseSecurityGroupRule.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `BaseSecurityGroupRule` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : BaseSecurityGroupRule.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
				&& !jsonObj.get("description").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `description` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("description").toString()));
		}
		if (!jsonObj.get("direction").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `direction` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("direction").toString()));
		}
		if ((jsonObj.get("ethertype") != null && !jsonObj.get("ethertype").isJsonNull())
				&& !jsonObj.get("ethertype").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `ethertype` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("ethertype").toString()));
		}
		// validate the optional field `icmpParameters`
		if (jsonObj.get("icmpParameters") != null && !jsonObj.get("icmpParameters").isJsonNull()) {
			ICMPParameters.validateJsonElement(jsonObj.get("icmpParameters"));
		}
		if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
				&& !jsonObj.get("id").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `id` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("id").toString()));
		}
		if ((jsonObj.get("ipRange") != null && !jsonObj.get("ipRange").isJsonNull())
				&& !jsonObj.get("ipRange").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `ipRange` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("ipRange").toString()));
		}
		// validate the optional field `portRange`
		if (jsonObj.get("portRange") != null && !jsonObj.get("portRange").isJsonNull()) {
			PortRange.validateJsonElement(jsonObj.get("portRange"));
		}
		if ((jsonObj.get("remoteSecurityGroupId") != null
						&& !jsonObj.get("remoteSecurityGroupId").isJsonNull())
				&& !jsonObj.get("remoteSecurityGroupId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `remoteSecurityGroupId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("remoteSecurityGroupId").toString()));
		}
		if ((jsonObj.get("securityGroupId") != null && !jsonObj.get("securityGroupId").isJsonNull())
				&& !jsonObj.get("securityGroupId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `securityGroupId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("securityGroupId").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!BaseSecurityGroupRule.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'BaseSecurityGroupRule' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<BaseSecurityGroupRule> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(BaseSecurityGroupRule.class));

			return (TypeAdapter<T>)
					new TypeAdapter<BaseSecurityGroupRule>() {
						@Override
						public void write(JsonWriter out, BaseSecurityGroupRule value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public BaseSecurityGroupRule read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of BaseSecurityGroupRule given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of BaseSecurityGroupRule
	 * @throws IOException if the JSON string is invalid with respect to BaseSecurityGroupRule
	 */
	public static BaseSecurityGroupRule fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, BaseSecurityGroupRule.class);
	}

	/**
	 * Convert an instance of BaseSecurityGroupRule to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
