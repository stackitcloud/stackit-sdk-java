/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/** Definition of an affinity group. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class CreateAffinityGroupPayload {
	public static final String SERIALIZED_NAME_ID = "id";

	@SerializedName(SERIALIZED_NAME_ID)
	@javax.annotation.Nullable private UUID id;

	public static final String SERIALIZED_NAME_MEMBERS = "members";

	@SerializedName(SERIALIZED_NAME_MEMBERS)
	@javax.annotation.Nullable private List<UUID> members = new ArrayList<>();

	public static final String SERIALIZED_NAME_NAME = "name";

	@SerializedName(SERIALIZED_NAME_NAME)
	@javax.annotation.Nonnull
	private String name;

	public static final String SERIALIZED_NAME_POLICY = "policy";

	@SerializedName(SERIALIZED_NAME_POLICY)
	@javax.annotation.Nonnull
	private String policy;

	public CreateAffinityGroupPayload() {}

	public CreateAffinityGroupPayload(UUID id, List<UUID> members) {
		this();
		this.id = id;
		this.members = members;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return id
	 */
	@javax.annotation.Nullable public UUID getId() {
		return id;
	}

	/**
	 * The servers that are part of the affinity group.
	 *
	 * @return members
	 */
	@javax.annotation.Nullable public List<UUID> getMembers() {
		return members;
	}

	public CreateAffinityGroupPayload name(@javax.annotation.Nonnull String name) {
		this.name = name;
		return this;
	}

	/**
	 * The name for a General Object. Matches Names and also UUIDs.
	 *
	 * @return name
	 */
	@javax.annotation.Nonnull
	public String getName() {
		return name;
	}

	public void setName(@javax.annotation.Nonnull String name) {
		this.name = name;
	}

	public CreateAffinityGroupPayload policy(@javax.annotation.Nonnull String policy) {
		this.policy = policy;
		return this;
	}

	/**
	 * The affinity group policy. &#x60;hard-affinity&#x60;: All servers in this group will be
	 * hosted on the same compute node. &#x60;soft-affinity&#x60;: All servers in this group will be
	 * hosted on as few compute nodes as possible. &#x60;hard-anti-affinity&#x60;: All servers in
	 * this group will be hosted on different compute nodes. &#x60;soft-anti-affinity&#x60;: All
	 * servers in this group will be hosted on as many compute nodes as possible. Possible values:
	 * &#x60;hard-anti-affinity&#x60;, &#x60;hard-affinity&#x60;, &#x60;soft-anti-affinity&#x60;,
	 * &#x60;soft-affinity&#x60;.
	 *
	 * @return policy
	 */
	@javax.annotation.Nonnull
	public String getPolicy() {
		return policy;
	}

	public void setPolicy(@javax.annotation.Nonnull String policy) {
		this.policy = policy;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		CreateAffinityGroupPayload createAffinityGroupPayload = (CreateAffinityGroupPayload) o;
		return Objects.equals(this.id, createAffinityGroupPayload.id)
				&& Objects.equals(this.members, createAffinityGroupPayload.members)
				&& Objects.equals(this.name, createAffinityGroupPayload.name)
				&& Objects.equals(this.policy, createAffinityGroupPayload.policy);
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, members, name, policy);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class CreateAffinityGroupPayload {\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    members: ").append(toIndentedString(members)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>(Arrays.asList("id", "members", "name", "policy"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(Arrays.asList("name", "policy"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to CreateAffinityGroupPayload
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!CreateAffinityGroupPayload.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in CreateAffinityGroupPayload is not found in the empty JSON string",
								CreateAffinityGroupPayload.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!CreateAffinityGroupPayload.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `CreateAffinityGroupPayload` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : CreateAffinityGroupPayload.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
				&& !jsonObj.get("id").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `id` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("id").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("members") != null
				&& !jsonObj.get("members").isJsonNull()
				&& !jsonObj.get("members").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `members` to be an array in the JSON string but got `%s`",
							jsonObj.get("members").toString()));
		}
		if (!jsonObj.get("name").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `name` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("name").toString()));
		}
		if (!jsonObj.get("policy").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `policy` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("policy").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!CreateAffinityGroupPayload.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'CreateAffinityGroupPayload' and its
				// subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<CreateAffinityGroupPayload> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(CreateAffinityGroupPayload.class));

			return (TypeAdapter<T>)
					new TypeAdapter<CreateAffinityGroupPayload>() {
						@Override
						public void write(JsonWriter out, CreateAffinityGroupPayload value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public CreateAffinityGroupPayload read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of CreateAffinityGroupPayload given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of CreateAffinityGroupPayload
	 * @throws IOException if the JSON string is invalid with respect to CreateAffinityGroupPayload
	 */
	public static CreateAffinityGroupPayload fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, CreateAffinityGroupPayload.class);
	}

	/**
	 * Convert an instance of CreateAffinityGroupPayload to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
