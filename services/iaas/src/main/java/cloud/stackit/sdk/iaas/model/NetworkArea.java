/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/** Object that represents a network area. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class NetworkArea {
	public static final String SERIALIZED_NAME_AREA_ID = "areaId";

	@SerializedName(SERIALIZED_NAME_AREA_ID)
	@javax.annotation.Nonnull
	private UUID areaId;

	public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

	@SerializedName(SERIALIZED_NAME_CREATED_AT)
	@javax.annotation.Nullable private OffsetDateTime createdAt;

	public static final String SERIALIZED_NAME_IPV4 = "ipv4";

	@SerializedName(SERIALIZED_NAME_IPV4)
	@javax.annotation.Nullable private NetworkAreaIPv4 ipv4;

	public static final String SERIALIZED_NAME_LABELS = "labels";

	@SerializedName(SERIALIZED_NAME_LABELS)
	@javax.annotation.Nullable private Object labels;

	public static final String SERIALIZED_NAME_NAME = "name";

	@SerializedName(SERIALIZED_NAME_NAME)
	@javax.annotation.Nonnull
	private String name;

	public static final String SERIALIZED_NAME_PROJECT_COUNT = "projectCount";

	@SerializedName(SERIALIZED_NAME_PROJECT_COUNT)
	@javax.annotation.Nonnull
	private Long projectCount;

	public static final String SERIALIZED_NAME_STATE = "state";

	@SerializedName(SERIALIZED_NAME_STATE)
	@javax.annotation.Nonnull
	private String state;

	public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

	@SerializedName(SERIALIZED_NAME_UPDATED_AT)
	@javax.annotation.Nullable private OffsetDateTime updatedAt;

	public NetworkArea() {}

	public NetworkArea(OffsetDateTime createdAt, OffsetDateTime updatedAt) {
		this();
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
	}

	public NetworkArea areaId(@javax.annotation.Nonnull UUID areaId) {
		this.areaId = areaId;
		return this;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return areaId
	 */
	@javax.annotation.Nonnull
	public UUID getAreaId() {
		return areaId;
	}

	public void setAreaId(@javax.annotation.Nonnull UUID areaId) {
		this.areaId = areaId;
	}

	/**
	 * Date-time when resource was created.
	 *
	 * @return createdAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getCreatedAt() {
		return createdAt;
	}

	public NetworkArea ipv4(@javax.annotation.Nullable NetworkAreaIPv4 ipv4) {
		this.ipv4 = ipv4;
		return this;
	}

	/**
	 * Get ipv4
	 *
	 * @return ipv4
	 */
	@javax.annotation.Nullable public NetworkAreaIPv4 getIpv4() {
		return ipv4;
	}

	public void setIpv4(@javax.annotation.Nullable NetworkAreaIPv4 ipv4) {
		this.ipv4 = ipv4;
	}

	public NetworkArea labels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
		return this;
	}

	/**
	 * Object that represents the labels of an object. Regex for keys:
	 * &#x60;^[a-z]((-|_|[a-z0-9])){0,62}$&#x60;. Regex for values:
	 * &#x60;^(-|_|[a-z0-9]){0,63}$&#x60;. Providing a &#x60;null&#x60; value for a key will remove
	 * that key.
	 *
	 * @return labels
	 */
	@javax.annotation.Nullable public Object getLabels() {
		return labels;
	}

	public void setLabels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
	}

	public NetworkArea name(@javax.annotation.Nonnull String name) {
		this.name = name;
		return this;
	}

	/**
	 * Get name
	 *
	 * @return name
	 */
	@javax.annotation.Nonnull
	public String getName() {
		return name;
	}

	public void setName(@javax.annotation.Nonnull String name) {
		this.name = name;
	}

	public NetworkArea projectCount(@javax.annotation.Nonnull Long projectCount) {
		this.projectCount = projectCount;
		return this;
	}

	/**
	 * The amount of projects currently referencing a specific area. minimum: 0
	 *
	 * @return projectCount
	 */
	@javax.annotation.Nonnull
	public Long getProjectCount() {
		return projectCount;
	}

	public void setProjectCount(@javax.annotation.Nonnull Long projectCount) {
		this.projectCount = projectCount;
	}

	public NetworkArea state(@javax.annotation.Nonnull String state) {
		this.state = state;
		return this;
	}

	/**
	 * The state of a resource object. Possible values: &#x60;CREATING&#x60;, &#x60;CREATED&#x60;,
	 * &#x60;DELETING&#x60;, &#x60;DELETED&#x60;, &#x60;FAILED&#x60;, &#x60;UPDATED&#x60;,
	 * &#x60;UPDATING&#x60;.
	 *
	 * @return state
	 */
	@javax.annotation.Nonnull
	public String getState() {
		return state;
	}

	public void setState(@javax.annotation.Nonnull String state) {
		this.state = state;
	}

	/**
	 * Date-time when resource was last updated.
	 *
	 * @return updatedAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getUpdatedAt() {
		return updatedAt;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		NetworkArea networkArea = (NetworkArea) o;
		return Objects.equals(this.areaId, networkArea.areaId)
				&& Objects.equals(this.createdAt, networkArea.createdAt)
				&& Objects.equals(this.ipv4, networkArea.ipv4)
				&& Objects.equals(this.labels, networkArea.labels)
				&& Objects.equals(this.name, networkArea.name)
				&& Objects.equals(this.projectCount, networkArea.projectCount)
				&& Objects.equals(this.state, networkArea.state)
				&& Objects.equals(this.updatedAt, networkArea.updatedAt);
	}

	@Override
	public int hashCode() {
		return Objects.hash(areaId, createdAt, ipv4, labels, name, projectCount, state, updatedAt);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class NetworkArea {\n");
		sb.append("    areaId: ").append(toIndentedString(areaId)).append("\n");
		sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
		sb.append("    ipv4: ").append(toIndentedString(ipv4)).append("\n");
		sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    projectCount: ").append(toIndentedString(projectCount)).append("\n");
		sb.append("    state: ").append(toIndentedString(state)).append("\n");
		sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"areaId",
								"createdAt",
								"ipv4",
								"labels",
								"name",
								"projectCount",
								"state",
								"updatedAt"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields =
				new HashSet<String>(Arrays.asList("areaId", "name", "projectCount", "state"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to NetworkArea
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!NetworkArea.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in NetworkArea is not found in the empty JSON string",
								NetworkArea.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!NetworkArea.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `NetworkArea` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : NetworkArea.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if (!jsonObj.get("areaId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `areaId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("areaId").toString()));
		}
		// validate the optional field `ipv4`
		if (jsonObj.get("ipv4") != null && !jsonObj.get("ipv4").isJsonNull()) {
			NetworkAreaIPv4.validateJsonElement(jsonObj.get("ipv4"));
		}
		if (!jsonObj.get("name").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `name` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("name").toString()));
		}
		if (!jsonObj.get("state").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `state` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("state").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!NetworkArea.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'NetworkArea' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<NetworkArea> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(NetworkArea.class));

			return (TypeAdapter<T>)
					new TypeAdapter<NetworkArea>() {
						@Override
						public void write(JsonWriter out, NetworkArea value) throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public NetworkArea read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of NetworkArea given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of NetworkArea
	 * @throws IOException if the JSON string is invalid with respect to NetworkArea
	 */
	public static NetworkArea fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, NetworkArea.class);
	}

	/**
	 * Convert an instance of NetworkArea to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
