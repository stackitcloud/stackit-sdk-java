/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 2
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/** Object that represents a backup. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class V2UpdateBackupPayload {
	public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "availabilityZone";

	@SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
	@javax.annotation.Nullable private String availabilityZone;

	public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

	@SerializedName(SERIALIZED_NAME_CREATED_AT)
	@javax.annotation.Nullable private OffsetDateTime createdAt;

	public static final String SERIALIZED_NAME_ID = "id";

	@SerializedName(SERIALIZED_NAME_ID)
	@javax.annotation.Nullable private UUID id;

	public static final String SERIALIZED_NAME_LABELS = "labels";

	@SerializedName(SERIALIZED_NAME_LABELS)
	@javax.annotation.Nullable private Object labels;

	public static final String SERIALIZED_NAME_NAME = "name";

	@SerializedName(SERIALIZED_NAME_NAME)
	@javax.annotation.Nullable private String name;

	public static final String SERIALIZED_NAME_SIZE = "size";

	@SerializedName(SERIALIZED_NAME_SIZE)
	@javax.annotation.Nullable private Long size;

	public static final String SERIALIZED_NAME_SNAPSHOT_ID = "snapshotId";

	@SerializedName(SERIALIZED_NAME_SNAPSHOT_ID)
	@javax.annotation.Nullable private UUID snapshotId;

	public static final String SERIALIZED_NAME_STATUS = "status";

	@SerializedName(SERIALIZED_NAME_STATUS)
	@javax.annotation.Nullable private String status;

	public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

	@SerializedName(SERIALIZED_NAME_UPDATED_AT)
	@javax.annotation.Nullable private OffsetDateTime updatedAt;

	public static final String SERIALIZED_NAME_VOLUME_ID = "volumeId";

	@SerializedName(SERIALIZED_NAME_VOLUME_ID)
	@javax.annotation.Nullable private UUID volumeId;

	public V2UpdateBackupPayload() {}

	public V2UpdateBackupPayload(
			String availabilityZone,
			OffsetDateTime createdAt,
			UUID id,
			Long size,
			UUID snapshotId,
			String status,
			OffsetDateTime updatedAt,
			UUID volumeId) {
		this();
		this.availabilityZone = availabilityZone;
		this.createdAt = createdAt;
		this.id = id;
		this.size = size;
		this.snapshotId = snapshotId;
		this.status = status;
		this.updatedAt = updatedAt;
		this.volumeId = volumeId;
	}

	/**
	 * Object that represents an availability zone.
	 *
	 * @return availabilityZone
	 */
	@javax.annotation.Nullable public String getAvailabilityZone() {
		return availabilityZone;
	}

	/**
	 * Date-time when resource was created.
	 *
	 * @return createdAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getCreatedAt() {
		return createdAt;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return id
	 */
	@javax.annotation.Nullable public UUID getId() {
		return id;
	}

	public V2UpdateBackupPayload labels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
		return this;
	}

	/**
	 * Object that represents the labels of an object. Regex for keys:
	 * &#x60;^(?&#x3D;.{1,63}$)([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$&#x60;. Regex for values:
	 * &#x60;^(?&#x3D;.{0,63}$)(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])*$&#x60;. Providing a
	 * &#x60;null&#x60; value for a key will remove that key.
	 *
	 * @return labels
	 */
	@javax.annotation.Nullable public Object getLabels() {
		return labels;
	}

	public void setLabels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
	}

	public V2UpdateBackupPayload name(@javax.annotation.Nullable String name) {
		this.name = name;
		return this;
	}

	/**
	 * The name for a General Object. Matches Names and also UUIDs.
	 *
	 * @return name
	 */
	@javax.annotation.Nullable public String getName() {
		return name;
	}

	public void setName(@javax.annotation.Nullable String name) {
		this.name = name;
	}

	/**
	 * Size in Gigabyte.
	 *
	 * @return size
	 */
	@javax.annotation.Nullable public Long getSize() {
		return size;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return snapshotId
	 */
	@javax.annotation.Nullable public UUID getSnapshotId() {
		return snapshotId;
	}

	/**
	 * The status of a backup object. Possible values: &#x60;AVAILABLE&#x60;, &#x60;CREATING&#x60;,
	 * &#x60;DELETED&#x60;, &#x60;DELETING&#x60;, &#x60;ERROR&#x60;, &#x60;RESTORING&#x60;.
	 *
	 * @return status
	 */
	@javax.annotation.Nullable public String getStatus() {
		return status;
	}

	/**
	 * Date-time when resource was last updated.
	 *
	 * @return updatedAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getUpdatedAt() {
		return updatedAt;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return volumeId
	 */
	@javax.annotation.Nullable public UUID getVolumeId() {
		return volumeId;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		V2UpdateBackupPayload v2UpdateBackupPayload = (V2UpdateBackupPayload) o;
		return Objects.equals(this.availabilityZone, v2UpdateBackupPayload.availabilityZone)
				&& Objects.equals(this.createdAt, v2UpdateBackupPayload.createdAt)
				&& Objects.equals(this.id, v2UpdateBackupPayload.id)
				&& Objects.equals(this.labels, v2UpdateBackupPayload.labels)
				&& Objects.equals(this.name, v2UpdateBackupPayload.name)
				&& Objects.equals(this.size, v2UpdateBackupPayload.size)
				&& Objects.equals(this.snapshotId, v2UpdateBackupPayload.snapshotId)
				&& Objects.equals(this.status, v2UpdateBackupPayload.status)
				&& Objects.equals(this.updatedAt, v2UpdateBackupPayload.updatedAt)
				&& Objects.equals(this.volumeId, v2UpdateBackupPayload.volumeId);
	}

	@Override
	public int hashCode() {
		return Objects.hash(
				availabilityZone,
				createdAt,
				id,
				labels,
				name,
				size,
				snapshotId,
				status,
				updatedAt,
				volumeId);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class V2UpdateBackupPayload {\n");
		sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
		sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    size: ").append(toIndentedString(size)).append("\n");
		sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
		sb.append("    volumeId: ").append(toIndentedString(volumeId)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"availabilityZone",
								"createdAt",
								"id",
								"labels",
								"name",
								"size",
								"snapshotId",
								"status",
								"updatedAt",
								"volumeId"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(0);
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to V2UpdateBackupPayload
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!V2UpdateBackupPayload.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in V2UpdateBackupPayload is not found in the empty JSON string",
								V2UpdateBackupPayload.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!V2UpdateBackupPayload.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `V2UpdateBackupPayload` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("availabilityZone") != null
						&& !jsonObj.get("availabilityZone").isJsonNull())
				&& !jsonObj.get("availabilityZone").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `availabilityZone` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("availabilityZone").toString()));
		}
		if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
				&& !jsonObj.get("id").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `id` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("id").toString()));
		}
		if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
				&& !jsonObj.get("name").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `name` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("name").toString()));
		}
		if ((jsonObj.get("snapshotId") != null && !jsonObj.get("snapshotId").isJsonNull())
				&& !jsonObj.get("snapshotId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `snapshotId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("snapshotId").toString()));
		}
		if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
				&& !jsonObj.get("status").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `status` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("status").toString()));
		}
		if ((jsonObj.get("volumeId") != null && !jsonObj.get("volumeId").isJsonNull())
				&& !jsonObj.get("volumeId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `volumeId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("volumeId").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!V2UpdateBackupPayload.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'V2UpdateBackupPayload' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<V2UpdateBackupPayload> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(V2UpdateBackupPayload.class));

			return (TypeAdapter<T>)
					new TypeAdapter<V2UpdateBackupPayload>() {
						@Override
						public void write(JsonWriter out, V2UpdateBackupPayload value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public V2UpdateBackupPayload read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of V2UpdateBackupPayload given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of V2UpdateBackupPayload
	 * @throws IOException if the JSON string is invalid with respect to V2UpdateBackupPayload
	 */
	public static V2UpdateBackupPayload fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, V2UpdateBackupPayload.class);
	}

	/**
	 * Convert an instance of V2UpdateBackupPayload to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
