/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** The addressFamily object for a network update request. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class UpdateNetworkAddressFamily {
	public static final String SERIALIZED_NAME_IPV4 = "ipv4";

	@SerializedName(SERIALIZED_NAME_IPV4)
	@javax.annotation.Nullable private UpdateNetworkIPv4Body ipv4;

	public static final String SERIALIZED_NAME_IPV6 = "ipv6";

	@SerializedName(SERIALIZED_NAME_IPV6)
	@javax.annotation.Nullable private UpdateNetworkIPv6Body ipv6;

	public UpdateNetworkAddressFamily() {}

	public UpdateNetworkAddressFamily ipv4(@javax.annotation.Nullable UpdateNetworkIPv4Body ipv4) {
		this.ipv4 = ipv4;
		return this;
	}

	/**
	 * Get ipv4
	 *
	 * @return ipv4
	 */
	@javax.annotation.Nullable public UpdateNetworkIPv4Body getIpv4() {
		return ipv4;
	}

	public void setIpv4(@javax.annotation.Nullable UpdateNetworkIPv4Body ipv4) {
		this.ipv4 = ipv4;
	}

	public UpdateNetworkAddressFamily ipv6(@javax.annotation.Nullable UpdateNetworkIPv6Body ipv6) {
		this.ipv6 = ipv6;
		return this;
	}

	/**
	 * Get ipv6
	 *
	 * @return ipv6
	 */
	@javax.annotation.Nullable public UpdateNetworkIPv6Body getIpv6() {
		return ipv6;
	}

	public void setIpv6(@javax.annotation.Nullable UpdateNetworkIPv6Body ipv6) {
		this.ipv6 = ipv6;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		UpdateNetworkAddressFamily updateNetworkAddressFamily = (UpdateNetworkAddressFamily) o;
		return Objects.equals(this.ipv4, updateNetworkAddressFamily.ipv4)
				&& Objects.equals(this.ipv6, updateNetworkAddressFamily.ipv6);
	}

	@Override
	public int hashCode() {
		return Objects.hash(ipv4, ipv6);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class UpdateNetworkAddressFamily {\n");
		sb.append("    ipv4: ").append(toIndentedString(ipv4)).append("\n");
		sb.append("    ipv6: ").append(toIndentedString(ipv6)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>(Arrays.asList("ipv4", "ipv6"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(0);
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkAddressFamily
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!UpdateNetworkAddressFamily.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in UpdateNetworkAddressFamily is not found in the empty JSON string",
								UpdateNetworkAddressFamily.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!UpdateNetworkAddressFamily.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `UpdateNetworkAddressFamily` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		// validate the optional field `ipv4`
		if (jsonObj.get("ipv4") != null && !jsonObj.get("ipv4").isJsonNull()) {
			UpdateNetworkIPv4Body.validateJsonElement(jsonObj.get("ipv4"));
		}
		// validate the optional field `ipv6`
		if (jsonObj.get("ipv6") != null && !jsonObj.get("ipv6").isJsonNull()) {
			UpdateNetworkIPv6Body.validateJsonElement(jsonObj.get("ipv6"));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!UpdateNetworkAddressFamily.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'UpdateNetworkAddressFamily' and its
				// subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<UpdateNetworkAddressFamily> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkAddressFamily.class));

			return (TypeAdapter<T>)
					new TypeAdapter<UpdateNetworkAddressFamily>() {
						@Override
						public void write(JsonWriter out, UpdateNetworkAddressFamily value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public UpdateNetworkAddressFamily read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of UpdateNetworkAddressFamily given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of UpdateNetworkAddressFamily
	 * @throws IOException if the JSON string is invalid with respect to UpdateNetworkAddressFamily
	 */
	public static UpdateNetworkAddressFamily fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, UpdateNetworkAddressFamily.class);
	}

	/**
	 * Convert an instance of UpdateNetworkAddressFamily to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
