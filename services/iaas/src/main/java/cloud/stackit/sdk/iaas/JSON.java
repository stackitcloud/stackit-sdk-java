/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.gsonfire.GsonFireBuilder;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Map;
import okio.ByteString;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
	private static Gson gson;
	private static boolean isLenientOnJson = false;
	private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
	private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
	private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter =
			new OffsetDateTimeTypeAdapter();
	private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
	private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

	@SuppressWarnings("unchecked")
	public static GsonBuilder createGson() {
		GsonFireBuilder fireBuilder = new GsonFireBuilder();
		GsonBuilder builder = fireBuilder.createGsonBuilder();
		return builder;
	}

	private static String getDiscriminatorValue(
			JsonElement readElement, String discriminatorField) {
		JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
		if (null == element) {
			throw new IllegalArgumentException(
					"missing discriminator field: <" + discriminatorField + ">");
		}
		return element.getAsString();
	}

	/**
	 * Returns the Java class that implements the OpenAPI schema for the specified discriminator
	 * value.
	 *
	 * @param classByDiscriminatorValue The map of discriminator values to Java classes.
	 * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
	 * @return The Java class that implements the OpenAPI schema
	 */
	private static Class getClassByDiscriminator(
			Map classByDiscriminatorValue, String discriminatorValue) {
		Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
		if (null == clazz) {
			throw new IllegalArgumentException(
					"cannot determine model class of name: <" + discriminatorValue + ">");
		}
		return clazz;
	}

	static {
		GsonBuilder gsonBuilder = createGson();
		gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
		gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
		gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
		gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
		gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.AddVolumeToServerPayload
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.AffinityGroup.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.AffinityGroupListResponse
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.AllowedAddressesInner.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.Area.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.AreaConfig.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.AreaId.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.AreaPrefixConfigIPv4.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.AvailabilityZoneListResponse
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.Backup.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.BackupListResponse.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.BackupSource.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.BaseSecurityGroupRule.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.BootVolume.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.BootVolumeSource.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateAffinityGroupPayload
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateAreaAddressFamily
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateAreaIPv4.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateBackupPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateImagePayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateKeyPairPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateNetworkAddressFamily
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateNetworkAreaPayload
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateNetworkAreaRangePayload
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateNetworkAreaRoutePayload
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateNetworkIPv4Body.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateNetworkIPv6Body.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateNetworkPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateNicPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateProtocol.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreatePublicIPPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateSecurityGroupPayload
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateSecurityGroupRulePayload
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateSecurityGroupRuleProtocol
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateServerNetworking.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateServerNetworkingWithNics
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateServerPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateServerPayloadNetworking
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateSnapshotPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.CreateVolumePayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.Error.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.GetServerLog200Response
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ICMPParameters.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.Image.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ImageAgent.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ImageChecksum.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ImageConfig.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ImageCreateResponse.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ImageListResponse.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ImageShare.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ImageShareConsumer.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.KeyPairListResponse.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.Keypair.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.MachineType.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.MachineTypeListResponse
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.NIC.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.NICListResponse.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.Network.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.NetworkArea.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.NetworkAreaIPv4.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.NetworkAreaListResponse
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.NetworkListResponse.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.NetworkRange.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.NetworkRangeListResponse
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.PartialUpdateNetworkAreaPayload
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.PartialUpdateNetworkPayload
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.PortRange.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.Project.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ProjectListResponse.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.Protocol.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.PublicIp.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.PublicIpListResponse.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.PublicNetwork.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.PublicNetworkListResponse
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.Quota.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.QuotaList.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.QuotaListResponse.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.Request.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.RequestResource.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.RescueServerPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ResizeServerPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ResizeVolumePayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.Route.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.RouteListResponse.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.SecurityGroup.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.SecurityGroupListResponse
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.SecurityGroupRule.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.SecurityGroupRuleListResponse
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.SecurityGroupRuleProtocol
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.Server.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ServerAgent.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ServerConsoleUrl.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ServerListResponse.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ServerMaintenance.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ServerNetwork.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.ServiceAccountMailListResponse
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.SetImageSharePayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.Snapshot.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.SnapshotListResponse.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateAreaAddressFamily
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateAreaIPv4.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateAttachedVolumePayload
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateBackupPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateImagePayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateImageSharePayload
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateKeyPairPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateNetworkAddressFamily
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateNetworkAreaRoutePayload
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateNetworkIPv4Body.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateNetworkIPv6Body.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateNicPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdatePublicIPPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateSecurityGroupPayload
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateServerPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateSnapshotPayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.UpdateVolumePayload.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.Volume.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.VolumeAttachment.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.VolumeAttachmentListResponse
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.VolumeEncryptionParameter
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.VolumeListResponse.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.VolumePerformanceClass.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.VolumePerformanceClassListResponse
						.CustomTypeAdapterFactory());
		gsonBuilder.registerTypeAdapterFactory(
				new cloud.stackit.sdk.iaas.model.VolumeSource.CustomTypeAdapterFactory());
		gson = gsonBuilder.create();
	}

	/**
	 * Get Gson.
	 *
	 * @return Gson
	 */
	public static Gson getGson() {
		return gson;
	}

	/**
	 * Set Gson.
	 *
	 * @param gson Gson
	 */
	public static void setGson(Gson gson) {
		JSON.gson = gson;
	}

	public static void setLenientOnJson(boolean lenientOnJson) {
		isLenientOnJson = lenientOnJson;
	}

	/**
	 * Serialize the given Java object into JSON string.
	 *
	 * @param obj Object
	 * @return String representation of the JSON
	 */
	public static String serialize(Object obj) {
		return gson.toJson(obj);
	}

	/**
	 * Deserialize the given JSON string to Java object.
	 *
	 * @param <T> Type
	 * @param body The JSON string
	 * @param returnType The type to deserialize into
	 * @return The deserialized Java object
	 */
	@SuppressWarnings("unchecked")
	public static <T> T deserialize(String body, Type returnType) {
		try {
			if (isLenientOnJson) {
				JsonReader jsonReader = new JsonReader(new StringReader(body));
				// see
				// https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
				jsonReader.setLenient(true);
				return gson.fromJson(jsonReader, returnType);
			} else {
				return gson.fromJson(body, returnType);
			}
		} catch (JsonParseException e) {
			// Fallback processing when failed to parse JSON form response body:
			// return the response body string directly for the String return type;
			if (returnType.equals(String.class)) {
				return (T) body;
			} else {
				throw (e);
			}
		}
	}

	/**
	 * Deserialize the given JSON InputStream to a Java object.
	 *
	 * @param <T> Type
	 * @param inputStream The JSON InputStream
	 * @param returnType The type to deserialize into
	 * @return The deserialized Java object
	 */
	@SuppressWarnings("unchecked")
	public static <T> T deserialize(InputStream inputStream, Type returnType) throws IOException {
		try (InputStreamReader reader =
				new InputStreamReader(inputStream, StandardCharsets.UTF_8)) {
			if (isLenientOnJson) {
				// see
				// https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
				JsonReader jsonReader = new JsonReader(reader);
				jsonReader.setLenient(true);
				return gson.fromJson(jsonReader, returnType);
			} else {
				return gson.fromJson(reader, returnType);
			}
		}
	}

	/** Gson TypeAdapter for Byte Array type */
	public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

		@Override
		public void write(JsonWriter out, byte[] value) throws IOException {
			if (value == null) {
				out.nullValue();
			} else {
				out.value(ByteString.of(value).base64());
			}
		}

		@Override
		public byte[] read(JsonReader in) throws IOException {
			switch (in.peek()) {
				case NULL:
					in.nextNull();
					return null;
				default:
					String bytesAsBase64 = in.nextString();
					ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
					return byteString.toByteArray();
			}
		}
	}

	/** Gson TypeAdapter for JSR310 OffsetDateTime type */
	public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

		private DateTimeFormatter formatter;

		public OffsetDateTimeTypeAdapter() {
			this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
		}

		public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
			this.formatter = formatter;
		}

		public void setFormat(DateTimeFormatter dateFormat) {
			this.formatter = dateFormat;
		}

		@Override
		public void write(JsonWriter out, OffsetDateTime date) throws IOException {
			if (date == null) {
				out.nullValue();
			} else {
				out.value(formatter.format(date));
			}
		}

		@Override
		public OffsetDateTime read(JsonReader in) throws IOException {
			switch (in.peek()) {
				case NULL:
					in.nextNull();
					return null;
				default:
					String date = in.nextString();
					if (date.endsWith("+0000")) {
						date = date.substring(0, date.length() - 5) + "Z";
					}
					return OffsetDateTime.parse(date, formatter);
			}
		}
	}

	/** Gson TypeAdapter for JSR310 LocalDate type */
	public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

		private DateTimeFormatter formatter;

		public LocalDateTypeAdapter() {
			this(DateTimeFormatter.ISO_LOCAL_DATE);
		}

		public LocalDateTypeAdapter(DateTimeFormatter formatter) {
			this.formatter = formatter;
		}

		public void setFormat(DateTimeFormatter dateFormat) {
			this.formatter = dateFormat;
		}

		@Override
		public void write(JsonWriter out, LocalDate date) throws IOException {
			if (date == null) {
				out.nullValue();
			} else {
				out.value(formatter.format(date));
			}
		}

		@Override
		public LocalDate read(JsonReader in) throws IOException {
			switch (in.peek()) {
				case NULL:
					in.nextNull();
					return null;
				default:
					String date = in.nextString();
					return LocalDate.parse(date, formatter);
			}
		}
	}

	public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
		offsetDateTimeTypeAdapter.setFormat(dateFormat);
	}

	public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
		localDateTypeAdapter.setFormat(dateFormat);
	}

	/**
	 * Gson TypeAdapter for java.sql.Date type If the dateFormat is null, a simple "yyyy-MM-dd"
	 * format will be used (more efficient than SimpleDateFormat).
	 */
	public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

		private DateFormat dateFormat;

		public SqlDateTypeAdapter() {}

		public SqlDateTypeAdapter(DateFormat dateFormat) {
			this.dateFormat = dateFormat;
		}

		public void setFormat(DateFormat dateFormat) {
			this.dateFormat = dateFormat;
		}

		@Override
		public void write(JsonWriter out, java.sql.Date date) throws IOException {
			if (date == null) {
				out.nullValue();
			} else {
				String value;
				if (dateFormat != null) {
					value = dateFormat.format(date);
				} else {
					value = date.toString();
				}
				out.value(value);
			}
		}

		@Override
		public java.sql.Date read(JsonReader in) throws IOException {
			switch (in.peek()) {
				case NULL:
					in.nextNull();
					return null;
				default:
					String date = in.nextString();
					try {
						if (dateFormat != null) {
							return new java.sql.Date(dateFormat.parse(date).getTime());
						}
						return new java.sql.Date(
								ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
					} catch (ParseException e) {
						throw new JsonParseException(e);
					}
			}
		}
	}

	/**
	 * Gson TypeAdapter for java.util.Date type If the dateFormat is null, ISO8601Utils will be
	 * used.
	 */
	public static class DateTypeAdapter extends TypeAdapter<Date> {

		private DateFormat dateFormat;

		public DateTypeAdapter() {}

		public DateTypeAdapter(DateFormat dateFormat) {
			this.dateFormat = dateFormat;
		}

		public void setFormat(DateFormat dateFormat) {
			this.dateFormat = dateFormat;
		}

		@Override
		public void write(JsonWriter out, Date date) throws IOException {
			if (date == null) {
				out.nullValue();
			} else {
				String value;
				if (dateFormat != null) {
					value = dateFormat.format(date);
				} else {
					value = ISO8601Utils.format(date, true);
				}
				out.value(value);
			}
		}

		@Override
		public Date read(JsonReader in) throws IOException {
			try {
				switch (in.peek()) {
					case NULL:
						in.nextNull();
						return null;
					default:
						String date = in.nextString();
						try {
							if (dateFormat != null) {
								return dateFormat.parse(date);
							}
							return ISO8601Utils.parse(date, new ParsePosition(0));
						} catch (ParseException e) {
							throw new JsonParseException(e);
						}
				}
			} catch (IllegalArgumentException e) {
				throw new JsonParseException(e);
			}
		}
	}

	public static void setDateFormat(DateFormat dateFormat) {
		dateTypeAdapter.setFormat(dateFormat);
	}

	public static void setSqlDateFormat(DateFormat dateFormat) {
		sqlDateTypeAdapter.setFormat(dateFormat);
	}
}
