/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/** Object that represents a STACKIT project. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.14.0")
public class Project {
	public static final String SERIALIZED_NAME_AREA_ID = "areaId";

	@SerializedName(SERIALIZED_NAME_AREA_ID)
	@javax.annotation.Nonnull
	private AreaId areaId;

	public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

	@SerializedName(SERIALIZED_NAME_CREATED_AT)
	@javax.annotation.Nullable private OffsetDateTime createdAt;

	public static final String SERIALIZED_NAME_INTERNET_ACCESS = "internetAccess";

	@SerializedName(SERIALIZED_NAME_INTERNET_ACCESS)
	@javax.annotation.Nullable private Boolean internetAccess;

	public static final String SERIALIZED_NAME_OPENSTACK_PROJECT_ID = "openstackProjectId";

	@SerializedName(SERIALIZED_NAME_OPENSTACK_PROJECT_ID)
	@javax.annotation.Nullable private String openstackProjectId;

	public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";

	@SerializedName(SERIALIZED_NAME_PROJECT_ID)
	@javax.annotation.Nonnull
	private UUID projectId;

	public static final String SERIALIZED_NAME_STATE = "state";

	@SerializedName(SERIALIZED_NAME_STATE)
	@javax.annotation.Nonnull
	private String state;

	public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

	@SerializedName(SERIALIZED_NAME_UPDATED_AT)
	@javax.annotation.Nullable private OffsetDateTime updatedAt;

	public Project() {}

	public Project(OffsetDateTime createdAt, String openstackProjectId, OffsetDateTime updatedAt) {
		this();
		this.createdAt = createdAt;
		this.openstackProjectId = openstackProjectId;
		this.updatedAt = updatedAt;
	}

	public Project areaId(@javax.annotation.Nonnull AreaId areaId) {
		this.areaId = areaId;
		return this;
	}

	/**
	 * Get areaId
	 *
	 * @return areaId
	 */
	@javax.annotation.Nonnull
	public AreaId getAreaId() {
		return areaId;
	}

	public void setAreaId(@javax.annotation.Nonnull AreaId areaId) {
		this.areaId = areaId;
	}

	/**
	 * Date-time when resource was created.
	 *
	 * @return createdAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getCreatedAt() {
		return createdAt;
	}

	public Project internetAccess(@javax.annotation.Nullable Boolean internetAccess) {
		this.internetAccess = internetAccess;
		return this;
	}

	/**
	 * Get internetAccess
	 *
	 * @return internetAccess
	 */
	@javax.annotation.Nullable public Boolean getInternetAccess() {
		return internetAccess;
	}

	public void setInternetAccess(@javax.annotation.Nullable Boolean internetAccess) {
		this.internetAccess = internetAccess;
	}

	/**
	 * The identifier (ID) of the OpenStack project in the main region eu01.
	 *
	 * @return openstackProjectId
	 */
	@javax.annotation.Nullable public String getOpenstackProjectId() {
		return openstackProjectId;
	}

	public Project projectId(@javax.annotation.Nonnull UUID projectId) {
		this.projectId = projectId;
		return this;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return projectId
	 */
	@javax.annotation.Nonnull
	public UUID getProjectId() {
		return projectId;
	}

	public void setProjectId(@javax.annotation.Nonnull UUID projectId) {
		this.projectId = projectId;
	}

	public Project state(@javax.annotation.Nonnull String state) {
		this.state = state;
		return this;
	}

	/**
	 * The state of a resource object. Possible values: &#x60;CREATING&#x60;, &#x60;CREATED&#x60;,
	 * &#x60;DELETING&#x60;, &#x60;DELETED&#x60;, &#x60;FAILED&#x60;, &#x60;UPDATED&#x60;,
	 * &#x60;UPDATING&#x60;.
	 *
	 * @return state
	 */
	@javax.annotation.Nonnull
	public String getState() {
		return state;
	}

	public void setState(@javax.annotation.Nonnull String state) {
		this.state = state;
	}

	/**
	 * Date-time when resource was last updated.
	 *
	 * @return updatedAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getUpdatedAt() {
		return updatedAt;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Project project = (Project) o;
		return Objects.equals(this.areaId, project.areaId)
				&& Objects.equals(this.createdAt, project.createdAt)
				&& Objects.equals(this.internetAccess, project.internetAccess)
				&& Objects.equals(this.openstackProjectId, project.openstackProjectId)
				&& Objects.equals(this.projectId, project.projectId)
				&& Objects.equals(this.state, project.state)
				&& Objects.equals(this.updatedAt, project.updatedAt);
	}

	@Override
	public int hashCode() {
		return Objects.hash(
				areaId, createdAt, internetAccess, openstackProjectId, projectId, state, updatedAt);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Project {\n");
		sb.append("    areaId: ").append(toIndentedString(areaId)).append("\n");
		sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
		sb.append("    internetAccess: ").append(toIndentedString(internetAccess)).append("\n");
		sb.append("    openstackProjectId: ")
				.append(toIndentedString(openstackProjectId))
				.append("\n");
		sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
		sb.append("    state: ").append(toIndentedString(state)).append("\n");
		sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"areaId",
								"createdAt",
								"internetAccess",
								"openstackProjectId",
								"projectId",
								"state",
								"updatedAt"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(Arrays.asList("areaId", "projectId", "state"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to Project
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!Project.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in Project is not found in the empty JSON string",
								Project.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!Project.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `Project` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : Project.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		// validate the required field `areaId`
		AreaId.validateJsonElement(jsonObj.get("areaId"));
		if ((jsonObj.get("openstackProjectId") != null
						&& !jsonObj.get("openstackProjectId").isJsonNull())
				&& !jsonObj.get("openstackProjectId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `openstackProjectId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("openstackProjectId").toString()));
		}
		if (!jsonObj.get("projectId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `projectId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("projectId").toString()));
		}
		if (!jsonObj.get("state").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `state` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("state").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!Project.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'Project' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<Project> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(Project.class));

			return (TypeAdapter<T>)
					new TypeAdapter<Project>() {
						@Override
						public void write(JsonWriter out, Project value) throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public Project read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of Project given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of Project
	 * @throws IOException if the JSON string is invalid with respect to Project
	 */
	public static Project fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, Project.class);
	}

	/**
	 * Convert an instance of Project to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
