/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 2beta1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** Properties to set hardware and scheduling settings for an Image. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class ImageConfig {
	public static final String SERIALIZED_NAME_ARCHITECTURE = "architecture";

	@SerializedName(SERIALIZED_NAME_ARCHITECTURE)
	@javax.annotation.Nullable private String architecture;

	public static final String SERIALIZED_NAME_BOOT_MENU = "bootMenu";

	@SerializedName(SERIALIZED_NAME_BOOT_MENU)
	@javax.annotation.Nullable private Boolean bootMenu;

	public static final String SERIALIZED_NAME_CDROM_BUS = "cdromBus";

	@SerializedName(SERIALIZED_NAME_CDROM_BUS)
	@javax.annotation.Nullable private String cdromBus;

	public static final String SERIALIZED_NAME_DISK_BUS = "diskBus";

	@SerializedName(SERIALIZED_NAME_DISK_BUS)
	@javax.annotation.Nullable private String diskBus;

	public static final String SERIALIZED_NAME_NIC_MODEL = "nicModel";

	@SerializedName(SERIALIZED_NAME_NIC_MODEL)
	@javax.annotation.Nullable private String nicModel;

	public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operatingSystem";

	@SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
	@javax.annotation.Nullable private String operatingSystem;

	public static final String SERIALIZED_NAME_OPERATING_SYSTEM_DISTRO = "operatingSystemDistro";

	@SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM_DISTRO)
	@javax.annotation.Nullable private String operatingSystemDistro;

	public static final String SERIALIZED_NAME_OPERATING_SYSTEM_VERSION = "operatingSystemVersion";

	@SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM_VERSION)
	@javax.annotation.Nullable private String operatingSystemVersion;

	public static final String SERIALIZED_NAME_RESCUE_BUS = "rescueBus";

	@SerializedName(SERIALIZED_NAME_RESCUE_BUS)
	@javax.annotation.Nullable private String rescueBus;

	public static final String SERIALIZED_NAME_RESCUE_DEVICE = "rescueDevice";

	@SerializedName(SERIALIZED_NAME_RESCUE_DEVICE)
	@javax.annotation.Nullable private String rescueDevice;

	public static final String SERIALIZED_NAME_SECURE_BOOT = "secureBoot";

	@SerializedName(SERIALIZED_NAME_SECURE_BOOT)
	@javax.annotation.Nullable private Boolean secureBoot;

	public static final String SERIALIZED_NAME_UEFI = "uefi";

	@SerializedName(SERIALIZED_NAME_UEFI)
	@javax.annotation.Nullable private Boolean uefi;

	public static final String SERIALIZED_NAME_VIDEO_MODEL = "videoModel";

	@SerializedName(SERIALIZED_NAME_VIDEO_MODEL)
	@javax.annotation.Nullable private String videoModel;

	public static final String SERIALIZED_NAME_VIRTIO_SCSI = "virtioScsi";

	@SerializedName(SERIALIZED_NAME_VIRTIO_SCSI)
	@javax.annotation.Nullable private Boolean virtioScsi;

	public ImageConfig() {}

	public ImageConfig architecture(@javax.annotation.Nullable String architecture) {
		this.architecture = architecture;
		return this;
	}

	/**
	 * Represents CPU architecture. The default for new images is x86. Possible values:
	 * &#x60;arm64&#x60;, &#x60;x86&#x60;.
	 *
	 * @return architecture
	 */
	@javax.annotation.Nullable public String getArchitecture() {
		return architecture;
	}

	public void setArchitecture(@javax.annotation.Nullable String architecture) {
		this.architecture = architecture;
	}

	public ImageConfig bootMenu(@javax.annotation.Nullable Boolean bootMenu) {
		this.bootMenu = bootMenu;
		return this;
	}

	/**
	 * Enables the BIOS bootmenu. The default for new images is disabled.
	 *
	 * @return bootMenu
	 */
	@javax.annotation.Nullable public Boolean getBootMenu() {
		return bootMenu;
	}

	public void setBootMenu(@javax.annotation.Nullable Boolean bootMenu) {
		this.bootMenu = bootMenu;
	}

	public ImageConfig cdromBus(@javax.annotation.Nullable String cdromBus) {
		this.cdromBus = cdromBus;
		return this;
	}

	/**
	 * Sets CDROM bus controller type. Possible values: &#x60;scsi&#x60;, &#x60;virtio&#x60;,
	 * &#x60;ide&#x60;, &#x60;usb&#x60;.
	 *
	 * @return cdromBus
	 */
	@javax.annotation.Nullable public String getCdromBus() {
		return cdromBus;
	}

	public void setCdromBus(@javax.annotation.Nullable String cdromBus) {
		this.cdromBus = cdromBus;
	}

	public ImageConfig diskBus(@javax.annotation.Nullable String diskBus) {
		this.diskBus = diskBus;
		return this;
	}

	/**
	 * Sets Disk bus controller type. Possible values: &#x60;scsi&#x60;, &#x60;virtio&#x60;,
	 * &#x60;ide&#x60;, &#x60;usb&#x60;.
	 *
	 * @return diskBus
	 */
	@javax.annotation.Nullable public String getDiskBus() {
		return diskBus;
	}

	public void setDiskBus(@javax.annotation.Nullable String diskBus) {
		this.diskBus = diskBus;
	}

	public ImageConfig nicModel(@javax.annotation.Nullable String nicModel) {
		this.nicModel = nicModel;
		return this;
	}

	/**
	 * Sets virtual nic model. Possible values: &#x60;e1000&#x60;, &#x60;e1000e&#x60;,
	 * &#x60;ne2k_pci&#x60;, &#x60;pcnet&#x60;, &#x60;rtl8139&#x60;, &#x60;virtio&#x60;,
	 * &#x60;vmxnet3&#x60;.
	 *
	 * @return nicModel
	 */
	@javax.annotation.Nullable public String getNicModel() {
		return nicModel;
	}

	public void setNicModel(@javax.annotation.Nullable String nicModel) {
		this.nicModel = nicModel;
	}

	public ImageConfig operatingSystem(@javax.annotation.Nullable String operatingSystem) {
		this.operatingSystem = operatingSystem;
		return this;
	}

	/**
	 * Enables OS specific optimizations. Possible values: &#x60;windows&#x60;, &#x60;linux&#x60;.
	 *
	 * @return operatingSystem
	 */
	@javax.annotation.Nullable public String getOperatingSystem() {
		return operatingSystem;
	}

	public void setOperatingSystem(@javax.annotation.Nullable String operatingSystem) {
		this.operatingSystem = operatingSystem;
	}

	public ImageConfig operatingSystemDistro(
			@javax.annotation.Nullable String operatingSystemDistro) {
		this.operatingSystemDistro = operatingSystemDistro;
		return this;
	}

	/**
	 * Operating System Distribution.
	 *
	 * @return operatingSystemDistro
	 */
	@javax.annotation.Nullable public String getOperatingSystemDistro() {
		return operatingSystemDistro;
	}

	public void setOperatingSystemDistro(@javax.annotation.Nullable String operatingSystemDistro) {
		this.operatingSystemDistro = operatingSystemDistro;
	}

	public ImageConfig operatingSystemVersion(
			@javax.annotation.Nullable String operatingSystemVersion) {
		this.operatingSystemVersion = operatingSystemVersion;
		return this;
	}

	/**
	 * Version of the OS.
	 *
	 * @return operatingSystemVersion
	 */
	@javax.annotation.Nullable public String getOperatingSystemVersion() {
		return operatingSystemVersion;
	}

	public void setOperatingSystemVersion(
			@javax.annotation.Nullable String operatingSystemVersion) {
		this.operatingSystemVersion = operatingSystemVersion;
	}

	public ImageConfig rescueBus(@javax.annotation.Nullable String rescueBus) {
		this.rescueBus = rescueBus;
		return this;
	}

	/**
	 * Sets the device bus when the image is used as a rescue image. Possible values:
	 * &#x60;sata&#x60;, &#x60;scsi&#x60;, &#x60;virtio&#x60;, &#x60;usb&#x60;.
	 *
	 * @return rescueBus
	 */
	@javax.annotation.Nullable public String getRescueBus() {
		return rescueBus;
	}

	public void setRescueBus(@javax.annotation.Nullable String rescueBus) {
		this.rescueBus = rescueBus;
	}

	public ImageConfig rescueDevice(@javax.annotation.Nullable String rescueDevice) {
		this.rescueDevice = rescueDevice;
		return this;
	}

	/**
	 * Sets the device when the image is used as a rescue image. Possible values: &#x60;cdrom&#x60;,
	 * &#x60;disk&#x60;.
	 *
	 * @return rescueDevice
	 */
	@javax.annotation.Nullable public String getRescueDevice() {
		return rescueDevice;
	}

	public void setRescueDevice(@javax.annotation.Nullable String rescueDevice) {
		this.rescueDevice = rescueDevice;
	}

	public ImageConfig secureBoot(@javax.annotation.Nullable Boolean secureBoot) {
		this.secureBoot = secureBoot;
		return this;
	}

	/**
	 * Enables Secure Boot. The default for new images is disabled.
	 *
	 * @return secureBoot
	 */
	@javax.annotation.Nullable public Boolean getSecureBoot() {
		return secureBoot;
	}

	public void setSecureBoot(@javax.annotation.Nullable Boolean secureBoot) {
		this.secureBoot = secureBoot;
	}

	public ImageConfig uefi(@javax.annotation.Nullable Boolean uefi) {
		this.uefi = uefi;
		return this;
	}

	/**
	 * Configure UEFI boot. The default for new images is enabled.
	 *
	 * @return uefi
	 */
	@javax.annotation.Nullable public Boolean getUefi() {
		return uefi;
	}

	public void setUefi(@javax.annotation.Nullable Boolean uefi) {
		this.uefi = uefi;
	}

	public ImageConfig videoModel(@javax.annotation.Nullable String videoModel) {
		this.videoModel = videoModel;
		return this;
	}

	/**
	 * Sets Graphic device model. Possible values: &#x60;vga&#x60;, &#x60;cirrus&#x60;,
	 * &#x60;vmvga&#x60;, &#x60;qxl&#x60;, &#x60;virtio&#x60;, &#x60;none&#x60;.
	 *
	 * @return videoModel
	 */
	@javax.annotation.Nullable public String getVideoModel() {
		return videoModel;
	}

	public void setVideoModel(@javax.annotation.Nullable String videoModel) {
		this.videoModel = videoModel;
	}

	public ImageConfig virtioScsi(@javax.annotation.Nullable Boolean virtioScsi) {
		this.virtioScsi = virtioScsi;
		return this;
	}

	/**
	 * Enables the use of VirtIO SCSI to provide block device access. By default servers use VirtIO
	 * Block.
	 *
	 * @return virtioScsi
	 */
	@javax.annotation.Nullable public Boolean getVirtioScsi() {
		return virtioScsi;
	}

	public void setVirtioScsi(@javax.annotation.Nullable Boolean virtioScsi) {
		this.virtioScsi = virtioScsi;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ImageConfig imageConfig = (ImageConfig) o;
		return Objects.equals(this.architecture, imageConfig.architecture)
				&& Objects.equals(this.bootMenu, imageConfig.bootMenu)
				&& Objects.equals(this.cdromBus, imageConfig.cdromBus)
				&& Objects.equals(this.diskBus, imageConfig.diskBus)
				&& Objects.equals(this.nicModel, imageConfig.nicModel)
				&& Objects.equals(this.operatingSystem, imageConfig.operatingSystem)
				&& Objects.equals(this.operatingSystemDistro, imageConfig.operatingSystemDistro)
				&& Objects.equals(this.operatingSystemVersion, imageConfig.operatingSystemVersion)
				&& Objects.equals(this.rescueBus, imageConfig.rescueBus)
				&& Objects.equals(this.rescueDevice, imageConfig.rescueDevice)
				&& Objects.equals(this.secureBoot, imageConfig.secureBoot)
				&& Objects.equals(this.uefi, imageConfig.uefi)
				&& Objects.equals(this.videoModel, imageConfig.videoModel)
				&& Objects.equals(this.virtioScsi, imageConfig.virtioScsi);
	}

	private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
		return a == b
				|| (a != null
						&& b != null
						&& a.isPresent()
						&& b.isPresent()
						&& Objects.deepEquals(a.get(), b.get()));
	}

	@Override
	public int hashCode() {
		return Objects.hash(
				architecture,
				bootMenu,
				cdromBus,
				diskBus,
				nicModel,
				operatingSystem,
				operatingSystemDistro,
				operatingSystemVersion,
				rescueBus,
				rescueDevice,
				secureBoot,
				uefi,
				videoModel,
				virtioScsi);
	}

	private static <T> int hashCodeNullable(JsonNullable<T> a) {
		if (a == null) {
			return 1;
		}
		return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ImageConfig {\n");
		sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
		sb.append("    bootMenu: ").append(toIndentedString(bootMenu)).append("\n");
		sb.append("    cdromBus: ").append(toIndentedString(cdromBus)).append("\n");
		sb.append("    diskBus: ").append(toIndentedString(diskBus)).append("\n");
		sb.append("    nicModel: ").append(toIndentedString(nicModel)).append("\n");
		sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
		sb.append("    operatingSystemDistro: ")
				.append(toIndentedString(operatingSystemDistro))
				.append("\n");
		sb.append("    operatingSystemVersion: ")
				.append(toIndentedString(operatingSystemVersion))
				.append("\n");
		sb.append("    rescueBus: ").append(toIndentedString(rescueBus)).append("\n");
		sb.append("    rescueDevice: ").append(toIndentedString(rescueDevice)).append("\n");
		sb.append("    secureBoot: ").append(toIndentedString(secureBoot)).append("\n");
		sb.append("    uefi: ").append(toIndentedString(uefi)).append("\n");
		sb.append("    videoModel: ").append(toIndentedString(videoModel)).append("\n");
		sb.append("    virtioScsi: ").append(toIndentedString(virtioScsi)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"architecture",
								"bootMenu",
								"cdromBus",
								"diskBus",
								"nicModel",
								"operatingSystem",
								"operatingSystemDistro",
								"operatingSystemVersion",
								"rescueBus",
								"rescueDevice",
								"secureBoot",
								"uefi",
								"videoModel",
								"virtioScsi"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(0);
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to ImageConfig
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!ImageConfig.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in ImageConfig is not found in the empty JSON string",
								ImageConfig.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!ImageConfig.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `ImageConfig` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("architecture") != null && !jsonObj.get("architecture").isJsonNull())
				&& !jsonObj.get("architecture").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `architecture` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("architecture").toString()));
		}
		if ((jsonObj.get("cdromBus") != null && !jsonObj.get("cdromBus").isJsonNull())
				&& !jsonObj.get("cdromBus").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `cdromBus` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("cdromBus").toString()));
		}
		if ((jsonObj.get("diskBus") != null && !jsonObj.get("diskBus").isJsonNull())
				&& !jsonObj.get("diskBus").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `diskBus` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("diskBus").toString()));
		}
		if ((jsonObj.get("nicModel") != null && !jsonObj.get("nicModel").isJsonNull())
				&& !jsonObj.get("nicModel").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `nicModel` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("nicModel").toString()));
		}
		if ((jsonObj.get("operatingSystem") != null && !jsonObj.get("operatingSystem").isJsonNull())
				&& !jsonObj.get("operatingSystem").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `operatingSystem` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("operatingSystem").toString()));
		}
		if ((jsonObj.get("operatingSystemDistro") != null
						&& !jsonObj.get("operatingSystemDistro").isJsonNull())
				&& !jsonObj.get("operatingSystemDistro").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `operatingSystemDistro` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("operatingSystemDistro").toString()));
		}
		if ((jsonObj.get("operatingSystemVersion") != null
						&& !jsonObj.get("operatingSystemVersion").isJsonNull())
				&& !jsonObj.get("operatingSystemVersion").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `operatingSystemVersion` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("operatingSystemVersion").toString()));
		}
		if ((jsonObj.get("rescueBus") != null && !jsonObj.get("rescueBus").isJsonNull())
				&& !jsonObj.get("rescueBus").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `rescueBus` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("rescueBus").toString()));
		}
		if ((jsonObj.get("rescueDevice") != null && !jsonObj.get("rescueDevice").isJsonNull())
				&& !jsonObj.get("rescueDevice").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `rescueDevice` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("rescueDevice").toString()));
		}
		if ((jsonObj.get("videoModel") != null && !jsonObj.get("videoModel").isJsonNull())
				&& !jsonObj.get("videoModel").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `videoModel` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("videoModel").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!ImageConfig.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'ImageConfig' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<ImageConfig> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(ImageConfig.class));

			return (TypeAdapter<T>)
					new TypeAdapter<ImageConfig>() {
						@Override
						public void write(JsonWriter out, ImageConfig value) throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public ImageConfig read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of ImageConfig given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of ImageConfig
	 * @throws IOException if the JSON string is invalid with respect to ImageConfig
	 */
	public static ImageConfig fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, ImageConfig.class);
	}

	/**
	 * Convert an instance of ImageConfig to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
