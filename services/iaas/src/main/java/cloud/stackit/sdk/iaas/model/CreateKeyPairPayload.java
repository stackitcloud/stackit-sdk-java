/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Object that represents the public key of an SSH keypair and its name. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class CreateKeyPairPayload {
	public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

	@SerializedName(SERIALIZED_NAME_CREATED_AT)
	@javax.annotation.Nullable private OffsetDateTime createdAt;

	public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";

	@SerializedName(SERIALIZED_NAME_FINGERPRINT)
	@javax.annotation.Nullable private String fingerprint;

	public static final String SERIALIZED_NAME_LABELS = "labels";

	@SerializedName(SERIALIZED_NAME_LABELS)
	@javax.annotation.Nullable private Object labels;

	public static final String SERIALIZED_NAME_NAME = "name";

	@SerializedName(SERIALIZED_NAME_NAME)
	@javax.annotation.Nullable private String name;

	public static final String SERIALIZED_NAME_PUBLIC_KEY = "publicKey";

	@SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
	@javax.annotation.Nonnull
	private String publicKey;

	public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

	@SerializedName(SERIALIZED_NAME_UPDATED_AT)
	@javax.annotation.Nullable private OffsetDateTime updatedAt;

	public CreateKeyPairPayload() {}

	public CreateKeyPairPayload(
			OffsetDateTime createdAt, String fingerprint, OffsetDateTime updatedAt) {
		this();
		this.createdAt = createdAt;
		this.fingerprint = fingerprint;
		this.updatedAt = updatedAt;
	}

	/**
	 * Date-time when resource was created.
	 *
	 * @return createdAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getCreatedAt() {
		return createdAt;
	}

	/**
	 * Object that represents an SSH keypair MD5 fingerprint.
	 *
	 * @return fingerprint
	 */
	@javax.annotation.Nullable public String getFingerprint() {
		return fingerprint;
	}

	public CreateKeyPairPayload labels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
		return this;
	}

	/**
	 * Object that represents the labels of an object. Regex for keys:
	 * &#x60;^(?&#x3D;.{1,63}$)([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$&#x60;. Regex for values:
	 * &#x60;^(?&#x3D;.{0,63}$)(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])*$&#x60;. Providing a
	 * &#x60;null&#x60; value for a key will remove that key.
	 *
	 * @return labels
	 */
	@javax.annotation.Nullable public Object getLabels() {
		return labels;
	}

	public void setLabels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
	}

	public CreateKeyPairPayload name(@javax.annotation.Nullable String name) {
		this.name = name;
		return this;
	}

	/**
	 * The name of an SSH keypair. Allowed characters are letters [a-zA-Z], digits [0-9] and the
	 * following special characters: [@._-].
	 *
	 * @return name
	 */
	@javax.annotation.Nullable public String getName() {
		return name;
	}

	public void setName(@javax.annotation.Nullable String name) {
		this.name = name;
	}

	public CreateKeyPairPayload publicKey(@javax.annotation.Nonnull String publicKey) {
		this.publicKey = publicKey;
		return this;
	}

	/**
	 * Object that represents a public SSH key.
	 *
	 * @return publicKey
	 */
	@javax.annotation.Nonnull
	public String getPublicKey() {
		return publicKey;
	}

	public void setPublicKey(@javax.annotation.Nonnull String publicKey) {
		this.publicKey = publicKey;
	}

	/**
	 * Date-time when resource was last updated.
	 *
	 * @return updatedAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getUpdatedAt() {
		return updatedAt;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		CreateKeyPairPayload createKeyPairPayload = (CreateKeyPairPayload) o;
		return Objects.equals(this.createdAt, createKeyPairPayload.createdAt)
				&& Objects.equals(this.fingerprint, createKeyPairPayload.fingerprint)
				&& Objects.equals(this.labels, createKeyPairPayload.labels)
				&& Objects.equals(this.name, createKeyPairPayload.name)
				&& Objects.equals(this.publicKey, createKeyPairPayload.publicKey)
				&& Objects.equals(this.updatedAt, createKeyPairPayload.updatedAt);
	}

	@Override
	public int hashCode() {
		return Objects.hash(createdAt, fingerprint, labels, name, publicKey, updatedAt);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class CreateKeyPairPayload {\n");
		sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
		sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
		sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
		sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"createdAt",
								"fingerprint",
								"labels",
								"name",
								"publicKey",
								"updatedAt"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(Arrays.asList("publicKey"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to CreateKeyPairPayload
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!CreateKeyPairPayload.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in CreateKeyPairPayload is not found in the empty JSON string",
								CreateKeyPairPayload.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!CreateKeyPairPayload.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `CreateKeyPairPayload` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : CreateKeyPairPayload.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull())
				&& !jsonObj.get("fingerprint").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("fingerprint").toString()));
		}
		if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
				&& !jsonObj.get("name").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `name` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("name").toString()));
		}
		if (!jsonObj.get("publicKey").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `publicKey` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("publicKey").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!CreateKeyPairPayload.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'CreateKeyPairPayload' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<CreateKeyPairPayload> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(CreateKeyPairPayload.class));

			return (TypeAdapter<T>)
					new TypeAdapter<CreateKeyPairPayload>() {
						@Override
						public void write(JsonWriter out, CreateKeyPairPayload value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public CreateKeyPairPayload read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of CreateKeyPairPayload given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of CreateKeyPairPayload
	 * @throws IOException if the JSON string is invalid with respect to CreateKeyPairPayload
	 */
	public static CreateKeyPairPayload fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, CreateKeyPairPayload.class);
	}

	/**
	 * Convert an instance of CreateKeyPairPayload to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
