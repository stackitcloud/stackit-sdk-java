/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 2beta1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * Object that represents the request body for a regional network area IPv4 configuration update.
 */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class UpdateRegionalAreaIPv4 {
	public static final String SERIALIZED_NAME_DEFAULT_NAMESERVERS = "defaultNameservers";

	@SerializedName(SERIALIZED_NAME_DEFAULT_NAMESERVERS)
	@javax.annotation.Nullable private List<String> defaultNameservers = new ArrayList<>();

	public static final String SERIALIZED_NAME_DEFAULT_PREFIX_LEN = "defaultPrefixLen";

	@SerializedName(SERIALIZED_NAME_DEFAULT_PREFIX_LEN)
	@javax.annotation.Nullable private Long defaultPrefixLen;

	public static final String SERIALIZED_NAME_MAX_PREFIX_LEN = "maxPrefixLen";

	@SerializedName(SERIALIZED_NAME_MAX_PREFIX_LEN)
	@javax.annotation.Nullable private Long maxPrefixLen;

	public static final String SERIALIZED_NAME_MIN_PREFIX_LEN = "minPrefixLen";

	@SerializedName(SERIALIZED_NAME_MIN_PREFIX_LEN)
	@javax.annotation.Nullable private Long minPrefixLen;

	public UpdateRegionalAreaIPv4() {}

	public UpdateRegionalAreaIPv4 defaultNameservers(
			@javax.annotation.Nullable List<String> defaultNameservers) {
		this.defaultNameservers = defaultNameservers;
		return this;
	}

	public UpdateRegionalAreaIPv4 addDefaultNameserversItem(String defaultNameserversItem) {
		if (this.defaultNameservers == null) {
			this.defaultNameservers = new ArrayList<>();
		}
		this.defaultNameservers.add(defaultNameserversItem);
		return this;
	}

	/**
	 * Get defaultNameservers
	 *
	 * @return defaultNameservers
	 */
	@javax.annotation.Nullable public List<String> getDefaultNameservers() {
		return defaultNameservers;
	}

	public void setDefaultNameservers(@javax.annotation.Nullable List<String> defaultNameservers) {
		this.defaultNameservers = defaultNameservers;
	}

	public UpdateRegionalAreaIPv4 defaultPrefixLen(
			@javax.annotation.Nullable Long defaultPrefixLen) {
		this.defaultPrefixLen = defaultPrefixLen;
		return this;
	}

	/**
	 * The default prefix length for networks in the network area. minimum: 24 maximum: 29
	 *
	 * @return defaultPrefixLen
	 */
	@javax.annotation.Nullable public Long getDefaultPrefixLen() {
		return defaultPrefixLen;
	}

	public void setDefaultPrefixLen(@javax.annotation.Nullable Long defaultPrefixLen) {
		this.defaultPrefixLen = defaultPrefixLen;
	}

	public UpdateRegionalAreaIPv4 maxPrefixLen(@javax.annotation.Nullable Long maxPrefixLen) {
		this.maxPrefixLen = maxPrefixLen;
		return this;
	}

	/**
	 * The maximal prefix length for networks in the network area. minimum: 24 maximum: 29
	 *
	 * @return maxPrefixLen
	 */
	@javax.annotation.Nullable public Long getMaxPrefixLen() {
		return maxPrefixLen;
	}

	public void setMaxPrefixLen(@javax.annotation.Nullable Long maxPrefixLen) {
		this.maxPrefixLen = maxPrefixLen;
	}

	public UpdateRegionalAreaIPv4 minPrefixLen(@javax.annotation.Nullable Long minPrefixLen) {
		this.minPrefixLen = minPrefixLen;
		return this;
	}

	/**
	 * The minimal prefix length for networks in the network area. minimum: 8 maximum: 29
	 *
	 * @return minPrefixLen
	 */
	@javax.annotation.Nullable public Long getMinPrefixLen() {
		return minPrefixLen;
	}

	public void setMinPrefixLen(@javax.annotation.Nullable Long minPrefixLen) {
		this.minPrefixLen = minPrefixLen;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		UpdateRegionalAreaIPv4 updateRegionalAreaIPv4 = (UpdateRegionalAreaIPv4) o;
		return Objects.equals(this.defaultNameservers, updateRegionalAreaIPv4.defaultNameservers)
				&& Objects.equals(this.defaultPrefixLen, updateRegionalAreaIPv4.defaultPrefixLen)
				&& Objects.equals(this.maxPrefixLen, updateRegionalAreaIPv4.maxPrefixLen)
				&& Objects.equals(this.minPrefixLen, updateRegionalAreaIPv4.minPrefixLen);
	}

	@Override
	public int hashCode() {
		return Objects.hash(defaultNameservers, defaultPrefixLen, maxPrefixLen, minPrefixLen);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class UpdateRegionalAreaIPv4 {\n");
		sb.append("    defaultNameservers: ")
				.append(toIndentedString(defaultNameservers))
				.append("\n");
		sb.append("    defaultPrefixLen: ").append(toIndentedString(defaultPrefixLen)).append("\n");
		sb.append("    maxPrefixLen: ").append(toIndentedString(maxPrefixLen)).append("\n");
		sb.append("    minPrefixLen: ").append(toIndentedString(minPrefixLen)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"defaultNameservers",
								"defaultPrefixLen",
								"maxPrefixLen",
								"minPrefixLen"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(0);
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to UpdateRegionalAreaIPv4
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!UpdateRegionalAreaIPv4.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in UpdateRegionalAreaIPv4 is not found in the empty JSON string",
								UpdateRegionalAreaIPv4.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!UpdateRegionalAreaIPv4.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `UpdateRegionalAreaIPv4` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		// ensure the optional json data is an array if present
		if (jsonObj.get("defaultNameservers") != null
				&& !jsonObj.get("defaultNameservers").isJsonNull()
				&& !jsonObj.get("defaultNameservers").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `defaultNameservers` to be an array in the JSON string but got `%s`",
							jsonObj.get("defaultNameservers").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!UpdateRegionalAreaIPv4.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'UpdateRegionalAreaIPv4' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<UpdateRegionalAreaIPv4> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(UpdateRegionalAreaIPv4.class));

			return (TypeAdapter<T>)
					new TypeAdapter<UpdateRegionalAreaIPv4>() {
						@Override
						public void write(JsonWriter out, UpdateRegionalAreaIPv4 value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public UpdateRegionalAreaIPv4 read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of UpdateRegionalAreaIPv4 given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of UpdateRegionalAreaIPv4
	 * @throws IOException if the JSON string is invalid with respect to UpdateRegionalAreaIPv4
	 */
	public static UpdateRegionalAreaIPv4 fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, UpdateRegionalAreaIPv4.class);
	}

	/**
	 * Convert an instance of UpdateRegionalAreaIPv4 to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
