/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.api;

import cloud.stackit.sdk.core.config.CoreConfiguration;
import cloud.stackit.sdk.core.exception.ApiException;
import cloud.stackit.sdk.iaas.ApiCallback;
import cloud.stackit.sdk.iaas.ApiClient;
import cloud.stackit.sdk.iaas.ApiResponse;
import cloud.stackit.sdk.iaas.Pair;
import cloud.stackit.sdk.iaas.model.AddVolumeToServerPayload;
import cloud.stackit.sdk.iaas.model.AffinityGroup;
import cloud.stackit.sdk.iaas.model.AffinityGroupListResponse;
import cloud.stackit.sdk.iaas.model.AvailabilityZoneListResponse;
import cloud.stackit.sdk.iaas.model.Backup;
import cloud.stackit.sdk.iaas.model.BackupListResponse;
import cloud.stackit.sdk.iaas.model.CreateAffinityGroupPayload;
import cloud.stackit.sdk.iaas.model.CreateBackupPayload;
import cloud.stackit.sdk.iaas.model.CreateImagePayload;
import cloud.stackit.sdk.iaas.model.CreateKeyPairPayload;
import cloud.stackit.sdk.iaas.model.CreateNetworkAreaPayload;
import cloud.stackit.sdk.iaas.model.CreateNetworkAreaRangePayload;
import cloud.stackit.sdk.iaas.model.CreateNetworkAreaRoutePayload;
import cloud.stackit.sdk.iaas.model.CreateNetworkPayload;
import cloud.stackit.sdk.iaas.model.CreateNicPayload;
import cloud.stackit.sdk.iaas.model.CreatePublicIPPayload;
import cloud.stackit.sdk.iaas.model.CreateSecurityGroupPayload;
import cloud.stackit.sdk.iaas.model.CreateSecurityGroupRulePayload;
import cloud.stackit.sdk.iaas.model.CreateServerPayload;
import cloud.stackit.sdk.iaas.model.CreateSnapshotPayload;
import cloud.stackit.sdk.iaas.model.CreateVolumePayload;
import cloud.stackit.sdk.iaas.model.GetServerLog200Response;
import cloud.stackit.sdk.iaas.model.Image;
import cloud.stackit.sdk.iaas.model.ImageCreateResponse;
import cloud.stackit.sdk.iaas.model.ImageListResponse;
import cloud.stackit.sdk.iaas.model.ImageShare;
import cloud.stackit.sdk.iaas.model.ImageShareConsumer;
import cloud.stackit.sdk.iaas.model.KeyPairListResponse;
import cloud.stackit.sdk.iaas.model.Keypair;
import cloud.stackit.sdk.iaas.model.MachineType;
import cloud.stackit.sdk.iaas.model.MachineTypeListResponse;
import cloud.stackit.sdk.iaas.model.NIC;
import cloud.stackit.sdk.iaas.model.NICListResponse;
import cloud.stackit.sdk.iaas.model.Network;
import cloud.stackit.sdk.iaas.model.NetworkArea;
import cloud.stackit.sdk.iaas.model.NetworkAreaListResponse;
import cloud.stackit.sdk.iaas.model.NetworkListResponse;
import cloud.stackit.sdk.iaas.model.NetworkRange;
import cloud.stackit.sdk.iaas.model.NetworkRangeListResponse;
import cloud.stackit.sdk.iaas.model.PartialUpdateNetworkAreaPayload;
import cloud.stackit.sdk.iaas.model.PartialUpdateNetworkPayload;
import cloud.stackit.sdk.iaas.model.Project;
import cloud.stackit.sdk.iaas.model.ProjectListResponse;
import cloud.stackit.sdk.iaas.model.PublicIp;
import cloud.stackit.sdk.iaas.model.PublicIpListResponse;
import cloud.stackit.sdk.iaas.model.PublicNetworkListResponse;
import cloud.stackit.sdk.iaas.model.QuotaListResponse;
import cloud.stackit.sdk.iaas.model.Request;
import cloud.stackit.sdk.iaas.model.RescueServerPayload;
import cloud.stackit.sdk.iaas.model.ResizeServerPayload;
import cloud.stackit.sdk.iaas.model.ResizeVolumePayload;
import cloud.stackit.sdk.iaas.model.Route;
import cloud.stackit.sdk.iaas.model.RouteListResponse;
import cloud.stackit.sdk.iaas.model.SecurityGroup;
import cloud.stackit.sdk.iaas.model.SecurityGroupListResponse;
import cloud.stackit.sdk.iaas.model.SecurityGroupRule;
import cloud.stackit.sdk.iaas.model.SecurityGroupRuleListResponse;
import cloud.stackit.sdk.iaas.model.Server;
import cloud.stackit.sdk.iaas.model.ServerConsoleUrl;
import cloud.stackit.sdk.iaas.model.ServerListResponse;
import cloud.stackit.sdk.iaas.model.ServiceAccountMailListResponse;
import cloud.stackit.sdk.iaas.model.SetImageSharePayload;
import cloud.stackit.sdk.iaas.model.Snapshot;
import cloud.stackit.sdk.iaas.model.SnapshotListResponse;
import cloud.stackit.sdk.iaas.model.UpdateAttachedVolumePayload;
import cloud.stackit.sdk.iaas.model.UpdateBackupPayload;
import cloud.stackit.sdk.iaas.model.UpdateImagePayload;
import cloud.stackit.sdk.iaas.model.UpdateImageSharePayload;
import cloud.stackit.sdk.iaas.model.UpdateKeyPairPayload;
import cloud.stackit.sdk.iaas.model.UpdateNetworkAreaRoutePayload;
import cloud.stackit.sdk.iaas.model.UpdateNicPayload;
import cloud.stackit.sdk.iaas.model.UpdatePublicIPPayload;
import cloud.stackit.sdk.iaas.model.UpdateSecurityGroupPayload;
import cloud.stackit.sdk.iaas.model.UpdateServerPayload;
import cloud.stackit.sdk.iaas.model.UpdateSnapshotPayload;
import cloud.stackit.sdk.iaas.model.UpdateVolumePayload;
import cloud.stackit.sdk.iaas.model.Volume;
import cloud.stackit.sdk.iaas.model.VolumeAttachment;
import cloud.stackit.sdk.iaas.model.VolumeAttachmentListResponse;
import cloud.stackit.sdk.iaas.model.VolumeListResponse;
import cloud.stackit.sdk.iaas.model.VolumePerformanceClass;
import cloud.stackit.sdk.iaas.model.VolumePerformanceClassListResponse;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

// Package-private access to enforce service-specific API usage (DefaultApi => <ServiceName>Api)
class DefaultApi {
	private ApiClient localVarApiClient;
	private int localHostIndex;
	private String localCustomBaseUrl;

	public DefaultApi() throws IOException {
		this(new CoreConfiguration());
	}

	public DefaultApi(CoreConfiguration config) throws IOException {
		if (config.getCustomEndpoint() != null && !config.getCustomEndpoint().trim().isEmpty()) {
			localCustomBaseUrl = config.getCustomEndpoint();
		}
		this.localVarApiClient = new ApiClient(config);
	}

	public ApiClient getApiClient() {
		return localVarApiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.localVarApiClient = apiClient;
	}

	public int getHostIndex() {
		return localHostIndex;
	}

	public void setHostIndex(int hostIndex) {
		this.localHostIndex = hostIndex;
	}

	public String getCustomBaseUrl() {
		return localCustomBaseUrl;
	}

	public void setCustomBaseUrl(String customBaseUrl) {
		this.localCustomBaseUrl = customBaseUrl;
	}

	/**
	 * Build call for addNetworkToServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Create and attach network interface was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call addNetworkToServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID networkId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/networks/{networkId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()))
						.replace(
								"{" + "networkId" + "}",
								localVarApiClient.escapeString(networkId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call addNetworkToServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID networkId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling addNetworkToServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling addNetworkToServer(Async)");
		}

		// verify the required parameter 'networkId' is set
		if (networkId == null) {
			throw new ApiException(
					"Missing the required parameter 'networkId' when calling addNetworkToServer(Async)");
		}

		return addNetworkToServerCall(projectId, serverId, networkId, _callback);
	}

	/**
	 * Create and attach a network interface from the specified network. Create and attach a network
	 * interface from the specified network to the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Create and attach network interface was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void addNetworkToServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID networkId)
			throws ApiException {
		addNetworkToServerWithHttpInfo(projectId, serverId, networkId);
	}

	/**
	 * Create and attach a network interface from the specified network. Create and attach a network
	 * interface from the specified network to the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Create and attach network interface was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> addNetworkToServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID networkId)
			throws ApiException {
		okhttp3.Call localVarCall =
				addNetworkToServerValidateBeforeCall(projectId, serverId, networkId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Create and attach a network interface from the specified network. (asynchronously) Create and
	 * attach a network interface from the specified network to the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Create and attach network interface was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call addNetworkToServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID networkId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				addNetworkToServerValidateBeforeCall(projectId, serverId, networkId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for addNicToServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Network interface attachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call addNicToServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/nics/{nicId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()))
						.replace(
								"{" + "nicId" + "}",
								localVarApiClient.escapeString(nicId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PUT",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call addNicToServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling addNicToServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling addNicToServer(Async)");
		}

		// verify the required parameter 'nicId' is set
		if (nicId == null) {
			throw new ApiException(
					"Missing the required parameter 'nicId' when calling addNicToServer(Async)");
		}

		return addNicToServerCall(projectId, serverId, nicId, _callback);
	}

	/**
	 * Attach an existing network interface. Attach an existing network interface to a server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Network interface attachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void addNicToServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID nicId)
			throws ApiException {
		addNicToServerWithHttpInfo(projectId, serverId, nicId);
	}

	/**
	 * Attach an existing network interface. Attach an existing network interface to a server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Network interface attachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> addNicToServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID nicId)
			throws ApiException {
		okhttp3.Call localVarCall =
				addNicToServerValidateBeforeCall(projectId, serverId, nicId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Attach an existing network interface. (asynchronously) Attach an existing network interface
	 * to a server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Network interface attachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call addNicToServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				addNicToServerValidateBeforeCall(projectId, serverId, nicId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for addPublicIpToServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Attach Public IP to server was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call addPublicIpToServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID publicIpId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/public-ips/{publicIpId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()))
						.replace(
								"{" + "publicIpId" + "}",
								localVarApiClient.escapeString(publicIpId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PUT",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call addPublicIpToServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID publicIpId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling addPublicIpToServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling addPublicIpToServer(Async)");
		}

		// verify the required parameter 'publicIpId' is set
		if (publicIpId == null) {
			throw new ApiException(
					"Missing the required parameter 'publicIpId' when calling addPublicIpToServer(Async)");
		}

		return addPublicIpToServerCall(projectId, serverId, publicIpId, _callback);
	}

	/**
	 * Associate a public IP to the server. Associate a public IP to a server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Attach Public IP to server was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void addPublicIpToServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID publicIpId)
			throws ApiException {
		addPublicIpToServerWithHttpInfo(projectId, serverId, publicIpId);
	}

	/**
	 * Associate a public IP to the server. Associate a public IP to a server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Attach Public IP to server was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> addPublicIpToServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID publicIpId)
			throws ApiException {
		okhttp3.Call localVarCall =
				addPublicIpToServerValidateBeforeCall(projectId, serverId, publicIpId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Associate a public IP to the server. (asynchronously) Associate a public IP to a server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Attach Public IP to server was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call addPublicIpToServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID publicIpId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				addPublicIpToServerValidateBeforeCall(projectId, serverId, publicIpId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for addSecurityGroupToServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Security group attachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call addSecurityGroupToServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/security-groups/{securityGroupId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()))
						.replace(
								"{" + "securityGroupId" + "}",
								localVarApiClient.escapeString(securityGroupId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PUT",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call addSecurityGroupToServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling addSecurityGroupToServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling addSecurityGroupToServer(Async)");
		}

		// verify the required parameter 'securityGroupId' is set
		if (securityGroupId == null) {
			throw new ApiException(
					"Missing the required parameter 'securityGroupId' when calling addSecurityGroupToServer(Async)");
		}

		return addSecurityGroupToServerCall(projectId, serverId, securityGroupId, _callback);
	}

	/**
	 * Add a server to a security group. Add an existing server to an existing security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Security group attachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void addSecurityGroupToServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID securityGroupId)
			throws ApiException {
		addSecurityGroupToServerWithHttpInfo(projectId, serverId, securityGroupId);
	}

	/**
	 * Add a server to a security group. Add an existing server to an existing security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Security group attachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> addSecurityGroupToServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID securityGroupId)
			throws ApiException {
		okhttp3.Call localVarCall =
				addSecurityGroupToServerValidateBeforeCall(
						projectId, serverId, securityGroupId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Add a server to a security group. (asynchronously) Add an existing server to an existing
	 * security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Security group attachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call addSecurityGroupToServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				addSecurityGroupToServerValidateBeforeCall(
						projectId, serverId, securityGroupId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for addServiceAccountToServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param serviceAccountMail The e-mail address of a service account. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Service account attached to the server. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call addServiceAccountToServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull String serviceAccountMail,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/service-accounts/{serviceAccountMail}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()))
						.replace(
								"{" + "serviceAccountMail" + "}",
								localVarApiClient.escapeString(serviceAccountMail.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PUT",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call addServiceAccountToServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull String serviceAccountMail,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling addServiceAccountToServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling addServiceAccountToServer(Async)");
		}

		// verify the required parameter 'serviceAccountMail' is set
		if (serviceAccountMail == null) {
			throw new ApiException(
					"Missing the required parameter 'serviceAccountMail' when calling addServiceAccountToServer(Async)");
		}

		return addServiceAccountToServerCall(projectId, serverId, serviceAccountMail, _callback);
	}

	/**
	 * Attach service account to a server. Attach an additional service account to the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param serviceAccountMail The e-mail address of a service account. (required)
	 * @return ServiceAccountMailListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Service account attached to the server. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ServiceAccountMailListResponse addServiceAccountToServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull String serviceAccountMail)
			throws ApiException {
		ApiResponse<ServiceAccountMailListResponse> localVarResp =
				addServiceAccountToServerWithHttpInfo(projectId, serverId, serviceAccountMail);
		return localVarResp.getData();
	}

	/**
	 * Attach service account to a server. Attach an additional service account to the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param serviceAccountMail The e-mail address of a service account. (required)
	 * @return ApiResponse&lt;ServiceAccountMailListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Service account attached to the server. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<ServiceAccountMailListResponse> addServiceAccountToServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull String serviceAccountMail)
			throws ApiException {
		okhttp3.Call localVarCall =
				addServiceAccountToServerValidateBeforeCall(
						projectId, serverId, serviceAccountMail, null);
		Type localVarReturnType = new TypeToken<ServiceAccountMailListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Attach service account to a server. (asynchronously) Attach an additional service account to
	 * the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param serviceAccountMail The e-mail address of a service account. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Service account attached to the server. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call addServiceAccountToServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull String serviceAccountMail,
			final ApiCallback<ServiceAccountMailListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				addServiceAccountToServerValidateBeforeCall(
						projectId, serverId, serviceAccountMail, _callback);
		Type localVarReturnType = new TypeToken<ServiceAccountMailListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for addVolumeToServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param addVolumeToServerPayload Request a volume attachment creation. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Volume attachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call addVolumeToServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nullable AddVolumeToServerPayload addVolumeToServerPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = addVolumeToServerPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/volume-attachments/{volumeId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()))
						.replace(
								"{" + "volumeId" + "}",
								localVarApiClient.escapeString(volumeId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PUT",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call addVolumeToServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nullable AddVolumeToServerPayload addVolumeToServerPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling addVolumeToServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling addVolumeToServer(Async)");
		}

		// verify the required parameter 'volumeId' is set
		if (volumeId == null) {
			throw new ApiException(
					"Missing the required parameter 'volumeId' when calling addVolumeToServer(Async)");
		}

		return addVolumeToServerCall(
				projectId, serverId, volumeId, addVolumeToServerPayload, _callback);
	}

	/**
	 * Attach a volume to a server. Attach an existing volume to an existing server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param addVolumeToServerPayload Request a volume attachment creation. (optional)
	 * @return VolumeAttachment
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Volume attachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public VolumeAttachment addVolumeToServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nullable AddVolumeToServerPayload addVolumeToServerPayload)
			throws ApiException {
		ApiResponse<VolumeAttachment> localVarResp =
				addVolumeToServerWithHttpInfo(
						projectId, serverId, volumeId, addVolumeToServerPayload);
		return localVarResp.getData();
	}

	/**
	 * Attach a volume to a server. Attach an existing volume to an existing server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param addVolumeToServerPayload Request a volume attachment creation. (optional)
	 * @return ApiResponse&lt;VolumeAttachment&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Volume attachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<VolumeAttachment> addVolumeToServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nullable AddVolumeToServerPayload addVolumeToServerPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				addVolumeToServerValidateBeforeCall(
						projectId, serverId, volumeId, addVolumeToServerPayload, null);
		Type localVarReturnType = new TypeToken<VolumeAttachment>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Attach a volume to a server. (asynchronously) Attach an existing volume to an existing
	 * server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param addVolumeToServerPayload Request a volume attachment creation. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Volume attachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call addVolumeToServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nullable AddVolumeToServerPayload addVolumeToServerPayload,
			final ApiCallback<VolumeAttachment> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				addVolumeToServerValidateBeforeCall(
						projectId, serverId, volumeId, addVolumeToServerPayload, _callback);
		Type localVarReturnType = new TypeToken<VolumeAttachment>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createAffinityGroup
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createAffinityGroupPayload Request a affinity group creation. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Affinity group was created successfully. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createAffinityGroupCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateAffinityGroupPayload createAffinityGroupPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createAffinityGroupPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/affinity-groups"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createAffinityGroupValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateAffinityGroupPayload createAffinityGroupPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling createAffinityGroup(Async)");
		}

		// verify the required parameter 'createAffinityGroupPayload' is set
		if (createAffinityGroupPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createAffinityGroupPayload' when calling createAffinityGroup(Async)");
		}

		return createAffinityGroupCall(projectId, createAffinityGroupPayload, _callback);
	}

	/**
	 * Create a new affinity group in a project. Create a new server affinity group in the given
	 * project ID.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createAffinityGroupPayload Request a affinity group creation. (required)
	 * @return AffinityGroup
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Affinity group was created successfully. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public AffinityGroup createAffinityGroup(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateAffinityGroupPayload createAffinityGroupPayload)
			throws ApiException {
		ApiResponse<AffinityGroup> localVarResp =
				createAffinityGroupWithHttpInfo(projectId, createAffinityGroupPayload);
		return localVarResp.getData();
	}

	/**
	 * Create a new affinity group in a project. Create a new server affinity group in the given
	 * project ID.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createAffinityGroupPayload Request a affinity group creation. (required)
	 * @return ApiResponse&lt;AffinityGroup&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Affinity group was created successfully. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<AffinityGroup> createAffinityGroupWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateAffinityGroupPayload createAffinityGroupPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				createAffinityGroupValidateBeforeCall(projectId, createAffinityGroupPayload, null);
		Type localVarReturnType = new TypeToken<AffinityGroup>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Create a new affinity group in a project. (asynchronously) Create a new server affinity group
	 * in the given project ID.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createAffinityGroupPayload Request a affinity group creation. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Affinity group was created successfully. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createAffinityGroupAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateAffinityGroupPayload createAffinityGroupPayload,
			final ApiCallback<AffinityGroup> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createAffinityGroupValidateBeforeCall(
						projectId, createAffinityGroupPayload, _callback);
		Type localVarReturnType = new TypeToken<AffinityGroup>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createBackup
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createBackupPayload Request a backup creation. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for Backup accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createBackupCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateBackupPayload createBackupPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createBackupPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/backups"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createBackupValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateBackupPayload createBackupPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling createBackup(Async)");
		}

		// verify the required parameter 'createBackupPayload' is set
		if (createBackupPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createBackupPayload' when calling createBackup(Async)");
		}

		return createBackupCall(projectId, createBackupPayload, _callback);
	}

	/**
	 * Create new Backup. Create a new Backup in a project. If a snapshot ID is provided create the
	 * backup from the snapshot.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createBackupPayload Request a backup creation. (required)
	 * @return Backup
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for Backup accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Backup createBackup(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateBackupPayload createBackupPayload)
			throws ApiException {
		ApiResponse<Backup> localVarResp = createBackupWithHttpInfo(projectId, createBackupPayload);
		return localVarResp.getData();
	}

	/**
	 * Create new Backup. Create a new Backup in a project. If a snapshot ID is provided create the
	 * backup from the snapshot.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createBackupPayload Request a backup creation. (required)
	 * @return ApiResponse&lt;Backup&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for Backup accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Backup> createBackupWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateBackupPayload createBackupPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				createBackupValidateBeforeCall(projectId, createBackupPayload, null);
		Type localVarReturnType = new TypeToken<Backup>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Create new Backup. (asynchronously) Create a new Backup in a project. If a snapshot ID is
	 * provided create the backup from the snapshot.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createBackupPayload Request a backup creation. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for Backup accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createBackupAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateBackupPayload createBackupPayload,
			final ApiCallback<Backup> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createBackupValidateBeforeCall(projectId, createBackupPayload, _callback);
		Type localVarReturnType = new TypeToken<Backup>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createImage
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createImagePayload Request an image creation. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for an Image has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 429 </td><td> Too Many Requests. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createImageCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateImagePayload createImagePayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createImagePayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/images"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createImageValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateImagePayload createImagePayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling createImage(Async)");
		}

		// verify the required parameter 'createImagePayload' is set
		if (createImagePayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createImagePayload' when calling createImage(Async)");
		}

		return createImageCall(projectId, createImagePayload, _callback);
	}

	/**
	 * Create new Image. Create a new Image in a project. This call, if successful, returns a
	 * pre-signed URL for the customer to upload the image.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createImagePayload Request an image creation. (required)
	 * @return ImageCreateResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for an Image has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 429 </td><td> Too Many Requests. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ImageCreateResponse createImage(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateImagePayload createImagePayload)
			throws ApiException {
		ApiResponse<ImageCreateResponse> localVarResp =
				createImageWithHttpInfo(projectId, createImagePayload);
		return localVarResp.getData();
	}

	/**
	 * Create new Image. Create a new Image in a project. This call, if successful, returns a
	 * pre-signed URL for the customer to upload the image.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createImagePayload Request an image creation. (required)
	 * @return ApiResponse&lt;ImageCreateResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for an Image has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 429 </td><td> Too Many Requests. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<ImageCreateResponse> createImageWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateImagePayload createImagePayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				createImageValidateBeforeCall(projectId, createImagePayload, null);
		Type localVarReturnType = new TypeToken<ImageCreateResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Create new Image. (asynchronously) Create a new Image in a project. This call, if successful,
	 * returns a pre-signed URL for the customer to upload the image.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createImagePayload Request an image creation. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for an Image has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 429 </td><td> Too Many Requests. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createImageAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateImagePayload createImagePayload,
			final ApiCallback<ImageCreateResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createImageValidateBeforeCall(projectId, createImagePayload, _callback);
		Type localVarReturnType = new TypeToken<ImageCreateResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createKeyPair
	 *
	 * @param createKeyPairPayload Request a public key import. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Import of the public key was successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createKeyPairCall(
			@javax.annotation.Nonnull CreateKeyPairPayload createKeyPairPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createKeyPairPayload;

		// create path and map variables
		String localVarPath = "/v1/keypairs";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createKeyPairValidateBeforeCall(
			@javax.annotation.Nonnull CreateKeyPairPayload createKeyPairPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'createKeyPairPayload' is set
		if (createKeyPairPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createKeyPairPayload' when calling createKeyPair(Async)");
		}

		return createKeyPairCall(createKeyPairPayload, _callback);
	}

	/**
	 * Import a public key. Import a new public key for the requesting user based on provided public
	 * key material. The creation will fail if an SSH keypair with the same name already exists. If
	 * a name is not provided it is autogenerated form the ssh-pubkey comment section. If that is
	 * also not present it will be the the MD5 fingerprint of the key. For autogenerated names
	 * invalid characters will be removed. Supported keypair types are ecdsa, ed25519 and rsa.
	 *
	 * @param createKeyPairPayload Request a public key import. (required)
	 * @return Keypair
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Import of the public key was successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Keypair createKeyPair(
			@javax.annotation.Nonnull CreateKeyPairPayload createKeyPairPayload)
			throws ApiException {
		ApiResponse<Keypair> localVarResp = createKeyPairWithHttpInfo(createKeyPairPayload);
		return localVarResp.getData();
	}

	/**
	 * Import a public key. Import a new public key for the requesting user based on provided public
	 * key material. The creation will fail if an SSH keypair with the same name already exists. If
	 * a name is not provided it is autogenerated form the ssh-pubkey comment section. If that is
	 * also not present it will be the the MD5 fingerprint of the key. For autogenerated names
	 * invalid characters will be removed. Supported keypair types are ecdsa, ed25519 and rsa.
	 *
	 * @param createKeyPairPayload Request a public key import. (required)
	 * @return ApiResponse&lt;Keypair&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Import of the public key was successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Keypair> createKeyPairWithHttpInfo(
			@javax.annotation.Nonnull CreateKeyPairPayload createKeyPairPayload)
			throws ApiException {
		okhttp3.Call localVarCall = createKeyPairValidateBeforeCall(createKeyPairPayload, null);
		Type localVarReturnType = new TypeToken<Keypair>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Import a public key. (asynchronously) Import a new public key for the requesting user based
	 * on provided public key material. The creation will fail if an SSH keypair with the same name
	 * already exists. If a name is not provided it is autogenerated form the ssh-pubkey comment
	 * section. If that is also not present it will be the the MD5 fingerprint of the key. For
	 * autogenerated names invalid characters will be removed. Supported keypair types are ecdsa,
	 * ed25519 and rsa.
	 *
	 * @param createKeyPairPayload Request a public key import. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Import of the public key was successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createKeyPairAsync(
			@javax.annotation.Nonnull CreateKeyPairPayload createKeyPairPayload,
			final ApiCallback<Keypair> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createKeyPairValidateBeforeCall(createKeyPairPayload, _callback);
		Type localVarReturnType = new TypeToken<Keypair>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createNetwork
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createNetworkPayload Request a network creation. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Network create has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createNetworkCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateNetworkPayload createNetworkPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createNetworkPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/networks"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createNetworkValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateNetworkPayload createNetworkPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling createNetwork(Async)");
		}

		// verify the required parameter 'createNetworkPayload' is set
		if (createNetworkPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createNetworkPayload' when calling createNetwork(Async)");
		}

		return createNetworkCall(projectId, createNetworkPayload, _callback);
	}

	/**
	 * Create new network. Create a new network in a project. &#x60;nameservers&#x60; will be filled
	 * from &#x60;defaultNameservers&#x60; of the respective area if not specified. If the project
	 * has &#x60;internetAccess&#x60; enabled and this is the first network in the project this
	 * might incur cost.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createNetworkPayload Request a network creation. (required)
	 * @return Network
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Network create has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Network createNetwork(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateNetworkPayload createNetworkPayload)
			throws ApiException {
		ApiResponse<Network> localVarResp =
				createNetworkWithHttpInfo(projectId, createNetworkPayload);
		return localVarResp.getData();
	}

	/**
	 * Create new network. Create a new network in a project. &#x60;nameservers&#x60; will be filled
	 * from &#x60;defaultNameservers&#x60; of the respective area if not specified. If the project
	 * has &#x60;internetAccess&#x60; enabled and this is the first network in the project this
	 * might incur cost.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createNetworkPayload Request a network creation. (required)
	 * @return ApiResponse&lt;Network&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Network create has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Network> createNetworkWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateNetworkPayload createNetworkPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				createNetworkValidateBeforeCall(projectId, createNetworkPayload, null);
		Type localVarReturnType = new TypeToken<Network>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Create new network. (asynchronously) Create a new network in a project.
	 * &#x60;nameservers&#x60; will be filled from &#x60;defaultNameservers&#x60; of the respective
	 * area if not specified. If the project has &#x60;internetAccess&#x60; enabled and this is the
	 * first network in the project this might incur cost.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createNetworkPayload Request a network creation. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Network create has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createNetworkAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateNetworkPayload createNetworkPayload,
			final ApiCallback<Network> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createNetworkValidateBeforeCall(projectId, createNetworkPayload, _callback);
		Type localVarReturnType = new TypeToken<Network>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createNetworkArea
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param createNetworkAreaPayload Request an area creation. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Area has been successfully created. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createNetworkAreaCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull CreateNetworkAreaPayload createNetworkAreaPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createNetworkAreaPayload;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createNetworkAreaValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull CreateNetworkAreaPayload createNetworkAreaPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling createNetworkArea(Async)");
		}

		// verify the required parameter 'createNetworkAreaPayload' is set
		if (createNetworkAreaPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createNetworkAreaPayload' when calling createNetworkArea(Async)");
		}

		return createNetworkAreaCall(organizationId, createNetworkAreaPayload, _callback);
	}

	/**
	 * Create new network area in an organization. Create a new network area in an organization.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param createNetworkAreaPayload Request an area creation. (required)
	 * @return NetworkArea
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Area has been successfully created. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NetworkArea createNetworkArea(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull CreateNetworkAreaPayload createNetworkAreaPayload)
			throws ApiException {
		ApiResponse<NetworkArea> localVarResp =
				createNetworkAreaWithHttpInfo(organizationId, createNetworkAreaPayload);
		return localVarResp.getData();
	}

	/**
	 * Create new network area in an organization. Create a new network area in an organization.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param createNetworkAreaPayload Request an area creation. (required)
	 * @return ApiResponse&lt;NetworkArea&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Area has been successfully created. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NetworkArea> createNetworkAreaWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull CreateNetworkAreaPayload createNetworkAreaPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				createNetworkAreaValidateBeforeCall(organizationId, createNetworkAreaPayload, null);
		Type localVarReturnType = new TypeToken<NetworkArea>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Create new network area in an organization. (asynchronously) Create a new network area in an
	 * organization.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param createNetworkAreaPayload Request an area creation. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Area has been successfully created. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createNetworkAreaAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull CreateNetworkAreaPayload createNetworkAreaPayload,
			final ApiCallback<NetworkArea> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createNetworkAreaValidateBeforeCall(
						organizationId, createNetworkAreaPayload, _callback);
		Type localVarReturnType = new TypeToken<NetworkArea>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createNetworkAreaRange
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param createNetworkAreaRangePayload Request an addition of network ranges to an area.
	 *     (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Adding network ranges was successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createNetworkAreaRangeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull CreateNetworkAreaRangePayload createNetworkAreaRangePayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createNetworkAreaRangePayload;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas/{areaId}/network-ranges"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()))
						.replace(
								"{" + "areaId" + "}",
								localVarApiClient.escapeString(areaId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createNetworkAreaRangeValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull CreateNetworkAreaRangePayload createNetworkAreaRangePayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling createNetworkAreaRange(Async)");
		}

		// verify the required parameter 'areaId' is set
		if (areaId == null) {
			throw new ApiException(
					"Missing the required parameter 'areaId' when calling createNetworkAreaRange(Async)");
		}

		// verify the required parameter 'createNetworkAreaRangePayload' is set
		if (createNetworkAreaRangePayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createNetworkAreaRangePayload' when calling createNetworkAreaRange(Async)");
		}

		return createNetworkAreaRangeCall(
				organizationId, areaId, createNetworkAreaRangePayload, _callback);
	}

	/**
	 * Create new network range in a network area. Create a new network range in an existing network
	 * area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param createNetworkAreaRangePayload Request an addition of network ranges to an area.
	 *     (required)
	 * @return NetworkRangeListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Adding network ranges was successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NetworkRangeListResponse createNetworkAreaRange(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull CreateNetworkAreaRangePayload createNetworkAreaRangePayload)
			throws ApiException {
		ApiResponse<NetworkRangeListResponse> localVarResp =
				createNetworkAreaRangeWithHttpInfo(
						organizationId, areaId, createNetworkAreaRangePayload);
		return localVarResp.getData();
	}

	/**
	 * Create new network range in a network area. Create a new network range in an existing network
	 * area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param createNetworkAreaRangePayload Request an addition of network ranges to an area.
	 *     (required)
	 * @return ApiResponse&lt;NetworkRangeListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Adding network ranges was successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NetworkRangeListResponse> createNetworkAreaRangeWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull CreateNetworkAreaRangePayload createNetworkAreaRangePayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				createNetworkAreaRangeValidateBeforeCall(
						organizationId, areaId, createNetworkAreaRangePayload, null);
		Type localVarReturnType = new TypeToken<NetworkRangeListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Create new network range in a network area. (asynchronously) Create a new network range in an
	 * existing network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param createNetworkAreaRangePayload Request an addition of network ranges to an area.
	 *     (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Adding network ranges was successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createNetworkAreaRangeAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull CreateNetworkAreaRangePayload createNetworkAreaRangePayload,
			final ApiCallback<NetworkRangeListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createNetworkAreaRangeValidateBeforeCall(
						organizationId, areaId, createNetworkAreaRangePayload, _callback);
		Type localVarReturnType = new TypeToken<NetworkRangeListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createNetworkAreaRoute
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param createNetworkAreaRoutePayload Request an addition of routes to an area. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Create request for network routes has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createNetworkAreaRouteCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull CreateNetworkAreaRoutePayload createNetworkAreaRoutePayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createNetworkAreaRoutePayload;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas/{areaId}/routes"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()))
						.replace(
								"{" + "areaId" + "}",
								localVarApiClient.escapeString(areaId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createNetworkAreaRouteValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull CreateNetworkAreaRoutePayload createNetworkAreaRoutePayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling createNetworkAreaRoute(Async)");
		}

		// verify the required parameter 'areaId' is set
		if (areaId == null) {
			throw new ApiException(
					"Missing the required parameter 'areaId' when calling createNetworkAreaRoute(Async)");
		}

		// verify the required parameter 'createNetworkAreaRoutePayload' is set
		if (createNetworkAreaRoutePayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createNetworkAreaRoutePayload' when calling createNetworkAreaRoute(Async)");
		}

		return createNetworkAreaRouteCall(
				organizationId, areaId, createNetworkAreaRoutePayload, _callback);
	}

	/**
	 * Create new network routes. Create one or several new network routes in a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param createNetworkAreaRoutePayload Request an addition of routes to an area. (required)
	 * @return RouteListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Create request for network routes has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public RouteListResponse createNetworkAreaRoute(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull CreateNetworkAreaRoutePayload createNetworkAreaRoutePayload)
			throws ApiException {
		ApiResponse<RouteListResponse> localVarResp =
				createNetworkAreaRouteWithHttpInfo(
						organizationId, areaId, createNetworkAreaRoutePayload);
		return localVarResp.getData();
	}

	/**
	 * Create new network routes. Create one or several new network routes in a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param createNetworkAreaRoutePayload Request an addition of routes to an area. (required)
	 * @return ApiResponse&lt;RouteListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Create request for network routes has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<RouteListResponse> createNetworkAreaRouteWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull CreateNetworkAreaRoutePayload createNetworkAreaRoutePayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				createNetworkAreaRouteValidateBeforeCall(
						organizationId, areaId, createNetworkAreaRoutePayload, null);
		Type localVarReturnType = new TypeToken<RouteListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Create new network routes. (asynchronously) Create one or several new network routes in a
	 * network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param createNetworkAreaRoutePayload Request an addition of routes to an area. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Create request for network routes has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createNetworkAreaRouteAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull CreateNetworkAreaRoutePayload createNetworkAreaRoutePayload,
			final ApiCallback<RouteListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createNetworkAreaRouteValidateBeforeCall(
						organizationId, areaId, createNetworkAreaRoutePayload, _callback);
		Type localVarReturnType = new TypeToken<RouteListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createNic
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param createNicPayload Request a network interface creation. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Network interface was created successfully. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 429 </td><td> Too Many Requests. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createNicCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull CreateNicPayload createNicPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createNicPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/networks/{networkId}/nics"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "networkId" + "}",
								localVarApiClient.escapeString(networkId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createNicValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull CreateNicPayload createNicPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling createNic(Async)");
		}

		// verify the required parameter 'networkId' is set
		if (networkId == null) {
			throw new ApiException(
					"Missing the required parameter 'networkId' when calling createNic(Async)");
		}

		// verify the required parameter 'createNicPayload' is set
		if (createNicPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createNicPayload' when calling createNic(Async)");
		}

		return createNicCall(projectId, networkId, createNicPayload, _callback);
	}

	/**
	 * Create new network interface. Create a new network interface in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param createNicPayload Request a network interface creation. (required)
	 * @return NIC
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Network interface was created successfully. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 429 </td><td> Too Many Requests. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NIC createNic(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull CreateNicPayload createNicPayload)
			throws ApiException {
		ApiResponse<NIC> localVarResp =
				createNicWithHttpInfo(projectId, networkId, createNicPayload);
		return localVarResp.getData();
	}

	/**
	 * Create new network interface. Create a new network interface in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param createNicPayload Request a network interface creation. (required)
	 * @return ApiResponse&lt;NIC&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Network interface was created successfully. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 429 </td><td> Too Many Requests. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NIC> createNicWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull CreateNicPayload createNicPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				createNicValidateBeforeCall(projectId, networkId, createNicPayload, null);
		Type localVarReturnType = new TypeToken<NIC>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Create new network interface. (asynchronously) Create a new network interface in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param createNicPayload Request a network interface creation. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Network interface was created successfully. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 429 </td><td> Too Many Requests. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createNicAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull CreateNicPayload createNicPayload,
			final ApiCallback<NIC> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createNicValidateBeforeCall(projectId, networkId, createNicPayload, _callback);
		Type localVarReturnType = new TypeToken<NIC>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createPublicIP
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createPublicIPPayload Request a public IP creation. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> The public IP has been created. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 429 </td><td> Too Many Requests. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createPublicIPCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreatePublicIPPayload createPublicIPPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createPublicIPPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/public-ips"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createPublicIPValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreatePublicIPPayload createPublicIPPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling createPublicIP(Async)");
		}

		// verify the required parameter 'createPublicIPPayload' is set
		if (createPublicIPPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createPublicIPPayload' when calling createPublicIP(Async)");
		}

		return createPublicIPCall(projectId, createPublicIPPayload, _callback);
	}

	/**
	 * Create new public IP. Create a new public IP in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createPublicIPPayload Request a public IP creation. (required)
	 * @return PublicIp
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> The public IP has been created. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 429 </td><td> Too Many Requests. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public PublicIp createPublicIP(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreatePublicIPPayload createPublicIPPayload)
			throws ApiException {
		ApiResponse<PublicIp> localVarResp =
				createPublicIPWithHttpInfo(projectId, createPublicIPPayload);
		return localVarResp.getData();
	}

	/**
	 * Create new public IP. Create a new public IP in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createPublicIPPayload Request a public IP creation. (required)
	 * @return ApiResponse&lt;PublicIp&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> The public IP has been created. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 429 </td><td> Too Many Requests. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<PublicIp> createPublicIPWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreatePublicIPPayload createPublicIPPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				createPublicIPValidateBeforeCall(projectId, createPublicIPPayload, null);
		Type localVarReturnType = new TypeToken<PublicIp>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Create new public IP. (asynchronously) Create a new public IP in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createPublicIPPayload Request a public IP creation. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> The public IP has been created. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 429 </td><td> Too Many Requests. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createPublicIPAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreatePublicIPPayload createPublicIPPayload,
			final ApiCallback<PublicIp> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createPublicIPValidateBeforeCall(projectId, createPublicIPPayload, _callback);
		Type localVarReturnType = new TypeToken<PublicIp>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createSecurityGroup
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createSecurityGroupPayload Request a security group creation. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Security group create has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createSecurityGroupCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateSecurityGroupPayload createSecurityGroupPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createSecurityGroupPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/security-groups"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createSecurityGroupValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateSecurityGroupPayload createSecurityGroupPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling createSecurityGroup(Async)");
		}

		// verify the required parameter 'createSecurityGroupPayload' is set
		if (createSecurityGroupPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createSecurityGroupPayload' when calling createSecurityGroup(Async)");
		}

		return createSecurityGroupCall(projectId, createSecurityGroupPayload, _callback);
	}

	/**
	 * Create new security group. Create a new security group in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createSecurityGroupPayload Request a security group creation. (required)
	 * @return SecurityGroup
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Security group create has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public SecurityGroup createSecurityGroup(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateSecurityGroupPayload createSecurityGroupPayload)
			throws ApiException {
		ApiResponse<SecurityGroup> localVarResp =
				createSecurityGroupWithHttpInfo(projectId, createSecurityGroupPayload);
		return localVarResp.getData();
	}

	/**
	 * Create new security group. Create a new security group in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createSecurityGroupPayload Request a security group creation. (required)
	 * @return ApiResponse&lt;SecurityGroup&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Security group create has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<SecurityGroup> createSecurityGroupWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateSecurityGroupPayload createSecurityGroupPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				createSecurityGroupValidateBeforeCall(projectId, createSecurityGroupPayload, null);
		Type localVarReturnType = new TypeToken<SecurityGroup>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Create new security group. (asynchronously) Create a new security group in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createSecurityGroupPayload Request a security group creation. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Security group create has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createSecurityGroupAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateSecurityGroupPayload createSecurityGroupPayload,
			final ApiCallback<SecurityGroup> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createSecurityGroupValidateBeforeCall(
						projectId, createSecurityGroupPayload, _callback);
		Type localVarReturnType = new TypeToken<SecurityGroup>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createSecurityGroupRule
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param createSecurityGroupRulePayload Request for a security group rule creation. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Security group rule create has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createSecurityGroupRuleCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull CreateSecurityGroupRulePayload createSecurityGroupRulePayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createSecurityGroupRulePayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/security-groups/{securityGroupId}/rules"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "securityGroupId" + "}",
								localVarApiClient.escapeString(securityGroupId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createSecurityGroupRuleValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull CreateSecurityGroupRulePayload createSecurityGroupRulePayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling createSecurityGroupRule(Async)");
		}

		// verify the required parameter 'securityGroupId' is set
		if (securityGroupId == null) {
			throw new ApiException(
					"Missing the required parameter 'securityGroupId' when calling createSecurityGroupRule(Async)");
		}

		// verify the required parameter 'createSecurityGroupRulePayload' is set
		if (createSecurityGroupRulePayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createSecurityGroupRulePayload' when calling createSecurityGroupRule(Async)");
		}

		return createSecurityGroupRuleCall(
				projectId, securityGroupId, createSecurityGroupRulePayload, _callback);
	}

	/**
	 * Create new security group rule. Create a new security group rule in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param createSecurityGroupRulePayload Request for a security group rule creation. (required)
	 * @return SecurityGroupRule
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Security group rule create has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public SecurityGroupRule createSecurityGroupRule(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull CreateSecurityGroupRulePayload createSecurityGroupRulePayload)
			throws ApiException {
		ApiResponse<SecurityGroupRule> localVarResp =
				createSecurityGroupRuleWithHttpInfo(
						projectId, securityGroupId, createSecurityGroupRulePayload);
		return localVarResp.getData();
	}

	/**
	 * Create new security group rule. Create a new security group rule in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param createSecurityGroupRulePayload Request for a security group rule creation. (required)
	 * @return ApiResponse&lt;SecurityGroupRule&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Security group rule create has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<SecurityGroupRule> createSecurityGroupRuleWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull CreateSecurityGroupRulePayload createSecurityGroupRulePayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				createSecurityGroupRuleValidateBeforeCall(
						projectId, securityGroupId, createSecurityGroupRulePayload, null);
		Type localVarReturnType = new TypeToken<SecurityGroupRule>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Create new security group rule. (asynchronously) Create a new security group rule in a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param createSecurityGroupRulePayload Request for a security group rule creation. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Security group rule create has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createSecurityGroupRuleAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull CreateSecurityGroupRulePayload createSecurityGroupRulePayload,
			final ApiCallback<SecurityGroupRule> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createSecurityGroupRuleValidateBeforeCall(
						projectId, securityGroupId, createSecurityGroupRulePayload, _callback);
		Type localVarReturnType = new TypeToken<SecurityGroupRule>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createServerPayload Request a server creation. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for server accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateServerPayload createServerPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createServerPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateServerPayload createServerPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling createServer(Async)");
		}

		// verify the required parameter 'createServerPayload' is set
		if (createServerPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createServerPayload' when calling createServer(Async)");
		}

		return createServerCall(projectId, createServerPayload, _callback);
	}

	/**
	 * Create new server. Create a new server in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createServerPayload Request a server creation. (required)
	 * @return Server
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for server accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Server createServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateServerPayload createServerPayload)
			throws ApiException {
		ApiResponse<Server> localVarResp = createServerWithHttpInfo(projectId, createServerPayload);
		return localVarResp.getData();
	}

	/**
	 * Create new server. Create a new server in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createServerPayload Request a server creation. (required)
	 * @return ApiResponse&lt;Server&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for server accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Server> createServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateServerPayload createServerPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				createServerValidateBeforeCall(projectId, createServerPayload, null);
		Type localVarReturnType = new TypeToken<Server>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Create new server. (asynchronously) Create a new server in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createServerPayload Request a server creation. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for server accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateServerPayload createServerPayload,
			final ApiCallback<Server> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createServerValidateBeforeCall(projectId, createServerPayload, _callback);
		Type localVarReturnType = new TypeToken<Server>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createSnapshot
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createSnapshotPayload Request a snapshot creation. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for Snapshot accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createSnapshotCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateSnapshotPayload createSnapshotPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createSnapshotPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/snapshots"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createSnapshotValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateSnapshotPayload createSnapshotPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling createSnapshot(Async)");
		}

		// verify the required parameter 'createSnapshotPayload' is set
		if (createSnapshotPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createSnapshotPayload' when calling createSnapshot(Async)");
		}

		return createSnapshotCall(projectId, createSnapshotPayload, _callback);
	}

	/**
	 * Create new Snapshot. Create a new Snapshot from a Volume in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createSnapshotPayload Request a snapshot creation. (required)
	 * @return Snapshot
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for Snapshot accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Snapshot createSnapshot(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateSnapshotPayload createSnapshotPayload)
			throws ApiException {
		ApiResponse<Snapshot> localVarResp =
				createSnapshotWithHttpInfo(projectId, createSnapshotPayload);
		return localVarResp.getData();
	}

	/**
	 * Create new Snapshot. Create a new Snapshot from a Volume in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createSnapshotPayload Request a snapshot creation. (required)
	 * @return ApiResponse&lt;Snapshot&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for Snapshot accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Snapshot> createSnapshotWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateSnapshotPayload createSnapshotPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				createSnapshotValidateBeforeCall(projectId, createSnapshotPayload, null);
		Type localVarReturnType = new TypeToken<Snapshot>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Create new Snapshot. (asynchronously) Create a new Snapshot from a Volume in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createSnapshotPayload Request a snapshot creation. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for Snapshot accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createSnapshotAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateSnapshotPayload createSnapshotPayload,
			final ApiCallback<Snapshot> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createSnapshotValidateBeforeCall(projectId, createSnapshotPayload, _callback);
		Type localVarReturnType = new TypeToken<Snapshot>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createVolume
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createVolumePayload Request a volume creation. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for volume accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createVolumeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateVolumePayload createVolumePayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = createVolumePayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/volumes"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createVolumeValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateVolumePayload createVolumePayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling createVolume(Async)");
		}

		// verify the required parameter 'createVolumePayload' is set
		if (createVolumePayload == null) {
			throw new ApiException(
					"Missing the required parameter 'createVolumePayload' when calling createVolume(Async)");
		}

		return createVolumeCall(projectId, createVolumePayload, _callback);
	}

	/**
	 * Create new volume. Create a new volume in a project. If a volume source is not provided, an
	 * empty volume will be created. The size property is required if no source or an image source
	 * is provided.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createVolumePayload Request a volume creation. (required)
	 * @return Volume
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for volume accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Volume createVolume(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateVolumePayload createVolumePayload)
			throws ApiException {
		ApiResponse<Volume> localVarResp = createVolumeWithHttpInfo(projectId, createVolumePayload);
		return localVarResp.getData();
	}

	/**
	 * Create new volume. Create a new volume in a project. If a volume source is not provided, an
	 * empty volume will be created. The size property is required if no source or an image source
	 * is provided.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createVolumePayload Request a volume creation. (required)
	 * @return ApiResponse&lt;Volume&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for volume accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Volume> createVolumeWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateVolumePayload createVolumePayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				createVolumeValidateBeforeCall(projectId, createVolumePayload, null);
		Type localVarReturnType = new TypeToken<Volume>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Create new volume. (asynchronously) Create a new volume in a project. If a volume source is
	 * not provided, an empty volume will be created. The size property is required if no source or
	 * an image source is provided.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param createVolumePayload Request a volume creation. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 201 </td><td> Create request for volume accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call createVolumeAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull CreateVolumePayload createVolumePayload,
			final ApiCallback<Volume> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				createVolumeValidateBeforeCall(projectId, createVolumePayload, _callback);
		Type localVarReturnType = new TypeToken<Volume>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deallocateServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server deallocation request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deallocateServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/deallocate"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deallocateServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling deallocateServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling deallocateServer(Async)");
		}

		return deallocateServerCall(projectId, serverId, _callback);
	}

	/**
	 * Deallocate an existing server. Deallocate an existing server. The server will be removed from
	 * the hypervisor so only the volume will be billed.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server deallocation request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deallocateServer(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		deallocateServerWithHttpInfo(projectId, serverId);
	}

	/**
	 * Deallocate an existing server. Deallocate an existing server. The server will be removed from
	 * the hypervisor so only the volume will be billed.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server deallocation request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deallocateServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		okhttp3.Call localVarCall = deallocateServerValidateBeforeCall(projectId, serverId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Deallocate an existing server. (asynchronously) Deallocate an existing server. The server
	 * will be removed from the hypervisor so only the volume will be billed.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server deallocation request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deallocateServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				deallocateServerValidateBeforeCall(projectId, serverId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteAffinityGroup
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param affinityGroupId The identifier (ID) of a STACKIT Affinity Group. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for an server group was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteAffinityGroupCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID affinityGroupId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/affinity-groups/{affinityGroupId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "affinityGroupId" + "}",
								localVarApiClient.escapeString(affinityGroupId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteAffinityGroupValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID affinityGroupId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling deleteAffinityGroup(Async)");
		}

		// verify the required parameter 'affinityGroupId' is set
		if (affinityGroupId == null) {
			throw new ApiException(
					"Missing the required parameter 'affinityGroupId' when calling deleteAffinityGroup(Async)");
		}

		return deleteAffinityGroupCall(projectId, affinityGroupId, _callback);
	}

	/**
	 * Delete a affinity group in a project. Delete a affinity group in the given project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param affinityGroupId The identifier (ID) of a STACKIT Affinity Group. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for an server group was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteAffinityGroup(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID affinityGroupId)
			throws ApiException {
		deleteAffinityGroupWithHttpInfo(projectId, affinityGroupId);
	}

	/**
	 * Delete a affinity group in a project. Delete a affinity group in the given project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param affinityGroupId The identifier (ID) of a STACKIT Affinity Group. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for an server group was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteAffinityGroupWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID affinityGroupId)
			throws ApiException {
		okhttp3.Call localVarCall =
				deleteAffinityGroupValidateBeforeCall(projectId, affinityGroupId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete a affinity group in a project. (asynchronously) Delete a affinity group in the given
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param affinityGroupId The identifier (ID) of a STACKIT Affinity Group. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for an server group was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteAffinityGroupAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID affinityGroupId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				deleteAffinityGroupValidateBeforeCall(projectId, affinityGroupId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteBackup
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @param force Force action. (optional, default to false)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Backup delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteBackupCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			@javax.annotation.Nullable Boolean force,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/backups/{backupId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "backupId" + "}",
								localVarApiClient.escapeString(backupId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (force != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteBackupValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			@javax.annotation.Nullable Boolean force,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling deleteBackup(Async)");
		}

		// verify the required parameter 'backupId' is set
		if (backupId == null) {
			throw new ApiException(
					"Missing the required parameter 'backupId' when calling deleteBackup(Async)");
		}

		return deleteBackupCall(projectId, backupId, force, _callback);
	}

	/**
	 * Delete a backup. Delete a backup that is part of the project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @param force Force action. (optional, default to false)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Backup delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteBackup(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			@javax.annotation.Nullable Boolean force)
			throws ApiException {
		deleteBackupWithHttpInfo(projectId, backupId, force);
	}

	/**
	 * Delete a backup. Delete a backup that is part of the project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @param force Force action. (optional, default to false)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Backup delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteBackupWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			@javax.annotation.Nullable Boolean force)
			throws ApiException {
		okhttp3.Call localVarCall =
				deleteBackupValidateBeforeCall(projectId, backupId, force, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete a backup. (asynchronously) Delete a backup that is part of the project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @param force Force action. (optional, default to false)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Backup delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteBackupAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			@javax.annotation.Nullable Boolean force,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				deleteBackupValidateBeforeCall(projectId, backupId, force, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteImage
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Image delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteImageCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/images/{imageId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "imageId" + "}",
								localVarApiClient.escapeString(imageId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteImageValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling deleteImage(Async)");
		}

		// verify the required parameter 'imageId' is set
		if (imageId == null) {
			throw new ApiException(
					"Missing the required parameter 'imageId' when calling deleteImage(Async)");
		}

		return deleteImageCall(projectId, imageId, _callback);
	}

	/**
	 * Delete an Image. Delete an image that is part of the project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Image delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteImage(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID imageId)
			throws ApiException {
		deleteImageWithHttpInfo(projectId, imageId);
	}

	/**
	 * Delete an Image. Delete an image that is part of the project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Image delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteImageWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID imageId)
			throws ApiException {
		okhttp3.Call localVarCall = deleteImageValidateBeforeCall(projectId, imageId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete an Image. (asynchronously) Delete an image that is part of the project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Image delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteImageAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = deleteImageValidateBeforeCall(projectId, imageId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteImageShare
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Image share removed. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteImageShareCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/images/{imageId}/share"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "imageId" + "}",
								localVarApiClient.escapeString(imageId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteImageShareValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling deleteImageShare(Async)");
		}

		// verify the required parameter 'imageId' is set
		if (imageId == null) {
			throw new ApiException(
					"Missing the required parameter 'imageId' when calling deleteImageShare(Async)");
		}

		return deleteImageShareCall(projectId, imageId, _callback);
	}

	/**
	 * Remove image share. Remove the image share. New scope will be local.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Image share removed. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteImageShare(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID imageId)
			throws ApiException {
		deleteImageShareWithHttpInfo(projectId, imageId);
	}

	/**
	 * Remove image share. Remove the image share. New scope will be local.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Image share removed. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteImageShareWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID imageId)
			throws ApiException {
		okhttp3.Call localVarCall = deleteImageShareValidateBeforeCall(projectId, imageId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Remove image share. (asynchronously) Remove the image share. New scope will be local.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Image share removed. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteImageShareAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				deleteImageShareValidateBeforeCall(projectId, imageId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteImageShareConsumer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param consumerProjectId The identifier (ID) of a STACKIT Project that consumes an image
	 *     share. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Image share consumer removed. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteImageShareConsumerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UUID consumerProjectId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/images/{imageId}/share/{consumerProjectId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "imageId" + "}",
								localVarApiClient.escapeString(imageId.toString()))
						.replace(
								"{" + "consumerProjectId" + "}",
								localVarApiClient.escapeString(consumerProjectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteImageShareConsumerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UUID consumerProjectId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling deleteImageShareConsumer(Async)");
		}

		// verify the required parameter 'imageId' is set
		if (imageId == null) {
			throw new ApiException(
					"Missing the required parameter 'imageId' when calling deleteImageShareConsumer(Async)");
		}

		// verify the required parameter 'consumerProjectId' is set
		if (consumerProjectId == null) {
			throw new ApiException(
					"Missing the required parameter 'consumerProjectId' when calling deleteImageShareConsumer(Async)");
		}

		return deleteImageShareConsumerCall(projectId, imageId, consumerProjectId, _callback);
	}

	/**
	 * Remove an image share consumer. Remove consumer from a shared image.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param consumerProjectId The identifier (ID) of a STACKIT Project that consumes an image
	 *     share. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Image share consumer removed. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteImageShareConsumer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UUID consumerProjectId)
			throws ApiException {
		deleteImageShareConsumerWithHttpInfo(projectId, imageId, consumerProjectId);
	}

	/**
	 * Remove an image share consumer. Remove consumer from a shared image.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param consumerProjectId The identifier (ID) of a STACKIT Project that consumes an image
	 *     share. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Image share consumer removed. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteImageShareConsumerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UUID consumerProjectId)
			throws ApiException {
		okhttp3.Call localVarCall =
				deleteImageShareConsumerValidateBeforeCall(
						projectId, imageId, consumerProjectId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Remove an image share consumer. (asynchronously) Remove consumer from a shared image.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param consumerProjectId The identifier (ID) of a STACKIT Project that consumes an image
	 *     share. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Image share consumer removed. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteImageShareConsumerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UUID consumerProjectId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				deleteImageShareConsumerValidateBeforeCall(
						projectId, imageId, consumerProjectId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteKeyPair
	 *
	 * @param keypairName The name of an SSH keypair. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for an SSH keypair was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteKeyPairCall(
			@javax.annotation.Nonnull String keypairName, final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/keypairs/{keypairName}"
						.replace(
								"{" + "keypairName" + "}",
								localVarApiClient.escapeString(keypairName.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteKeyPairValidateBeforeCall(
			@javax.annotation.Nonnull String keypairName, final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'keypairName' is set
		if (keypairName == null) {
			throw new ApiException(
					"Missing the required parameter 'keypairName' when calling deleteKeyPair(Async)");
		}

		return deleteKeyPairCall(keypairName, _callback);
	}

	/**
	 * Delete an SSH keypair. Delete an SSH keypair from a user.
	 *
	 * @param keypairName The name of an SSH keypair. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for an SSH keypair was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteKeyPair(@javax.annotation.Nonnull String keypairName) throws ApiException {
		deleteKeyPairWithHttpInfo(keypairName);
	}

	/**
	 * Delete an SSH keypair. Delete an SSH keypair from a user.
	 *
	 * @param keypairName The name of an SSH keypair. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for an SSH keypair was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteKeyPairWithHttpInfo(@javax.annotation.Nonnull String keypairName)
			throws ApiException {
		okhttp3.Call localVarCall = deleteKeyPairValidateBeforeCall(keypairName, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete an SSH keypair. (asynchronously) Delete an SSH keypair from a user.
	 *
	 * @param keypairName The name of an SSH keypair. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for an SSH keypair was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteKeyPairAsync(
			@javax.annotation.Nonnull String keypairName, final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = deleteKeyPairValidateBeforeCall(keypairName, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteNetwork
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for network has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteNetworkCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/networks/{networkId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "networkId" + "}",
								localVarApiClient.escapeString(networkId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteNetworkValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling deleteNetwork(Async)");
		}

		// verify the required parameter 'networkId' is set
		if (networkId == null) {
			throw new ApiException(
					"Missing the required parameter 'networkId' when calling deleteNetwork(Async)");
		}

		return deleteNetworkCall(projectId, networkId, _callback);
	}

	/**
	 * Delete network. Delete a network. If the network is still in use, the deletion will fail.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for network has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteNetwork(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID networkId)
			throws ApiException {
		deleteNetworkWithHttpInfo(projectId, networkId);
	}

	/**
	 * Delete network. Delete a network. If the network is still in use, the deletion will fail.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for network has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteNetworkWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID networkId)
			throws ApiException {
		okhttp3.Call localVarCall = deleteNetworkValidateBeforeCall(projectId, networkId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete network. (asynchronously) Delete a network. If the network is still in use, the
	 * deletion will fail.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for network has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteNetworkAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				deleteNetworkValidateBeforeCall(projectId, networkId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteNetworkArea
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for area has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteNetworkAreaCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas/{areaId}"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()))
						.replace(
								"{" + "areaId" + "}",
								localVarApiClient.escapeString(areaId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteNetworkAreaValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling deleteNetworkArea(Async)");
		}

		// verify the required parameter 'areaId' is set
		if (areaId == null) {
			throw new ApiException(
					"Missing the required parameter 'areaId' when calling deleteNetworkArea(Async)");
		}

		return deleteNetworkAreaCall(organizationId, areaId, _callback);
	}

	/**
	 * Delete a network area. Delete an existing network area in an organization. This is only
	 * possible if no projects are using the area anymore.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for area has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteNetworkArea(
			@javax.annotation.Nonnull UUID organizationId, @javax.annotation.Nonnull UUID areaId)
			throws ApiException {
		deleteNetworkAreaWithHttpInfo(organizationId, areaId);
	}

	/**
	 * Delete a network area. Delete an existing network area in an organization. This is only
	 * possible if no projects are using the area anymore.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for area has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteNetworkAreaWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId, @javax.annotation.Nonnull UUID areaId)
			throws ApiException {
		okhttp3.Call localVarCall =
				deleteNetworkAreaValidateBeforeCall(organizationId, areaId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete a network area. (asynchronously) Delete an existing network area in an organization.
	 * This is only possible if no projects are using the area anymore.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for area has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteNetworkAreaAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				deleteNetworkAreaValidateBeforeCall(organizationId, areaId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteNetworkAreaRange
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param networkRangeId The identifier (ID) of a STACKIT Network Range. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for network range has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteNetworkAreaRangeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID networkRangeId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas/{areaId}/network-ranges/{networkRangeId}"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()))
						.replace(
								"{" + "areaId" + "}",
								localVarApiClient.escapeString(areaId.toString()))
						.replace(
								"{" + "networkRangeId" + "}",
								localVarApiClient.escapeString(networkRangeId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteNetworkAreaRangeValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID networkRangeId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling deleteNetworkAreaRange(Async)");
		}

		// verify the required parameter 'areaId' is set
		if (areaId == null) {
			throw new ApiException(
					"Missing the required parameter 'areaId' when calling deleteNetworkAreaRange(Async)");
		}

		// verify the required parameter 'networkRangeId' is set
		if (networkRangeId == null) {
			throw new ApiException(
					"Missing the required parameter 'networkRangeId' when calling deleteNetworkAreaRange(Async)");
		}

		return deleteNetworkAreaRangeCall(organizationId, areaId, networkRangeId, _callback);
	}

	/**
	 * Delete a network range. Delete a network range of a network area. The deletion will fail if
	 * the network range is still used.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param networkRangeId The identifier (ID) of a STACKIT Network Range. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for network range has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteNetworkAreaRange(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID networkRangeId)
			throws ApiException {
		deleteNetworkAreaRangeWithHttpInfo(organizationId, areaId, networkRangeId);
	}

	/**
	 * Delete a network range. Delete a network range of a network area. The deletion will fail if
	 * the network range is still used.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param networkRangeId The identifier (ID) of a STACKIT Network Range. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for network range has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteNetworkAreaRangeWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID networkRangeId)
			throws ApiException {
		okhttp3.Call localVarCall =
				deleteNetworkAreaRangeValidateBeforeCall(
						organizationId, areaId, networkRangeId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete a network range. (asynchronously) Delete a network range of a network area. The
	 * deletion will fail if the network range is still used.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param networkRangeId The identifier (ID) of a STACKIT Network Range. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for network range has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteNetworkAreaRangeAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID networkRangeId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				deleteNetworkAreaRangeValidateBeforeCall(
						organizationId, areaId, networkRangeId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteNetworkAreaRoute
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param routeId The identifier (ID) of a STACKIT Route. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for network route has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteNetworkAreaRouteCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas/{areaId}/routes/{routeId}"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()))
						.replace(
								"{" + "areaId" + "}",
								localVarApiClient.escapeString(areaId.toString()))
						.replace(
								"{" + "routeId" + "}",
								localVarApiClient.escapeString(routeId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteNetworkAreaRouteValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling deleteNetworkAreaRoute(Async)");
		}

		// verify the required parameter 'areaId' is set
		if (areaId == null) {
			throw new ApiException(
					"Missing the required parameter 'areaId' when calling deleteNetworkAreaRoute(Async)");
		}

		// verify the required parameter 'routeId' is set
		if (routeId == null) {
			throw new ApiException(
					"Missing the required parameter 'routeId' when calling deleteNetworkAreaRoute(Async)");
		}

		return deleteNetworkAreaRouteCall(organizationId, areaId, routeId, _callback);
	}

	/**
	 * Delete a network route. Delete a network route of a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param routeId The identifier (ID) of a STACKIT Route. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for network route has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteNetworkAreaRoute(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId)
			throws ApiException {
		deleteNetworkAreaRouteWithHttpInfo(organizationId, areaId, routeId);
	}

	/**
	 * Delete a network route. Delete a network route of a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param routeId The identifier (ID) of a STACKIT Route. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for network route has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteNetworkAreaRouteWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId)
			throws ApiException {
		okhttp3.Call localVarCall =
				deleteNetworkAreaRouteValidateBeforeCall(organizationId, areaId, routeId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete a network route. (asynchronously) Delete a network route of a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param routeId The identifier (ID) of a STACKIT Route. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Delete request for network route has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteNetworkAreaRouteAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				deleteNetworkAreaRouteValidateBeforeCall(
						organizationId, areaId, routeId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteNic
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Network interface delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteNicCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/networks/{networkId}/nics/{nicId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "networkId" + "}",
								localVarApiClient.escapeString(networkId.toString()))
						.replace(
								"{" + "nicId" + "}",
								localVarApiClient.escapeString(nicId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteNicValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling deleteNic(Async)");
		}

		// verify the required parameter 'networkId' is set
		if (networkId == null) {
			throw new ApiException(
					"Missing the required parameter 'networkId' when calling deleteNic(Async)");
		}

		// verify the required parameter 'nicId' is set
		if (nicId == null) {
			throw new ApiException(
					"Missing the required parameter 'nicId' when calling deleteNic(Async)");
		}

		return deleteNicCall(projectId, networkId, nicId, _callback);
	}

	/**
	 * Delete a network interface. Delete a network interface that is part of the project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Network interface delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteNic(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId)
			throws ApiException {
		deleteNicWithHttpInfo(projectId, networkId, nicId);
	}

	/**
	 * Delete a network interface. Delete a network interface that is part of the project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Network interface delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteNicWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId)
			throws ApiException {
		okhttp3.Call localVarCall = deleteNicValidateBeforeCall(projectId, networkId, nicId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete a network interface. (asynchronously) Delete a network interface that is part of the
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Network interface delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteNicAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				deleteNicValidateBeforeCall(projectId, networkId, nicId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deletePublicIP
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> The public IP has been deleted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deletePublicIPCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID publicIpId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/public-ips/{publicIpId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "publicIpId" + "}",
								localVarApiClient.escapeString(publicIpId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deletePublicIPValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID publicIpId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling deletePublicIP(Async)");
		}

		// verify the required parameter 'publicIpId' is set
		if (publicIpId == null) {
			throw new ApiException(
					"Missing the required parameter 'publicIpId' when calling deletePublicIP(Async)");
		}

		return deletePublicIPCall(projectId, publicIpId, _callback);
	}

	/**
	 * Delete a public IP. Delete a public IP that is part of the project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> The public IP has been deleted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deletePublicIP(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID publicIpId)
			throws ApiException {
		deletePublicIPWithHttpInfo(projectId, publicIpId);
	}

	/**
	 * Delete a public IP. Delete a public IP that is part of the project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> The public IP has been deleted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deletePublicIPWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID publicIpId)
			throws ApiException {
		okhttp3.Call localVarCall = deletePublicIPValidateBeforeCall(projectId, publicIpId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete a public IP. (asynchronously) Delete a public IP that is part of the project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> The public IP has been deleted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deletePublicIPAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID publicIpId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				deletePublicIPValidateBeforeCall(projectId, publicIpId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteSecurityGroup
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for security group has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteSecurityGroupCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/security-groups/{securityGroupId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "securityGroupId" + "}",
								localVarApiClient.escapeString(securityGroupId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteSecurityGroupValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling deleteSecurityGroup(Async)");
		}

		// verify the required parameter 'securityGroupId' is set
		if (securityGroupId == null) {
			throw new ApiException(
					"Missing the required parameter 'securityGroupId' when calling deleteSecurityGroup(Async)");
		}

		return deleteSecurityGroupCall(projectId, securityGroupId, _callback);
	}

	/**
	 * Delete security group. Delete a security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for security group has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteSecurityGroup(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId)
			throws ApiException {
		deleteSecurityGroupWithHttpInfo(projectId, securityGroupId);
	}

	/**
	 * Delete security group. Delete a security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for security group has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteSecurityGroupWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId)
			throws ApiException {
		okhttp3.Call localVarCall =
				deleteSecurityGroupValidateBeforeCall(projectId, securityGroupId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete security group. (asynchronously) Delete a security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for security group has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteSecurityGroupAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				deleteSecurityGroupValidateBeforeCall(projectId, securityGroupId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteSecurityGroupRule
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param securityGroupRuleId The identifier (ID) of a STACKIT Security Group Rule. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for security group rule has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteSecurityGroupRuleCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UUID securityGroupRuleId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/security-groups/{securityGroupId}/rules/{securityGroupRuleId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "securityGroupId" + "}",
								localVarApiClient.escapeString(securityGroupId.toString()))
						.replace(
								"{" + "securityGroupRuleId" + "}",
								localVarApiClient.escapeString(securityGroupRuleId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteSecurityGroupRuleValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UUID securityGroupRuleId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling deleteSecurityGroupRule(Async)");
		}

		// verify the required parameter 'securityGroupId' is set
		if (securityGroupId == null) {
			throw new ApiException(
					"Missing the required parameter 'securityGroupId' when calling deleteSecurityGroupRule(Async)");
		}

		// verify the required parameter 'securityGroupRuleId' is set
		if (securityGroupRuleId == null) {
			throw new ApiException(
					"Missing the required parameter 'securityGroupRuleId' when calling deleteSecurityGroupRule(Async)");
		}

		return deleteSecurityGroupRuleCall(
				projectId, securityGroupId, securityGroupRuleId, _callback);
	}

	/**
	 * Delete security group rule. Delete a security group rule.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param securityGroupRuleId The identifier (ID) of a STACKIT Security Group Rule. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for security group rule has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteSecurityGroupRule(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UUID securityGroupRuleId)
			throws ApiException {
		deleteSecurityGroupRuleWithHttpInfo(projectId, securityGroupId, securityGroupRuleId);
	}

	/**
	 * Delete security group rule. Delete a security group rule.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param securityGroupRuleId The identifier (ID) of a STACKIT Security Group Rule. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for security group rule has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteSecurityGroupRuleWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UUID securityGroupRuleId)
			throws ApiException {
		okhttp3.Call localVarCall =
				deleteSecurityGroupRuleValidateBeforeCall(
						projectId, securityGroupId, securityGroupRuleId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete security group rule. (asynchronously) Delete a security group rule.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param securityGroupRuleId The identifier (ID) of a STACKIT Security Group Rule. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for security group rule has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteSecurityGroupRuleAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UUID securityGroupRuleId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				deleteSecurityGroupRuleValidateBeforeCall(
						projectId, securityGroupId, securityGroupRuleId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for server accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling deleteServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling deleteServer(Async)");
		}

		return deleteServerCall(projectId, serverId, _callback);
	}

	/**
	 * Delete a server. Delete a server. Volumes won&#39;t be deleted.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for server accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteServer(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		deleteServerWithHttpInfo(projectId, serverId);
	}

	/**
	 * Delete a server. Delete a server. Volumes won&#39;t be deleted.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for server accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		okhttp3.Call localVarCall = deleteServerValidateBeforeCall(projectId, serverId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete a server. (asynchronously) Delete a server. Volumes won&#39;t be deleted.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Delete request for server accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = deleteServerValidateBeforeCall(projectId, serverId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteSnapshot
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param snapshotId The identifier (ID) of a STACKIT Snapshot. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Snapshot delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteSnapshotCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID snapshotId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/snapshots/{snapshotId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "snapshotId" + "}",
								localVarApiClient.escapeString(snapshotId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteSnapshotValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID snapshotId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling deleteSnapshot(Async)");
		}

		// verify the required parameter 'snapshotId' is set
		if (snapshotId == null) {
			throw new ApiException(
					"Missing the required parameter 'snapshotId' when calling deleteSnapshot(Async)");
		}

		return deleteSnapshotCall(projectId, snapshotId, _callback);
	}

	/**
	 * Delete a snapshot. Delete a snapshot that is part of the project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param snapshotId The identifier (ID) of a STACKIT Snapshot. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Snapshot delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteSnapshot(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID snapshotId)
			throws ApiException {
		deleteSnapshotWithHttpInfo(projectId, snapshotId);
	}

	/**
	 * Delete a snapshot. Delete a snapshot that is part of the project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param snapshotId The identifier (ID) of a STACKIT Snapshot. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Snapshot delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteSnapshotWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID snapshotId)
			throws ApiException {
		okhttp3.Call localVarCall = deleteSnapshotValidateBeforeCall(projectId, snapshotId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete a snapshot. (asynchronously) Delete a snapshot that is part of the project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param snapshotId The identifier (ID) of a STACKIT Snapshot. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Snapshot delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteSnapshotAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID snapshotId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				deleteSnapshotValidateBeforeCall(projectId, snapshotId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteVolume
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Volume delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteVolumeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/volumes/{volumeId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "volumeId" + "}",
								localVarApiClient.escapeString(volumeId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteVolumeValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling deleteVolume(Async)");
		}

		// verify the required parameter 'volumeId' is set
		if (volumeId == null) {
			throw new ApiException(
					"Missing the required parameter 'volumeId' when calling deleteVolume(Async)");
		}

		return deleteVolumeCall(projectId, volumeId, _callback);
	}

	/**
	 * Delete a volume. Delete a volume inside a project. The deletion will fail if the volume is
	 * still in use.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Volume delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void deleteVolume(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID volumeId)
			throws ApiException {
		deleteVolumeWithHttpInfo(projectId, volumeId);
	}

	/**
	 * Delete a volume. Delete a volume inside a project. The deletion will fail if the volume is
	 * still in use.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Volume delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteVolumeWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID volumeId)
			throws ApiException {
		okhttp3.Call localVarCall = deleteVolumeValidateBeforeCall(projectId, volumeId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Delete a volume. (asynchronously) Delete a volume inside a project. The deletion will fail if
	 * the volume is still in use.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Volume delete request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call deleteVolumeAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = deleteVolumeValidateBeforeCall(projectId, volumeId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getAffinityGroup
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param affinityGroupId The identifier (ID) of a STACKIT Affinity Group. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show affinity group details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getAffinityGroupCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID affinityGroupId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/affinity-groups/{affinityGroupId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "affinityGroupId" + "}",
								localVarApiClient.escapeString(affinityGroupId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getAffinityGroupValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID affinityGroupId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getAffinityGroup(Async)");
		}

		// verify the required parameter 'affinityGroupId' is set
		if (affinityGroupId == null) {
			throw new ApiException(
					"Missing the required parameter 'affinityGroupId' when calling getAffinityGroup(Async)");
		}

		return getAffinityGroupCall(projectId, affinityGroupId, _callback);
	}

	/**
	 * Get the affinity group. Get the affinity group created in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param affinityGroupId The identifier (ID) of a STACKIT Affinity Group. (required)
	 * @return AffinityGroup
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show affinity group details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public AffinityGroup getAffinityGroup(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID affinityGroupId)
			throws ApiException {
		ApiResponse<AffinityGroup> localVarResp =
				getAffinityGroupWithHttpInfo(projectId, affinityGroupId);
		return localVarResp.getData();
	}

	/**
	 * Get the affinity group. Get the affinity group created in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param affinityGroupId The identifier (ID) of a STACKIT Affinity Group. (required)
	 * @return ApiResponse&lt;AffinityGroup&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show affinity group details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<AffinityGroup> getAffinityGroupWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID affinityGroupId)
			throws ApiException {
		okhttp3.Call localVarCall =
				getAffinityGroupValidateBeforeCall(projectId, affinityGroupId, null);
		Type localVarReturnType = new TypeToken<AffinityGroup>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get the affinity group. (asynchronously) Get the affinity group created in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param affinityGroupId The identifier (ID) of a STACKIT Affinity Group. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show affinity group details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getAffinityGroupAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID affinityGroupId,
			final ApiCallback<AffinityGroup> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getAffinityGroupValidateBeforeCall(projectId, affinityGroupId, _callback);
		Type localVarReturnType = new TypeToken<AffinityGroup>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getAttachedVolume
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Get details about a volume attachment. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getAttachedVolumeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/volume-attachments/{volumeId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()))
						.replace(
								"{" + "volumeId" + "}",
								localVarApiClient.escapeString(volumeId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getAttachedVolumeValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getAttachedVolume(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling getAttachedVolume(Async)");
		}

		// verify the required parameter 'volumeId' is set
		if (volumeId == null) {
			throw new ApiException(
					"Missing the required parameter 'volumeId' when calling getAttachedVolume(Async)");
		}

		return getAttachedVolumeCall(projectId, serverId, volumeId, _callback);
	}

	/**
	 * Get Volume Attachment details. Get the details of an existing Volume Attachment.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @return VolumeAttachment
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Get details about a volume attachment. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public VolumeAttachment getAttachedVolume(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId)
			throws ApiException {
		ApiResponse<VolumeAttachment> localVarResp =
				getAttachedVolumeWithHttpInfo(projectId, serverId, volumeId);
		return localVarResp.getData();
	}

	/**
	 * Get Volume Attachment details. Get the details of an existing Volume Attachment.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @return ApiResponse&lt;VolumeAttachment&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Get details about a volume attachment. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<VolumeAttachment> getAttachedVolumeWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId)
			throws ApiException {
		okhttp3.Call localVarCall =
				getAttachedVolumeValidateBeforeCall(projectId, serverId, volumeId, null);
		Type localVarReturnType = new TypeToken<VolumeAttachment>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get Volume Attachment details. (asynchronously) Get the details of an existing Volume
	 * Attachment.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Get details about a volume attachment. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getAttachedVolumeAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			final ApiCallback<VolumeAttachment> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getAttachedVolumeValidateBeforeCall(projectId, serverId, volumeId, _callback);
		Type localVarReturnType = new TypeToken<VolumeAttachment>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getBackup
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show backup details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getBackupCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/backups/{backupId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "backupId" + "}",
								localVarApiClient.escapeString(backupId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getBackupValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getBackup(Async)");
		}

		// verify the required parameter 'backupId' is set
		if (backupId == null) {
			throw new ApiException(
					"Missing the required parameter 'backupId' when calling getBackup(Async)");
		}

		return getBackupCall(projectId, backupId, _callback);
	}

	/**
	 * Get details about a backup. Get details about a block device backup.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @return Backup
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show backup details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Backup getBackup(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID backupId)
			throws ApiException {
		ApiResponse<Backup> localVarResp = getBackupWithHttpInfo(projectId, backupId);
		return localVarResp.getData();
	}

	/**
	 * Get details about a backup. Get details about a block device backup.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @return ApiResponse&lt;Backup&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show backup details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Backup> getBackupWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID backupId)
			throws ApiException {
		okhttp3.Call localVarCall = getBackupValidateBeforeCall(projectId, backupId, null);
		Type localVarReturnType = new TypeToken<Backup>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get details about a backup. (asynchronously) Get details about a block device backup.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show backup details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getBackupAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			final ApiCallback<Backup> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = getBackupValidateBeforeCall(projectId, backupId, _callback);
		Type localVarReturnType = new TypeToken<Backup>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getImage
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show Image details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getImageCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/images/{imageId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "imageId" + "}",
								localVarApiClient.escapeString(imageId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getImageValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getImage(Async)");
		}

		// verify the required parameter 'imageId' is set
		if (imageId == null) {
			throw new ApiException(
					"Missing the required parameter 'imageId' when calling getImage(Async)");
		}

		return getImageCall(projectId, imageId, _callback);
	}

	/**
	 * Get details about an image. Get details about a specific Image inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @return Image
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show Image details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Image getImage(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID imageId)
			throws ApiException {
		ApiResponse<Image> localVarResp = getImageWithHttpInfo(projectId, imageId);
		return localVarResp.getData();
	}

	/**
	 * Get details about an image. Get details about a specific Image inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @return ApiResponse&lt;Image&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show Image details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Image> getImageWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID imageId)
			throws ApiException {
		okhttp3.Call localVarCall = getImageValidateBeforeCall(projectId, imageId, null);
		Type localVarReturnType = new TypeToken<Image>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get details about an image. (asynchronously) Get details about a specific Image inside a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show Image details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getImageAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback<Image> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = getImageValidateBeforeCall(projectId, imageId, _callback);
		Type localVarReturnType = new TypeToken<Image>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getImageShare
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show Image share details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getImageShareCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/images/{imageId}/share"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "imageId" + "}",
								localVarApiClient.escapeString(imageId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getImageShareValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getImageShare(Async)");
		}

		// verify the required parameter 'imageId' is set
		if (imageId == null) {
			throw new ApiException(
					"Missing the required parameter 'imageId' when calling getImageShare(Async)");
		}

		return getImageShareCall(projectId, imageId, _callback);
	}

	/**
	 * Get share details of an image. Get share details about an shared image.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @return ImageShare
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show Image share details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ImageShare getImageShare(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID imageId)
			throws ApiException {
		ApiResponse<ImageShare> localVarResp = getImageShareWithHttpInfo(projectId, imageId);
		return localVarResp.getData();
	}

	/**
	 * Get share details of an image. Get share details about an shared image.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @return ApiResponse&lt;ImageShare&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show Image share details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<ImageShare> getImageShareWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID imageId)
			throws ApiException {
		okhttp3.Call localVarCall = getImageShareValidateBeforeCall(projectId, imageId, null);
		Type localVarReturnType = new TypeToken<ImageShare>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get share details of an image. (asynchronously) Get share details about an shared image.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show Image share details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getImageShareAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback<ImageShare> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = getImageShareValidateBeforeCall(projectId, imageId, _callback);
		Type localVarReturnType = new TypeToken<ImageShare>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getImageShareConsumer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param consumerProjectId The identifier (ID) of a STACKIT Project that consumes an image
	 *     share. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show Image share consumer details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getImageShareConsumerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UUID consumerProjectId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/images/{imageId}/share/{consumerProjectId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "imageId" + "}",
								localVarApiClient.escapeString(imageId.toString()))
						.replace(
								"{" + "consumerProjectId" + "}",
								localVarApiClient.escapeString(consumerProjectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getImageShareConsumerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UUID consumerProjectId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getImageShareConsumer(Async)");
		}

		// verify the required parameter 'imageId' is set
		if (imageId == null) {
			throw new ApiException(
					"Missing the required parameter 'imageId' when calling getImageShareConsumer(Async)");
		}

		// verify the required parameter 'consumerProjectId' is set
		if (consumerProjectId == null) {
			throw new ApiException(
					"Missing the required parameter 'consumerProjectId' when calling getImageShareConsumer(Async)");
		}

		return getImageShareConsumerCall(projectId, imageId, consumerProjectId, _callback);
	}

	/**
	 * Get image share consumer. Get details about an image share consumer.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param consumerProjectId The identifier (ID) of a STACKIT Project that consumes an image
	 *     share. (required)
	 * @return ImageShareConsumer
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show Image share consumer details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ImageShareConsumer getImageShareConsumer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UUID consumerProjectId)
			throws ApiException {
		ApiResponse<ImageShareConsumer> localVarResp =
				getImageShareConsumerWithHttpInfo(projectId, imageId, consumerProjectId);
		return localVarResp.getData();
	}

	/**
	 * Get image share consumer. Get details about an image share consumer.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param consumerProjectId The identifier (ID) of a STACKIT Project that consumes an image
	 *     share. (required)
	 * @return ApiResponse&lt;ImageShareConsumer&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show Image share consumer details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<ImageShareConsumer> getImageShareConsumerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UUID consumerProjectId)
			throws ApiException {
		okhttp3.Call localVarCall =
				getImageShareConsumerValidateBeforeCall(
						projectId, imageId, consumerProjectId, null);
		Type localVarReturnType = new TypeToken<ImageShareConsumer>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get image share consumer. (asynchronously) Get details about an image share consumer.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param consumerProjectId The identifier (ID) of a STACKIT Project that consumes an image
	 *     share. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show Image share consumer details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getImageShareConsumerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UUID consumerProjectId,
			final ApiCallback<ImageShareConsumer> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getImageShareConsumerValidateBeforeCall(
						projectId, imageId, consumerProjectId, _callback);
		Type localVarReturnType = new TypeToken<ImageShareConsumer>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getKeyPair
	 *
	 * @param keypairName The name of an SSH keypair. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show SSH keypair details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getKeyPairCall(
			@javax.annotation.Nonnull String keypairName, final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/keypairs/{keypairName}"
						.replace(
								"{" + "keypairName" + "}",
								localVarApiClient.escapeString(keypairName.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getKeyPairValidateBeforeCall(
			@javax.annotation.Nonnull String keypairName, final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'keypairName' is set
		if (keypairName == null) {
			throw new ApiException(
					"Missing the required parameter 'keypairName' when calling getKeyPair(Async)");
		}

		return getKeyPairCall(keypairName, _callback);
	}

	/**
	 * Get SSH keypair details. Get details about an SSH keypair.
	 *
	 * @param keypairName The name of an SSH keypair. (required)
	 * @return Keypair
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show SSH keypair details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Keypair getKeyPair(@javax.annotation.Nonnull String keypairName) throws ApiException {
		ApiResponse<Keypair> localVarResp = getKeyPairWithHttpInfo(keypairName);
		return localVarResp.getData();
	}

	/**
	 * Get SSH keypair details. Get details about an SSH keypair.
	 *
	 * @param keypairName The name of an SSH keypair. (required)
	 * @return ApiResponse&lt;Keypair&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show SSH keypair details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Keypair> getKeyPairWithHttpInfo(@javax.annotation.Nonnull String keypairName)
			throws ApiException {
		okhttp3.Call localVarCall = getKeyPairValidateBeforeCall(keypairName, null);
		Type localVarReturnType = new TypeToken<Keypair>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get SSH keypair details. (asynchronously) Get details about an SSH keypair.
	 *
	 * @param keypairName The name of an SSH keypair. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show SSH keypair details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getKeyPairAsync(
			@javax.annotation.Nonnull String keypairName, final ApiCallback<Keypair> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = getKeyPairValidateBeforeCall(keypairName, _callback);
		Type localVarReturnType = new TypeToken<Keypair>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getMachineType
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param machineType STACKIT machine type Name. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show machine type details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getMachineTypeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull String machineType,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/machine-types/{machineType}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "machineType" + "}",
								localVarApiClient.escapeString(machineType.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getMachineTypeValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull String machineType,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getMachineType(Async)");
		}

		// verify the required parameter 'machineType' is set
		if (machineType == null) {
			throw new ApiException(
					"Missing the required parameter 'machineType' when calling getMachineType(Async)");
		}

		return getMachineTypeCall(projectId, machineType, _callback);
	}

	/**
	 * Get details about a machine type. Get details about a specific machine type.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param machineType STACKIT machine type Name. (required)
	 * @return MachineType
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show machine type details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public MachineType getMachineType(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull String machineType)
			throws ApiException {
		ApiResponse<MachineType> localVarResp = getMachineTypeWithHttpInfo(projectId, machineType);
		return localVarResp.getData();
	}

	/**
	 * Get details about a machine type. Get details about a specific machine type.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param machineType STACKIT machine type Name. (required)
	 * @return ApiResponse&lt;MachineType&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show machine type details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<MachineType> getMachineTypeWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull String machineType)
			throws ApiException {
		okhttp3.Call localVarCall = getMachineTypeValidateBeforeCall(projectId, machineType, null);
		Type localVarReturnType = new TypeToken<MachineType>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get details about a machine type. (asynchronously) Get details about a specific machine type.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param machineType STACKIT machine type Name. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show machine type details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getMachineTypeAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull String machineType,
			final ApiCallback<MachineType> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getMachineTypeValidateBeforeCall(projectId, machineType, _callback);
		Type localVarReturnType = new TypeToken<MachineType>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getNetwork
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getNetworkCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/networks/{networkId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "networkId" + "}",
								localVarApiClient.escapeString(networkId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getNetworkValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getNetwork(Async)");
		}

		// verify the required parameter 'networkId' is set
		if (networkId == null) {
			throw new ApiException(
					"Missing the required parameter 'networkId' when calling getNetwork(Async)");
		}

		return getNetworkCall(projectId, networkId, _callback);
	}

	/**
	 * Get network details. Get details about a network of a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @return Network
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Network getNetwork(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID networkId)
			throws ApiException {
		ApiResponse<Network> localVarResp = getNetworkWithHttpInfo(projectId, networkId);
		return localVarResp.getData();
	}

	/**
	 * Get network details. Get details about a network of a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @return ApiResponse&lt;Network&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Network> getNetworkWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID networkId)
			throws ApiException {
		okhttp3.Call localVarCall = getNetworkValidateBeforeCall(projectId, networkId, null);
		Type localVarReturnType = new TypeToken<Network>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get network details. (asynchronously) Get details about a network of a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getNetworkAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			final ApiCallback<Network> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = getNetworkValidateBeforeCall(projectId, networkId, _callback);
		Type localVarReturnType = new TypeToken<Network>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getNetworkArea
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network area details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getNetworkAreaCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas/{areaId}"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()))
						.replace(
								"{" + "areaId" + "}",
								localVarApiClient.escapeString(areaId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getNetworkAreaValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling getNetworkArea(Async)");
		}

		// verify the required parameter 'areaId' is set
		if (areaId == null) {
			throw new ApiException(
					"Missing the required parameter 'areaId' when calling getNetworkArea(Async)");
		}

		return getNetworkAreaCall(organizationId, areaId, _callback);
	}

	/**
	 * Get details about a network area. Get details about a network area in an organization.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @return NetworkArea
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network area details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NetworkArea getNetworkArea(
			@javax.annotation.Nonnull UUID organizationId, @javax.annotation.Nonnull UUID areaId)
			throws ApiException {
		ApiResponse<NetworkArea> localVarResp = getNetworkAreaWithHttpInfo(organizationId, areaId);
		return localVarResp.getData();
	}

	/**
	 * Get details about a network area. Get details about a network area in an organization.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @return ApiResponse&lt;NetworkArea&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network area details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NetworkArea> getNetworkAreaWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId, @javax.annotation.Nonnull UUID areaId)
			throws ApiException {
		okhttp3.Call localVarCall = getNetworkAreaValidateBeforeCall(organizationId, areaId, null);
		Type localVarReturnType = new TypeToken<NetworkArea>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get details about a network area. (asynchronously) Get details about a network area in an
	 * organization.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network area details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getNetworkAreaAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			final ApiCallback<NetworkArea> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getNetworkAreaValidateBeforeCall(organizationId, areaId, _callback);
		Type localVarReturnType = new TypeToken<NetworkArea>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getNetworkAreaRange
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param networkRangeId The identifier (ID) of a STACKIT Network Range. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network range details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getNetworkAreaRangeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID networkRangeId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas/{areaId}/network-ranges/{networkRangeId}"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()))
						.replace(
								"{" + "areaId" + "}",
								localVarApiClient.escapeString(areaId.toString()))
						.replace(
								"{" + "networkRangeId" + "}",
								localVarApiClient.escapeString(networkRangeId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getNetworkAreaRangeValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID networkRangeId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling getNetworkAreaRange(Async)");
		}

		// verify the required parameter 'areaId' is set
		if (areaId == null) {
			throw new ApiException(
					"Missing the required parameter 'areaId' when calling getNetworkAreaRange(Async)");
		}

		// verify the required parameter 'networkRangeId' is set
		if (networkRangeId == null) {
			throw new ApiException(
					"Missing the required parameter 'networkRangeId' when calling getNetworkAreaRange(Async)");
		}

		return getNetworkAreaRangeCall(organizationId, areaId, networkRangeId, _callback);
	}

	/**
	 * Get details about a network range. Get details about a network range in a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param networkRangeId The identifier (ID) of a STACKIT Network Range. (required)
	 * @return NetworkRange
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network range details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NetworkRange getNetworkAreaRange(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID networkRangeId)
			throws ApiException {
		ApiResponse<NetworkRange> localVarResp =
				getNetworkAreaRangeWithHttpInfo(organizationId, areaId, networkRangeId);
		return localVarResp.getData();
	}

	/**
	 * Get details about a network range. Get details about a network range in a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param networkRangeId The identifier (ID) of a STACKIT Network Range. (required)
	 * @return ApiResponse&lt;NetworkRange&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network range details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NetworkRange> getNetworkAreaRangeWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID networkRangeId)
			throws ApiException {
		okhttp3.Call localVarCall =
				getNetworkAreaRangeValidateBeforeCall(organizationId, areaId, networkRangeId, null);
		Type localVarReturnType = new TypeToken<NetworkRange>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get details about a network range. (asynchronously) Get details about a network range in a
	 * network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param networkRangeId The identifier (ID) of a STACKIT Network Range. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network range details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getNetworkAreaRangeAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID networkRangeId,
			final ApiCallback<NetworkRange> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getNetworkAreaRangeValidateBeforeCall(
						organizationId, areaId, networkRangeId, _callback);
		Type localVarReturnType = new TypeToken<NetworkRange>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getNetworkAreaRoute
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param routeId The identifier (ID) of a STACKIT Route. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show route details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getNetworkAreaRouteCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas/{areaId}/routes/{routeId}"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()))
						.replace(
								"{" + "areaId" + "}",
								localVarApiClient.escapeString(areaId.toString()))
						.replace(
								"{" + "routeId" + "}",
								localVarApiClient.escapeString(routeId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getNetworkAreaRouteValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling getNetworkAreaRoute(Async)");
		}

		// verify the required parameter 'areaId' is set
		if (areaId == null) {
			throw new ApiException(
					"Missing the required parameter 'areaId' when calling getNetworkAreaRoute(Async)");
		}

		// verify the required parameter 'routeId' is set
		if (routeId == null) {
			throw new ApiException(
					"Missing the required parameter 'routeId' when calling getNetworkAreaRoute(Async)");
		}

		return getNetworkAreaRouteCall(organizationId, areaId, routeId, _callback);
	}

	/**
	 * Get details about a network route. Get details about a network route defined in a network
	 * area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param routeId The identifier (ID) of a STACKIT Route. (required)
	 * @return Route
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show route details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Route getNetworkAreaRoute(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId)
			throws ApiException {
		ApiResponse<Route> localVarResp =
				getNetworkAreaRouteWithHttpInfo(organizationId, areaId, routeId);
		return localVarResp.getData();
	}

	/**
	 * Get details about a network route. Get details about a network route defined in a network
	 * area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param routeId The identifier (ID) of a STACKIT Route. (required)
	 * @return ApiResponse&lt;Route&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show route details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Route> getNetworkAreaRouteWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId)
			throws ApiException {
		okhttp3.Call localVarCall =
				getNetworkAreaRouteValidateBeforeCall(organizationId, areaId, routeId, null);
		Type localVarReturnType = new TypeToken<Route>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get details about a network route. (asynchronously) Get details about a network route defined
	 * in a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param routeId The identifier (ID) of a STACKIT Route. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show route details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getNetworkAreaRouteAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId,
			final ApiCallback<Route> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getNetworkAreaRouteValidateBeforeCall(organizationId, areaId, routeId, _callback);
		Type localVarReturnType = new TypeToken<Route>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getNic
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network interface details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getNicCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/networks/{networkId}/nics/{nicId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "networkId" + "}",
								localVarApiClient.escapeString(networkId.toString()))
						.replace(
								"{" + "nicId" + "}",
								localVarApiClient.escapeString(nicId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getNicValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getNic(Async)");
		}

		// verify the required parameter 'networkId' is set
		if (networkId == null) {
			throw new ApiException(
					"Missing the required parameter 'networkId' when calling getNic(Async)");
		}

		// verify the required parameter 'nicId' is set
		if (nicId == null) {
			throw new ApiException(
					"Missing the required parameter 'nicId' when calling getNic(Async)");
		}

		return getNicCall(projectId, networkId, nicId, _callback);
	}

	/**
	 * Get details about a network interface of a network. Get details about a network interface
	 * inside a network.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @return NIC
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network interface details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NIC getNic(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId)
			throws ApiException {
		ApiResponse<NIC> localVarResp = getNicWithHttpInfo(projectId, networkId, nicId);
		return localVarResp.getData();
	}

	/**
	 * Get details about a network interface of a network. Get details about a network interface
	 * inside a network.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @return ApiResponse&lt;NIC&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network interface details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NIC> getNicWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId)
			throws ApiException {
		okhttp3.Call localVarCall = getNicValidateBeforeCall(projectId, networkId, nicId, null);
		Type localVarReturnType = new TypeToken<NIC>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get details about a network interface of a network. (asynchronously) Get details about a
	 * network interface inside a network.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show network interface details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getNicAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback<NIC> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getNicValidateBeforeCall(projectId, networkId, nicId, _callback);
		Type localVarReturnType = new TypeToken<NIC>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getOrganizationRequest
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param requestId The identifier (ID) of a STACKIT Request. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show organization request details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getOrganizationRequestCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull String requestId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/requests/{requestId}"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()))
						.replace(
								"{" + "requestId" + "}",
								localVarApiClient.escapeString(requestId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getOrganizationRequestValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull String requestId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling getOrganizationRequest(Async)");
		}

		// verify the required parameter 'requestId' is set
		if (requestId == null) {
			throw new ApiException(
					"Missing the required parameter 'requestId' when calling getOrganizationRequest(Async)");
		}

		return getOrganizationRequestCall(organizationId, requestId, _callback);
	}

	/**
	 * Lookup an organization request ID. Lookup an organization request ID from a previous request.
	 * This allows to find resource IDs of resources generated during a organization request.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param requestId The identifier (ID) of a STACKIT Request. (required)
	 * @return Request
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show organization request details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Request getOrganizationRequest(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull String requestId)
			throws ApiException {
		ApiResponse<Request> localVarResp =
				getOrganizationRequestWithHttpInfo(organizationId, requestId);
		return localVarResp.getData();
	}

	/**
	 * Lookup an organization request ID. Lookup an organization request ID from a previous request.
	 * This allows to find resource IDs of resources generated during a organization request.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param requestId The identifier (ID) of a STACKIT Request. (required)
	 * @return ApiResponse&lt;Request&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show organization request details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Request> getOrganizationRequestWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull String requestId)
			throws ApiException {
		okhttp3.Call localVarCall =
				getOrganizationRequestValidateBeforeCall(organizationId, requestId, null);
		Type localVarReturnType = new TypeToken<Request>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Lookup an organization request ID. (asynchronously) Lookup an organization request ID from a
	 * previous request. This allows to find resource IDs of resources generated during a
	 * organization request.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param requestId The identifier (ID) of a STACKIT Request. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show organization request details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getOrganizationRequestAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull String requestId,
			final ApiCallback<Request> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getOrganizationRequestValidateBeforeCall(organizationId, requestId, _callback);
		Type localVarReturnType = new TypeToken<Request>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getProjectDetails
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show project details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getProjectDetailsCall(
			@javax.annotation.Nonnull UUID projectId, final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getProjectDetailsValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId, final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getProjectDetails(Async)");
		}

		return getProjectDetailsCall(projectId, _callback);
	}

	/**
	 * Get project details. Get details about a STACKIT project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @return Project
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show project details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Project getProjectDetails(@javax.annotation.Nonnull UUID projectId) throws ApiException {
		ApiResponse<Project> localVarResp = getProjectDetailsWithHttpInfo(projectId);
		return localVarResp.getData();
	}

	/**
	 * Get project details. Get details about a STACKIT project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @return ApiResponse&lt;Project&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show project details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Project> getProjectDetailsWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId) throws ApiException {
		okhttp3.Call localVarCall = getProjectDetailsValidateBeforeCall(projectId, null);
		Type localVarReturnType = new TypeToken<Project>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get project details. (asynchronously) Get details about a STACKIT project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show project details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getProjectDetailsAsync(
			@javax.annotation.Nonnull UUID projectId, final ApiCallback<Project> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = getProjectDetailsValidateBeforeCall(projectId, _callback);
		Type localVarReturnType = new TypeToken<Project>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getProjectNIC
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show details of network interface. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getProjectNICCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/nics/{nicId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "nicId" + "}",
								localVarApiClient.escapeString(nicId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getProjectNICValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getProjectNIC(Async)");
		}

		// verify the required parameter 'nicId' is set
		if (nicId == null) {
			throw new ApiException(
					"Missing the required parameter 'nicId' when calling getProjectNIC(Async)");
		}

		return getProjectNICCall(projectId, nicId, _callback);
	}

	/**
	 * Get details about a network interface of a project. Get details about a network interface
	 * inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @return NIC
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show details of network interface. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NIC getProjectNIC(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID nicId)
			throws ApiException {
		ApiResponse<NIC> localVarResp = getProjectNICWithHttpInfo(projectId, nicId);
		return localVarResp.getData();
	}

	/**
	 * Get details about a network interface of a project. Get details about a network interface
	 * inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @return ApiResponse&lt;NIC&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show details of network interface. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NIC> getProjectNICWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID nicId)
			throws ApiException {
		okhttp3.Call localVarCall = getProjectNICValidateBeforeCall(projectId, nicId, null);
		Type localVarReturnType = new TypeToken<NIC>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get details about a network interface of a project. (asynchronously) Get details about a
	 * network interface inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show details of network interface. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getProjectNICAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback<NIC> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = getProjectNICValidateBeforeCall(projectId, nicId, _callback);
		Type localVarReturnType = new TypeToken<NIC>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getProjectRequest
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param requestId The identifier (ID) of a STACKIT Request. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show project request details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getProjectRequestCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull String requestId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/requests/{requestId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "requestId" + "}",
								localVarApiClient.escapeString(requestId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getProjectRequestValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull String requestId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getProjectRequest(Async)");
		}

		// verify the required parameter 'requestId' is set
		if (requestId == null) {
			throw new ApiException(
					"Missing the required parameter 'requestId' when calling getProjectRequest(Async)");
		}

		return getProjectRequestCall(projectId, requestId, _callback);
	}

	/**
	 * Lookup a project request ID. Lookup a project request ID from a previous request. This allows
	 * to find resource IDs of resources generated during a projects request.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param requestId The identifier (ID) of a STACKIT Request. (required)
	 * @return Request
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show project request details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Request getProjectRequest(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull String requestId)
			throws ApiException {
		ApiResponse<Request> localVarResp = getProjectRequestWithHttpInfo(projectId, requestId);
		return localVarResp.getData();
	}

	/**
	 * Lookup a project request ID. Lookup a project request ID from a previous request. This allows
	 * to find resource IDs of resources generated during a projects request.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param requestId The identifier (ID) of a STACKIT Request. (required)
	 * @return ApiResponse&lt;Request&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show project request details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Request> getProjectRequestWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull String requestId)
			throws ApiException {
		okhttp3.Call localVarCall = getProjectRequestValidateBeforeCall(projectId, requestId, null);
		Type localVarReturnType = new TypeToken<Request>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Lookup a project request ID. (asynchronously) Lookup a project request ID from a previous
	 * request. This allows to find resource IDs of resources generated during a projects request.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param requestId The identifier (ID) of a STACKIT Request. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show project request details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getProjectRequestAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull String requestId,
			final ApiCallback<Request> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getProjectRequestValidateBeforeCall(projectId, requestId, _callback);
		Type localVarReturnType = new TypeToken<Request>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getPublicIP
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show public IP details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getPublicIPCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID publicIpId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/public-ips/{publicIpId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "publicIpId" + "}",
								localVarApiClient.escapeString(publicIpId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getPublicIPValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID publicIpId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getPublicIP(Async)");
		}

		// verify the required parameter 'publicIpId' is set
		if (publicIpId == null) {
			throw new ApiException(
					"Missing the required parameter 'publicIpId' when calling getPublicIP(Async)");
		}

		return getPublicIPCall(projectId, publicIpId, _callback);
	}

	/**
	 * Get details about a public IP. Get details about a public IP inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @return PublicIp
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show public IP details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public PublicIp getPublicIP(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID publicIpId)
			throws ApiException {
		ApiResponse<PublicIp> localVarResp = getPublicIPWithHttpInfo(projectId, publicIpId);
		return localVarResp.getData();
	}

	/**
	 * Get details about a public IP. Get details about a public IP inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @return ApiResponse&lt;PublicIp&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show public IP details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<PublicIp> getPublicIPWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID publicIpId)
			throws ApiException {
		okhttp3.Call localVarCall = getPublicIPValidateBeforeCall(projectId, publicIpId, null);
		Type localVarReturnType = new TypeToken<PublicIp>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get details about a public IP. (asynchronously) Get details about a public IP inside a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show public IP details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getPublicIPAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID publicIpId,
			final ApiCallback<PublicIp> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = getPublicIPValidateBeforeCall(projectId, publicIpId, _callback);
		Type localVarReturnType = new TypeToken<PublicIp>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getSecurityGroup
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show security group details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getSecurityGroupCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/security-groups/{securityGroupId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "securityGroupId" + "}",
								localVarApiClient.escapeString(securityGroupId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getSecurityGroupValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getSecurityGroup(Async)");
		}

		// verify the required parameter 'securityGroupId' is set
		if (securityGroupId == null) {
			throw new ApiException(
					"Missing the required parameter 'securityGroupId' when calling getSecurityGroup(Async)");
		}

		return getSecurityGroupCall(projectId, securityGroupId, _callback);
	}

	/**
	 * Get security group details. Get details about a security group of a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @return SecurityGroup
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show security group details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public SecurityGroup getSecurityGroup(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId)
			throws ApiException {
		ApiResponse<SecurityGroup> localVarResp =
				getSecurityGroupWithHttpInfo(projectId, securityGroupId);
		return localVarResp.getData();
	}

	/**
	 * Get security group details. Get details about a security group of a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @return ApiResponse&lt;SecurityGroup&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show security group details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<SecurityGroup> getSecurityGroupWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId)
			throws ApiException {
		okhttp3.Call localVarCall =
				getSecurityGroupValidateBeforeCall(projectId, securityGroupId, null);
		Type localVarReturnType = new TypeToken<SecurityGroup>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get security group details. (asynchronously) Get details about a security group of a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show security group details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getSecurityGroupAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback<SecurityGroup> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getSecurityGroupValidateBeforeCall(projectId, securityGroupId, _callback);
		Type localVarReturnType = new TypeToken<SecurityGroup>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getSecurityGroupRule
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param securityGroupRuleId The identifier (ID) of a STACKIT Security Group Rule. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show security group rule details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getSecurityGroupRuleCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UUID securityGroupRuleId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/security-groups/{securityGroupId}/rules/{securityGroupRuleId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "securityGroupId" + "}",
								localVarApiClient.escapeString(securityGroupId.toString()))
						.replace(
								"{" + "securityGroupRuleId" + "}",
								localVarApiClient.escapeString(securityGroupRuleId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getSecurityGroupRuleValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UUID securityGroupRuleId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getSecurityGroupRule(Async)");
		}

		// verify the required parameter 'securityGroupId' is set
		if (securityGroupId == null) {
			throw new ApiException(
					"Missing the required parameter 'securityGroupId' when calling getSecurityGroupRule(Async)");
		}

		// verify the required parameter 'securityGroupRuleId' is set
		if (securityGroupRuleId == null) {
			throw new ApiException(
					"Missing the required parameter 'securityGroupRuleId' when calling getSecurityGroupRule(Async)");
		}

		return getSecurityGroupRuleCall(projectId, securityGroupId, securityGroupRuleId, _callback);
	}

	/**
	 * Get security group rule details. Get details about a security group rule of a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param securityGroupRuleId The identifier (ID) of a STACKIT Security Group Rule. (required)
	 * @return SecurityGroupRule
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show security group rule details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public SecurityGroupRule getSecurityGroupRule(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UUID securityGroupRuleId)
			throws ApiException {
		ApiResponse<SecurityGroupRule> localVarResp =
				getSecurityGroupRuleWithHttpInfo(projectId, securityGroupId, securityGroupRuleId);
		return localVarResp.getData();
	}

	/**
	 * Get security group rule details. Get details about a security group rule of a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param securityGroupRuleId The identifier (ID) of a STACKIT Security Group Rule. (required)
	 * @return ApiResponse&lt;SecurityGroupRule&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show security group rule details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<SecurityGroupRule> getSecurityGroupRuleWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UUID securityGroupRuleId)
			throws ApiException {
		okhttp3.Call localVarCall =
				getSecurityGroupRuleValidateBeforeCall(
						projectId, securityGroupId, securityGroupRuleId, null);
		Type localVarReturnType = new TypeToken<SecurityGroupRule>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get security group rule details. (asynchronously) Get details about a security group rule of
	 * a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param securityGroupRuleId The identifier (ID) of a STACKIT Security Group Rule. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show security group rule details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getSecurityGroupRuleAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UUID securityGroupRuleId,
			final ApiCallback<SecurityGroupRule> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getSecurityGroupRuleValidateBeforeCall(
						projectId, securityGroupId, securityGroupRuleId, _callback);
		Type localVarReturnType = new TypeToken<SecurityGroupRule>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param details Show detailed information about server. (optional, default to false)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show server details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable Boolean details,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (details != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable Boolean details,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling getServer(Async)");
		}

		return getServerCall(projectId, serverId, details, _callback);
	}

	/**
	 * Get server details. Get details about a server by its ID.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param details Show detailed information about server. (optional, default to false)
	 * @return Server
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show server details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Server getServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable Boolean details)
			throws ApiException {
		ApiResponse<Server> localVarResp = getServerWithHttpInfo(projectId, serverId, details);
		return localVarResp.getData();
	}

	/**
	 * Get server details. Get details about a server by its ID.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param details Show detailed information about server. (optional, default to false)
	 * @return ApiResponse&lt;Server&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show server details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Server> getServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable Boolean details)
			throws ApiException {
		okhttp3.Call localVarCall = getServerValidateBeforeCall(projectId, serverId, details, null);
		Type localVarReturnType = new TypeToken<Server>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get server details. (asynchronously) Get details about a server by its ID.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param details Show detailed information about server. (optional, default to false)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show server details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable Boolean details,
			final ApiCallback<Server> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getServerValidateBeforeCall(projectId, serverId, details, _callback);
		Type localVarReturnType = new TypeToken<Server>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getServerConsole
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show server console URL. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getServerConsoleCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/console"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getServerConsoleValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getServerConsole(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling getServerConsole(Async)");
		}

		return getServerConsoleCall(projectId, serverId, _callback);
	}

	/**
	 * Get server console. Get a URL for server remote console.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @return ServerConsoleUrl
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show server console URL. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ServerConsoleUrl getServerConsole(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		ApiResponse<ServerConsoleUrl> localVarResp =
				getServerConsoleWithHttpInfo(projectId, serverId);
		return localVarResp.getData();
	}

	/**
	 * Get server console. Get a URL for server remote console.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @return ApiResponse&lt;ServerConsoleUrl&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show server console URL. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<ServerConsoleUrl> getServerConsoleWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		okhttp3.Call localVarCall = getServerConsoleValidateBeforeCall(projectId, serverId, null);
		Type localVarReturnType = new TypeToken<ServerConsoleUrl>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get server console. (asynchronously) Get a URL for server remote console.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show server console URL. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getServerConsoleAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback<ServerConsoleUrl> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getServerConsoleValidateBeforeCall(projectId, serverId, _callback);
		Type localVarReturnType = new TypeToken<ServerConsoleUrl>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getServerLog
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param length Request the server log. By default the length is limited to 2000 lines. Set to
	 *     0 to retrieve the complete log. (optional, default to 2000)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show server console log. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getServerLogCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable Long length,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/log"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (length != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("length", length));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getServerLogValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable Long length,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getServerLog(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling getServerLog(Async)");
		}

		return getServerLogCall(projectId, serverId, length, _callback);
	}

	/**
	 * Get server log. Get server console log.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param length Request the server log. By default the length is limited to 2000 lines. Set to
	 *     0 to retrieve the complete log. (optional, default to 2000)
	 * @return GetServerLog200Response
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show server console log. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public GetServerLog200Response getServerLog(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable Long length)
			throws ApiException {
		ApiResponse<GetServerLog200Response> localVarResp =
				getServerLogWithHttpInfo(projectId, serverId, length);
		return localVarResp.getData();
	}

	/**
	 * Get server log. Get server console log.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param length Request the server log. By default the length is limited to 2000 lines. Set to
	 *     0 to retrieve the complete log. (optional, default to 2000)
	 * @return ApiResponse&lt;GetServerLog200Response&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show server console log. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<GetServerLog200Response> getServerLogWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable Long length)
			throws ApiException {
		okhttp3.Call localVarCall =
				getServerLogValidateBeforeCall(projectId, serverId, length, null);
		Type localVarReturnType = new TypeToken<GetServerLog200Response>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get server log. (asynchronously) Get server console log.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param length Request the server log. By default the length is limited to 2000 lines. Set to
	 *     0 to retrieve the complete log. (optional, default to 2000)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show server console log. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getServerLogAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable Long length,
			final ApiCallback<GetServerLog200Response> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getServerLogValidateBeforeCall(projectId, serverId, length, _callback);
		Type localVarReturnType = new TypeToken<GetServerLog200Response>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getSnapshot
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param snapshotId The identifier (ID) of a STACKIT Snapshot. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show snapshot details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getSnapshotCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID snapshotId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/snapshots/{snapshotId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "snapshotId" + "}",
								localVarApiClient.escapeString(snapshotId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getSnapshotValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID snapshotId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getSnapshot(Async)");
		}

		// verify the required parameter 'snapshotId' is set
		if (snapshotId == null) {
			throw new ApiException(
					"Missing the required parameter 'snapshotId' when calling getSnapshot(Async)");
		}

		return getSnapshotCall(projectId, snapshotId, _callback);
	}

	/**
	 * Get details about a snapshot. Get details about a block device snapshot.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param snapshotId The identifier (ID) of a STACKIT Snapshot. (required)
	 * @return Snapshot
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show snapshot details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Snapshot getSnapshot(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID snapshotId)
			throws ApiException {
		ApiResponse<Snapshot> localVarResp = getSnapshotWithHttpInfo(projectId, snapshotId);
		return localVarResp.getData();
	}

	/**
	 * Get details about a snapshot. Get details about a block device snapshot.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param snapshotId The identifier (ID) of a STACKIT Snapshot. (required)
	 * @return ApiResponse&lt;Snapshot&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show snapshot details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Snapshot> getSnapshotWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID snapshotId)
			throws ApiException {
		okhttp3.Call localVarCall = getSnapshotValidateBeforeCall(projectId, snapshotId, null);
		Type localVarReturnType = new TypeToken<Snapshot>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get details about a snapshot. (asynchronously) Get details about a block device snapshot.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param snapshotId The identifier (ID) of a STACKIT Snapshot. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show snapshot details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getSnapshotAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID snapshotId,
			final ApiCallback<Snapshot> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = getSnapshotValidateBeforeCall(projectId, snapshotId, _callback);
		Type localVarReturnType = new TypeToken<Snapshot>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getVolume
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show volume details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getVolumeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/volumes/{volumeId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "volumeId" + "}",
								localVarApiClient.escapeString(volumeId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getVolumeValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getVolume(Async)");
		}

		// verify the required parameter 'volumeId' is set
		if (volumeId == null) {
			throw new ApiException(
					"Missing the required parameter 'volumeId' when calling getVolume(Async)");
		}

		return getVolumeCall(projectId, volumeId, _callback);
	}

	/**
	 * Get details about a volume. Get details about a block device volume.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @return Volume
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show volume details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Volume getVolume(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID volumeId)
			throws ApiException {
		ApiResponse<Volume> localVarResp = getVolumeWithHttpInfo(projectId, volumeId);
		return localVarResp.getData();
	}

	/**
	 * Get details about a volume. Get details about a block device volume.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @return ApiResponse&lt;Volume&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show volume details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Volume> getVolumeWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID volumeId)
			throws ApiException {
		okhttp3.Call localVarCall = getVolumeValidateBeforeCall(projectId, volumeId, null);
		Type localVarReturnType = new TypeToken<Volume>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get details about a volume. (asynchronously) Get details about a block device volume.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show volume details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getVolumeAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			final ApiCallback<Volume> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = getVolumeValidateBeforeCall(projectId, volumeId, _callback);
		Type localVarReturnType = new TypeToken<Volume>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getVolumePerformanceClass
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumePerformanceClass The name of a STACKIT Volume performance class. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show volume performance class details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getVolumePerformanceClassCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull String volumePerformanceClass,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/volume-performance-classes/{volumePerformanceClass}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "volumePerformanceClass" + "}",
								localVarApiClient.escapeString(volumePerformanceClass.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getVolumePerformanceClassValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull String volumePerformanceClass,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling getVolumePerformanceClass(Async)");
		}

		// verify the required parameter 'volumePerformanceClass' is set
		if (volumePerformanceClass == null) {
			throw new ApiException(
					"Missing the required parameter 'volumePerformanceClass' when calling getVolumePerformanceClass(Async)");
		}

		return getVolumePerformanceClassCall(projectId, volumePerformanceClass, _callback);
	}

	/**
	 * Get details about a volume performance class. Get details about a specific volume performance
	 * class.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumePerformanceClass The name of a STACKIT Volume performance class. (required)
	 * @return VolumePerformanceClass
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show volume performance class details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public VolumePerformanceClass getVolumePerformanceClass(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull String volumePerformanceClass)
			throws ApiException {
		ApiResponse<VolumePerformanceClass> localVarResp =
				getVolumePerformanceClassWithHttpInfo(projectId, volumePerformanceClass);
		return localVarResp.getData();
	}

	/**
	 * Get details about a volume performance class. Get details about a specific volume performance
	 * class.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumePerformanceClass The name of a STACKIT Volume performance class. (required)
	 * @return ApiResponse&lt;VolumePerformanceClass&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show volume performance class details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<VolumePerformanceClass> getVolumePerformanceClassWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull String volumePerformanceClass)
			throws ApiException {
		okhttp3.Call localVarCall =
				getVolumePerformanceClassValidateBeforeCall(
						projectId, volumePerformanceClass, null);
		Type localVarReturnType = new TypeToken<VolumePerformanceClass>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get details about a volume performance class. (asynchronously) Get details about a specific
	 * volume performance class.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumePerformanceClass The name of a STACKIT Volume performance class. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Show volume performance class details. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call getVolumePerformanceClassAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull String volumePerformanceClass,
			final ApiCallback<VolumePerformanceClass> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				getVolumePerformanceClassValidateBeforeCall(
						projectId, volumePerformanceClass, _callback);
		Type localVarReturnType = new TypeToken<VolumePerformanceClass>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listAffinityGroups
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List affinity groups. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listAffinityGroupsCall(
			@javax.annotation.Nonnull UUID projectId, final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/affinity-groups"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listAffinityGroupsValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId, final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listAffinityGroups(Async)");
		}

		return listAffinityGroupsCall(projectId, _callback);
	}

	/**
	 * Get the affinity groups setup for a project. Get the affinity groups created in a project.
	 * Affinity groups are an indication of locality of a server relative to another group of
	 * servers. They can be either running on the same host (affinity) or on different ones
	 * (anti-affinity).
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @return AffinityGroupListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List affinity groups. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public AffinityGroupListResponse listAffinityGroups(@javax.annotation.Nonnull UUID projectId)
			throws ApiException {
		ApiResponse<AffinityGroupListResponse> localVarResp =
				listAffinityGroupsWithHttpInfo(projectId);
		return localVarResp.getData();
	}

	/**
	 * Get the affinity groups setup for a project. Get the affinity groups created in a project.
	 * Affinity groups are an indication of locality of a server relative to another group of
	 * servers. They can be either running on the same host (affinity) or on different ones
	 * (anti-affinity).
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @return ApiResponse&lt;AffinityGroupListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List affinity groups. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<AffinityGroupListResponse> listAffinityGroupsWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId) throws ApiException {
		okhttp3.Call localVarCall = listAffinityGroupsValidateBeforeCall(projectId, null);
		Type localVarReturnType = new TypeToken<AffinityGroupListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get the affinity groups setup for a project. (asynchronously) Get the affinity groups created
	 * in a project. Affinity groups are an indication of locality of a server relative to another
	 * group of servers. They can be either running on the same host (affinity) or on different ones
	 * (anti-affinity).
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List affinity groups. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listAffinityGroupsAsync(
			@javax.annotation.Nonnull UUID projectId,
			final ApiCallback<AffinityGroupListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = listAffinityGroupsValidateBeforeCall(projectId, _callback);
		Type localVarReturnType = new TypeToken<AffinityGroupListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listAttachedVolumes
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List volume attachments. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listAttachedVolumesCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/volume-attachments"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listAttachedVolumesValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listAttachedVolumes(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling listAttachedVolumes(Async)");
		}

		return listAttachedVolumesCall(projectId, serverId, _callback);
	}

	/**
	 * List all volume attachments of a server. Get a list of all volume attachments of a server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @return VolumeAttachmentListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List volume attachments. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public VolumeAttachmentListResponse listAttachedVolumes(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		ApiResponse<VolumeAttachmentListResponse> localVarResp =
				listAttachedVolumesWithHttpInfo(projectId, serverId);
		return localVarResp.getData();
	}

	/**
	 * List all volume attachments of a server. Get a list of all volume attachments of a server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @return ApiResponse&lt;VolumeAttachmentListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List volume attachments. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<VolumeAttachmentListResponse> listAttachedVolumesWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		okhttp3.Call localVarCall =
				listAttachedVolumesValidateBeforeCall(projectId, serverId, null);
		Type localVarReturnType = new TypeToken<VolumeAttachmentListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all volume attachments of a server. (asynchronously) Get a list of all volume
	 * attachments of a server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List volume attachments. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listAttachedVolumesAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback<VolumeAttachmentListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listAttachedVolumesValidateBeforeCall(projectId, serverId, _callback);
		Type localVarReturnType = new TypeToken<VolumeAttachmentListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listAvailabilityZones
	 *
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Get a list of availability zones. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listAvailabilityZonesCall(final ApiCallback _callback) throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/v1/availability-zones";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listAvailabilityZonesValidateBeforeCall(final ApiCallback _callback)
			throws ApiException {
		return listAvailabilityZonesCall(_callback);
	}

	/**
	 * List all availability zones. Get a list of all availability zones.
	 *
	 * @return AvailabilityZoneListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Get a list of availability zones. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public AvailabilityZoneListResponse listAvailabilityZones() throws ApiException {
		ApiResponse<AvailabilityZoneListResponse> localVarResp =
				listAvailabilityZonesWithHttpInfo();
		return localVarResp.getData();
	}

	/**
	 * List all availability zones. Get a list of all availability zones.
	 *
	 * @return ApiResponse&lt;AvailabilityZoneListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Get a list of availability zones. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<AvailabilityZoneListResponse> listAvailabilityZonesWithHttpInfo()
			throws ApiException {
		okhttp3.Call localVarCall = listAvailabilityZonesValidateBeforeCall(null);
		Type localVarReturnType = new TypeToken<AvailabilityZoneListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all availability zones. (asynchronously) Get a list of all availability zones.
	 *
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Get a list of availability zones. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listAvailabilityZonesAsync(
			final ApiCallback<AvailabilityZoneListResponse> _callback) throws ApiException {

		okhttp3.Call localVarCall = listAvailabilityZonesValidateBeforeCall(_callback);
		Type localVarReturnType = new TypeToken<AvailabilityZoneListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listBackups
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project backups. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listBackupsCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/backups"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (labelSelector != null) {
			localVarQueryParams.addAll(
					localVarApiClient.parameterToPair("label_selector", labelSelector));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listBackupsValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listBackups(Async)");
		}

		return listBackupsCall(projectId, labelSelector, _callback);
	}

	/**
	 * List all backups inside a project. Get a list of all backups inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return BackupListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project backups. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public BackupListResponse listBackups(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		ApiResponse<BackupListResponse> localVarResp =
				listBackupsWithHttpInfo(projectId, labelSelector);
		return localVarResp.getData();
	}

	/**
	 * List all backups inside a project. Get a list of all backups inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ApiResponse&lt;BackupListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project backups. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<BackupListResponse> listBackupsWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		okhttp3.Call localVarCall = listBackupsValidateBeforeCall(projectId, labelSelector, null);
		Type localVarReturnType = new TypeToken<BackupListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all backups inside a project. (asynchronously) Get a list of all backups inside a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project backups. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listBackupsAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback<BackupListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listBackupsValidateBeforeCall(projectId, labelSelector, _callback);
		Type localVarReturnType = new TypeToken<BackupListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listImages
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param all List all Images. (optional, default to false)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project images. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listImagesCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable Boolean all,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/images"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (all != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
		}

		if (labelSelector != null) {
			localVarQueryParams.addAll(
					localVarApiClient.parameterToPair("label_selector", labelSelector));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listImagesValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable Boolean all,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listImages(Async)");
		}

		return listImagesCall(projectId, all, labelSelector, _callback);
	}

	/**
	 * List all Images inside a project. Get a list of all images inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param all List all Images. (optional, default to false)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ImageListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project images. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ImageListResponse listImages(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable Boolean all,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		ApiResponse<ImageListResponse> localVarResp =
				listImagesWithHttpInfo(projectId, all, labelSelector);
		return localVarResp.getData();
	}

	/**
	 * List all Images inside a project. Get a list of all images inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param all List all Images. (optional, default to false)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ApiResponse&lt;ImageListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project images. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<ImageListResponse> listImagesWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable Boolean all,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		okhttp3.Call localVarCall =
				listImagesValidateBeforeCall(projectId, all, labelSelector, null);
		Type localVarReturnType = new TypeToken<ImageListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all Images inside a project. (asynchronously) Get a list of all images inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param all List all Images. (optional, default to false)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project images. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listImagesAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable Boolean all,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback<ImageListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listImagesValidateBeforeCall(projectId, all, labelSelector, _callback);
		Type localVarReturnType = new TypeToken<ImageListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listKeyPairs
	 *
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List SSH keypairs. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listKeyPairsCall(
			@javax.annotation.Nullable String labelSelector, final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/v1/keypairs";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (labelSelector != null) {
			localVarQueryParams.addAll(
					localVarApiClient.parameterToPair("label_selector", labelSelector));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listKeyPairsValidateBeforeCall(
			@javax.annotation.Nullable String labelSelector, final ApiCallback _callback)
			throws ApiException {
		return listKeyPairsCall(labelSelector, _callback);
	}

	/**
	 * List all SSH keypairs for the requesting user. Get a list of all SSH keypairs assigned to the
	 * requesting user.
	 *
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return KeyPairListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List SSH keypairs. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public KeyPairListResponse listKeyPairs(@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		ApiResponse<KeyPairListResponse> localVarResp = listKeyPairsWithHttpInfo(labelSelector);
		return localVarResp.getData();
	}

	/**
	 * List all SSH keypairs for the requesting user. Get a list of all SSH keypairs assigned to the
	 * requesting user.
	 *
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ApiResponse&lt;KeyPairListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List SSH keypairs. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<KeyPairListResponse> listKeyPairsWithHttpInfo(
			@javax.annotation.Nullable String labelSelector) throws ApiException {
		okhttp3.Call localVarCall = listKeyPairsValidateBeforeCall(labelSelector, null);
		Type localVarReturnType = new TypeToken<KeyPairListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all SSH keypairs for the requesting user. (asynchronously) Get a list of all SSH
	 * keypairs assigned to the requesting user.
	 *
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List SSH keypairs. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listKeyPairsAsync(
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback<KeyPairListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = listKeyPairsValidateBeforeCall(labelSelector, _callback);
		Type localVarReturnType = new TypeToken<KeyPairListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listMachineTypes
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param filter Filter resources by fields. A subset of expr-lang is supported. See
	 *     https://expr-lang.org/docs/language-definition for usage details. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List of machine types. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listMachineTypesCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String filter,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/machine-types"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (filter != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listMachineTypesValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String filter,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listMachineTypes(Async)");
		}

		return listMachineTypesCall(projectId, filter, _callback);
	}

	/**
	 * List all machine types available for a project. Get a list of all machine type available in a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param filter Filter resources by fields. A subset of expr-lang is supported. See
	 *     https://expr-lang.org/docs/language-definition for usage details. (optional)
	 * @return MachineTypeListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List of machine types. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public MachineTypeListResponse listMachineTypes(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nullable String filter)
			throws ApiException {
		ApiResponse<MachineTypeListResponse> localVarResp =
				listMachineTypesWithHttpInfo(projectId, filter);
		return localVarResp.getData();
	}

	/**
	 * List all machine types available for a project. Get a list of all machine type available in a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param filter Filter resources by fields. A subset of expr-lang is supported. See
	 *     https://expr-lang.org/docs/language-definition for usage details. (optional)
	 * @return ApiResponse&lt;MachineTypeListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List of machine types. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<MachineTypeListResponse> listMachineTypesWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nullable String filter)
			throws ApiException {
		okhttp3.Call localVarCall = listMachineTypesValidateBeforeCall(projectId, filter, null);
		Type localVarReturnType = new TypeToken<MachineTypeListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all machine types available for a project. (asynchronously) Get a list of all machine
	 * type available in a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param filter Filter resources by fields. A subset of expr-lang is supported. See
	 *     https://expr-lang.org/docs/language-definition for usage details. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List of machine types. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listMachineTypesAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String filter,
			final ApiCallback<MachineTypeListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listMachineTypesValidateBeforeCall(projectId, filter, _callback);
		Type localVarReturnType = new TypeToken<MachineTypeListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listNetworkAreaProjects
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List projects for a network area. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listNetworkAreaProjectsCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas/{areaId}/projects"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()))
						.replace(
								"{" + "areaId" + "}",
								localVarApiClient.escapeString(areaId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listNetworkAreaProjectsValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling listNetworkAreaProjects(Async)");
		}

		// verify the required parameter 'areaId' is set
		if (areaId == null) {
			throw new ApiException(
					"Missing the required parameter 'areaId' when calling listNetworkAreaProjects(Async)");
		}

		return listNetworkAreaProjectsCall(organizationId, areaId, _callback);
	}

	/**
	 * List all projects using a network area. Get a list of all projects using a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @return ProjectListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List projects for a network area. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ProjectListResponse listNetworkAreaProjects(
			@javax.annotation.Nonnull UUID organizationId, @javax.annotation.Nonnull UUID areaId)
			throws ApiException {
		ApiResponse<ProjectListResponse> localVarResp =
				listNetworkAreaProjectsWithHttpInfo(organizationId, areaId);
		return localVarResp.getData();
	}

	/**
	 * List all projects using a network area. Get a list of all projects using a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @return ApiResponse&lt;ProjectListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List projects for a network area. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<ProjectListResponse> listNetworkAreaProjectsWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId, @javax.annotation.Nonnull UUID areaId)
			throws ApiException {
		okhttp3.Call localVarCall =
				listNetworkAreaProjectsValidateBeforeCall(organizationId, areaId, null);
		Type localVarReturnType = new TypeToken<ProjectListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all projects using a network area. (asynchronously) Get a list of all projects using a
	 * network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List projects for a network area. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listNetworkAreaProjectsAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			final ApiCallback<ProjectListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listNetworkAreaProjectsValidateBeforeCall(organizationId, areaId, _callback);
		Type localVarReturnType = new TypeToken<ProjectListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listNetworkAreaRanges
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all network ranges. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listNetworkAreaRangesCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas/{areaId}/network-ranges"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()))
						.replace(
								"{" + "areaId" + "}",
								localVarApiClient.escapeString(areaId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listNetworkAreaRangesValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling listNetworkAreaRanges(Async)");
		}

		// verify the required parameter 'areaId' is set
		if (areaId == null) {
			throw new ApiException(
					"Missing the required parameter 'areaId' when calling listNetworkAreaRanges(Async)");
		}

		return listNetworkAreaRangesCall(organizationId, areaId, _callback);
	}

	/**
	 * List all network ranges in a network area. Get a list of all network ranges in a network
	 * area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @return NetworkRangeListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all network ranges. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NetworkRangeListResponse listNetworkAreaRanges(
			@javax.annotation.Nonnull UUID organizationId, @javax.annotation.Nonnull UUID areaId)
			throws ApiException {
		ApiResponse<NetworkRangeListResponse> localVarResp =
				listNetworkAreaRangesWithHttpInfo(organizationId, areaId);
		return localVarResp.getData();
	}

	/**
	 * List all network ranges in a network area. Get a list of all network ranges in a network
	 * area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @return ApiResponse&lt;NetworkRangeListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all network ranges. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NetworkRangeListResponse> listNetworkAreaRangesWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId, @javax.annotation.Nonnull UUID areaId)
			throws ApiException {
		okhttp3.Call localVarCall =
				listNetworkAreaRangesValidateBeforeCall(organizationId, areaId, null);
		Type localVarReturnType = new TypeToken<NetworkRangeListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all network ranges in a network area. (asynchronously) Get a list of all network ranges
	 * in a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all network ranges. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listNetworkAreaRangesAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			final ApiCallback<NetworkRangeListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listNetworkAreaRangesValidateBeforeCall(organizationId, areaId, _callback);
		Type localVarReturnType = new TypeToken<NetworkRangeListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listNetworkAreaRoutes
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network routes. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listNetworkAreaRoutesCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas/{areaId}/routes"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()))
						.replace(
								"{" + "areaId" + "}",
								localVarApiClient.escapeString(areaId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (labelSelector != null) {
			localVarQueryParams.addAll(
					localVarApiClient.parameterToPair("label_selector", labelSelector));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listNetworkAreaRoutesValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling listNetworkAreaRoutes(Async)");
		}

		// verify the required parameter 'areaId' is set
		if (areaId == null) {
			throw new ApiException(
					"Missing the required parameter 'areaId' when calling listNetworkAreaRoutes(Async)");
		}

		return listNetworkAreaRoutesCall(organizationId, areaId, labelSelector, _callback);
	}

	/**
	 * List all network routes in a network area. Get a list of all network routes defined in a
	 * network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return RouteListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network routes. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public RouteListResponse listNetworkAreaRoutes(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		ApiResponse<RouteListResponse> localVarResp =
				listNetworkAreaRoutesWithHttpInfo(organizationId, areaId, labelSelector);
		return localVarResp.getData();
	}

	/**
	 * List all network routes in a network area. Get a list of all network routes defined in a
	 * network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ApiResponse&lt;RouteListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network routes. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<RouteListResponse> listNetworkAreaRoutesWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		okhttp3.Call localVarCall =
				listNetworkAreaRoutesValidateBeforeCall(
						organizationId, areaId, labelSelector, null);
		Type localVarReturnType = new TypeToken<RouteListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all network routes in a network area. (asynchronously) Get a list of all network routes
	 * defined in a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network routes. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listNetworkAreaRoutesAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback<RouteListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listNetworkAreaRoutesValidateBeforeCall(
						organizationId, areaId, labelSelector, _callback);
		Type localVarReturnType = new TypeToken<RouteListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listNetworkAreas
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Get a list of all network areas. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listNetworkAreasCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (labelSelector != null) {
			localVarQueryParams.addAll(
					localVarApiClient.parameterToPair("label_selector", labelSelector));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listNetworkAreasValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling listNetworkAreas(Async)");
		}

		return listNetworkAreasCall(organizationId, labelSelector, _callback);
	}

	/**
	 * List all network areas in an organization. Get a list of all visible network areas defined in
	 * an organization.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return NetworkAreaListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Get a list of all network areas. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NetworkAreaListResponse listNetworkAreas(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		ApiResponse<NetworkAreaListResponse> localVarResp =
				listNetworkAreasWithHttpInfo(organizationId, labelSelector);
		return localVarResp.getData();
	}

	/**
	 * List all network areas in an organization. Get a list of all visible network areas defined in
	 * an organization.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ApiResponse&lt;NetworkAreaListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Get a list of all network areas. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NetworkAreaListResponse> listNetworkAreasWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		okhttp3.Call localVarCall =
				listNetworkAreasValidateBeforeCall(organizationId, labelSelector, null);
		Type localVarReturnType = new TypeToken<NetworkAreaListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all network areas in an organization. (asynchronously) Get a list of all visible network
	 * areas defined in an organization.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Get a list of all network areas. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listNetworkAreasAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback<NetworkAreaListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listNetworkAreasValidateBeforeCall(organizationId, labelSelector, _callback);
		Type localVarReturnType = new TypeToken<NetworkAreaListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listNetworks
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all networks of a project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listNetworksCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/networks"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (labelSelector != null) {
			localVarQueryParams.addAll(
					localVarApiClient.parameterToPair("label_selector", labelSelector));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listNetworksValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listNetworks(Async)");
		}

		return listNetworksCall(projectId, labelSelector, _callback);
	}

	/**
	 * List all networks inside a project. Get a list of all networks inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return NetworkListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all networks of a project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NetworkListResponse listNetworks(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		ApiResponse<NetworkListResponse> localVarResp =
				listNetworksWithHttpInfo(projectId, labelSelector);
		return localVarResp.getData();
	}

	/**
	 * List all networks inside a project. Get a list of all networks inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ApiResponse&lt;NetworkListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all networks of a project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NetworkListResponse> listNetworksWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		okhttp3.Call localVarCall = listNetworksValidateBeforeCall(projectId, labelSelector, null);
		Type localVarReturnType = new TypeToken<NetworkListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all networks inside a project. (asynchronously) Get a list of all networks inside a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all networks of a project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listNetworksAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback<NetworkListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listNetworksValidateBeforeCall(projectId, labelSelector, _callback);
		Type localVarReturnType = new TypeToken<NetworkListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listNics
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network interfaces of the network. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listNicsCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/networks/{networkId}/nics"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "networkId" + "}",
								localVarApiClient.escapeString(networkId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (labelSelector != null) {
			localVarQueryParams.addAll(
					localVarApiClient.parameterToPair("label_selector", labelSelector));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listNicsValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listNics(Async)");
		}

		// verify the required parameter 'networkId' is set
		if (networkId == null) {
			throw new ApiException(
					"Missing the required parameter 'networkId' when calling listNics(Async)");
		}

		return listNicsCall(projectId, networkId, labelSelector, _callback);
	}

	/**
	 * List all network interfaces inside a network. Get a list of all network interfaces inside a
	 * network.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return NICListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network interfaces of the network. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NICListResponse listNics(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		ApiResponse<NICListResponse> localVarResp =
				listNicsWithHttpInfo(projectId, networkId, labelSelector);
		return localVarResp.getData();
	}

	/**
	 * List all network interfaces inside a network. Get a list of all network interfaces inside a
	 * network.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ApiResponse&lt;NICListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network interfaces of the network. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NICListResponse> listNicsWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		okhttp3.Call localVarCall =
				listNicsValidateBeforeCall(projectId, networkId, labelSelector, null);
		Type localVarReturnType = new TypeToken<NICListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all network interfaces inside a network. (asynchronously) Get a list of all network
	 * interfaces inside a network.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network interfaces of the network. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listNicsAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback<NICListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listNicsValidateBeforeCall(projectId, networkId, labelSelector, _callback);
		Type localVarReturnType = new TypeToken<NICListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listProjectNICs
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network interfaces of the project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listProjectNICsCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/nics"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (labelSelector != null) {
			localVarQueryParams.addAll(
					localVarApiClient.parameterToPair("label_selector", labelSelector));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listProjectNICsValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listProjectNICs(Async)");
		}

		return listProjectNICsCall(projectId, labelSelector, _callback);
	}

	/**
	 * List all network interfaces inside a project. Get a list of all network interfaces inside a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return NICListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network interfaces of the project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NICListResponse listProjectNICs(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		ApiResponse<NICListResponse> localVarResp =
				listProjectNICsWithHttpInfo(projectId, labelSelector);
		return localVarResp.getData();
	}

	/**
	 * List all network interfaces inside a project. Get a list of all network interfaces inside a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ApiResponse&lt;NICListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network interfaces of the project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NICListResponse> listProjectNICsWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		okhttp3.Call localVarCall =
				listProjectNICsValidateBeforeCall(projectId, labelSelector, null);
		Type localVarReturnType = new TypeToken<NICListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all network interfaces inside a project. (asynchronously) Get a list of all network
	 * interfaces inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network interfaces of the project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listProjectNICsAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback<NICListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listProjectNICsValidateBeforeCall(projectId, labelSelector, _callback);
		Type localVarReturnType = new TypeToken<NICListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listPublicIPRanges
	 *
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List public IP ranges. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listPublicIPRangesCall(final ApiCallback _callback) throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/v1/networks/public-ip-ranges";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listPublicIPRangesValidateBeforeCall(final ApiCallback _callback)
			throws ApiException {
		return listPublicIPRangesCall(_callback);
	}

	/**
	 * List all public IP ranges. Get a list of all public IP ranges that STACKIT uses.
	 *
	 * @return PublicNetworkListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List public IP ranges. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public PublicNetworkListResponse listPublicIPRanges() throws ApiException {
		ApiResponse<PublicNetworkListResponse> localVarResp = listPublicIPRangesWithHttpInfo();
		return localVarResp.getData();
	}

	/**
	 * List all public IP ranges. Get a list of all public IP ranges that STACKIT uses.
	 *
	 * @return ApiResponse&lt;PublicNetworkListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List public IP ranges. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<PublicNetworkListResponse> listPublicIPRangesWithHttpInfo()
			throws ApiException {
		okhttp3.Call localVarCall = listPublicIPRangesValidateBeforeCall(null);
		Type localVarReturnType = new TypeToken<PublicNetworkListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all public IP ranges. (asynchronously) Get a list of all public IP ranges that STACKIT
	 * uses.
	 *
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List public IP ranges. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listPublicIPRangesAsync(
			final ApiCallback<PublicNetworkListResponse> _callback) throws ApiException {

		okhttp3.Call localVarCall = listPublicIPRangesValidateBeforeCall(_callback);
		Type localVarReturnType = new TypeToken<PublicNetworkListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listPublicIPs
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project public IPs. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listPublicIPsCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/public-ips"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (labelSelector != null) {
			localVarQueryParams.addAll(
					localVarApiClient.parameterToPair("label_selector", labelSelector));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listPublicIPsValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listPublicIPs(Async)");
		}

		return listPublicIPsCall(projectId, labelSelector, _callback);
	}

	/**
	 * List all public IPs inside a project. Get a list of all public IPs inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return PublicIpListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project public IPs. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public PublicIpListResponse listPublicIPs(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		ApiResponse<PublicIpListResponse> localVarResp =
				listPublicIPsWithHttpInfo(projectId, labelSelector);
		return localVarResp.getData();
	}

	/**
	 * List all public IPs inside a project. Get a list of all public IPs inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ApiResponse&lt;PublicIpListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project public IPs. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<PublicIpListResponse> listPublicIPsWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		okhttp3.Call localVarCall = listPublicIPsValidateBeforeCall(projectId, labelSelector, null);
		Type localVarReturnType = new TypeToken<PublicIpListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all public IPs inside a project. (asynchronously) Get a list of all public IPs inside a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project public IPs. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listPublicIPsAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback<PublicIpListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listPublicIPsValidateBeforeCall(projectId, labelSelector, _callback);
		Type localVarReturnType = new TypeToken<PublicIpListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listQuotas
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List quotas. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listQuotasCall(
			@javax.annotation.Nonnull UUID projectId, final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/quotas"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listQuotasValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId, final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listQuotas(Async)");
		}

		return listQuotasCall(projectId, _callback);
	}

	/**
	 * List project quotas. List quota limits and usage for project resources.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @return QuotaListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List quotas. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public QuotaListResponse listQuotas(@javax.annotation.Nonnull UUID projectId)
			throws ApiException {
		ApiResponse<QuotaListResponse> localVarResp = listQuotasWithHttpInfo(projectId);
		return localVarResp.getData();
	}

	/**
	 * List project quotas. List quota limits and usage for project resources.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @return ApiResponse&lt;QuotaListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List quotas. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<QuotaListResponse> listQuotasWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId) throws ApiException {
		okhttp3.Call localVarCall = listQuotasValidateBeforeCall(projectId, null);
		Type localVarReturnType = new TypeToken<QuotaListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List project quotas. (asynchronously) List quota limits and usage for project resources.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List quotas. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listQuotasAsync(
			@javax.annotation.Nonnull UUID projectId,
			final ApiCallback<QuotaListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = listQuotasValidateBeforeCall(projectId, _callback);
		Type localVarReturnType = new TypeToken<QuotaListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listSecurityGroupRules
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all rules of a security group. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listSecurityGroupRulesCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/security-groups/{securityGroupId}/rules"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "securityGroupId" + "}",
								localVarApiClient.escapeString(securityGroupId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listSecurityGroupRulesValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listSecurityGroupRules(Async)");
		}

		// verify the required parameter 'securityGroupId' is set
		if (securityGroupId == null) {
			throw new ApiException(
					"Missing the required parameter 'securityGroupId' when calling listSecurityGroupRules(Async)");
		}

		return listSecurityGroupRulesCall(projectId, securityGroupId, _callback);
	}

	/**
	 * List all rules for a security group. Get a list of all rules inside a security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @return SecurityGroupRuleListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all rules of a security group. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public SecurityGroupRuleListResponse listSecurityGroupRules(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId)
			throws ApiException {
		ApiResponse<SecurityGroupRuleListResponse> localVarResp =
				listSecurityGroupRulesWithHttpInfo(projectId, securityGroupId);
		return localVarResp.getData();
	}

	/**
	 * List all rules for a security group. Get a list of all rules inside a security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @return ApiResponse&lt;SecurityGroupRuleListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all rules of a security group. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<SecurityGroupRuleListResponse> listSecurityGroupRulesWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId)
			throws ApiException {
		okhttp3.Call localVarCall =
				listSecurityGroupRulesValidateBeforeCall(projectId, securityGroupId, null);
		Type localVarReturnType = new TypeToken<SecurityGroupRuleListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all rules for a security group. (asynchronously) Get a list of all rules inside a
	 * security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all rules of a security group. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listSecurityGroupRulesAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback<SecurityGroupRuleListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listSecurityGroupRulesValidateBeforeCall(projectId, securityGroupId, _callback);
		Type localVarReturnType = new TypeToken<SecurityGroupRuleListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listSecurityGroups
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all security groups of a project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listSecurityGroupsCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/security-groups"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (labelSelector != null) {
			localVarQueryParams.addAll(
					localVarApiClient.parameterToPair("label_selector", labelSelector));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listSecurityGroupsValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listSecurityGroups(Async)");
		}

		return listSecurityGroupsCall(projectId, labelSelector, _callback);
	}

	/**
	 * List all security groups inside a project. Get a list of all security groups inside a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return SecurityGroupListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all security groups of a project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public SecurityGroupListResponse listSecurityGroups(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		ApiResponse<SecurityGroupListResponse> localVarResp =
				listSecurityGroupsWithHttpInfo(projectId, labelSelector);
		return localVarResp.getData();
	}

	/**
	 * List all security groups inside a project. Get a list of all security groups inside a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ApiResponse&lt;SecurityGroupListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all security groups of a project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<SecurityGroupListResponse> listSecurityGroupsWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		okhttp3.Call localVarCall =
				listSecurityGroupsValidateBeforeCall(projectId, labelSelector, null);
		Type localVarReturnType = new TypeToken<SecurityGroupListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all security groups inside a project. (asynchronously) Get a list of all security groups
	 * inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all security groups of a project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listSecurityGroupsAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback<SecurityGroupListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listSecurityGroupsValidateBeforeCall(projectId, labelSelector, _callback);
		Type localVarReturnType = new TypeToken<SecurityGroupListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listServerNics
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network interfaces. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listServerNicsCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/nics"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listServerNicsValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listServerNics(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling listServerNics(Async)");
		}

		return listServerNicsCall(projectId, serverId, _callback);
	}

	/**
	 * Get all network interfaces. Get all network interfaces attached to the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @return NICListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network interfaces. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NICListResponse listServerNics(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		ApiResponse<NICListResponse> localVarResp = listServerNicsWithHttpInfo(projectId, serverId);
		return localVarResp.getData();
	}

	/**
	 * Get all network interfaces. Get all network interfaces attached to the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @return ApiResponse&lt;NICListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network interfaces. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NICListResponse> listServerNicsWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		okhttp3.Call localVarCall = listServerNicsValidateBeforeCall(projectId, serverId, null);
		Type localVarReturnType = new TypeToken<NICListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Get all network interfaces. (asynchronously) Get all network interfaces attached to the
	 * server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List network interfaces. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listServerNicsAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback<NICListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listServerNicsValidateBeforeCall(projectId, serverId, _callback);
		Type localVarReturnType = new TypeToken<NICListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listServerServiceAccounts
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List service accounts. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listServerServiceAccountsCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/service-accounts"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listServerServiceAccountsValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listServerServiceAccounts(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling listServerServiceAccounts(Async)");
		}

		return listServerServiceAccountsCall(projectId, serverId, _callback);
	}

	/**
	 * List all service accounts of the Server. Get the list of the service accounts of the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @return ServiceAccountMailListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List service accounts. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ServiceAccountMailListResponse listServerServiceAccounts(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		ApiResponse<ServiceAccountMailListResponse> localVarResp =
				listServerServiceAccountsWithHttpInfo(projectId, serverId);
		return localVarResp.getData();
	}

	/**
	 * List all service accounts of the Server. Get the list of the service accounts of the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @return ApiResponse&lt;ServiceAccountMailListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List service accounts. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<ServiceAccountMailListResponse> listServerServiceAccountsWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		okhttp3.Call localVarCall =
				listServerServiceAccountsValidateBeforeCall(projectId, serverId, null);
		Type localVarReturnType = new TypeToken<ServiceAccountMailListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all service accounts of the Server. (asynchronously) Get the list of the service
	 * accounts of the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List service accounts. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listServerServiceAccountsAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback<ServiceAccountMailListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listServerServiceAccountsValidateBeforeCall(projectId, serverId, _callback);
		Type localVarReturnType = new TypeToken<ServiceAccountMailListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listServers
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param details Show detailed information about server. (optional, default to false)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all servers of a project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listServersCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable Boolean details,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (details != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
		}

		if (labelSelector != null) {
			localVarQueryParams.addAll(
					localVarApiClient.parameterToPair("label_selector", labelSelector));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listServersValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable Boolean details,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listServers(Async)");
		}

		return listServersCall(projectId, details, labelSelector, _callback);
	}

	/**
	 * List all servers inside a project. Get a list of all servers inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param details Show detailed information about server. (optional, default to false)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ServerListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all servers of a project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ServerListResponse listServers(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable Boolean details,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		ApiResponse<ServerListResponse> localVarResp =
				listServersWithHttpInfo(projectId, details, labelSelector);
		return localVarResp.getData();
	}

	/**
	 * List all servers inside a project. Get a list of all servers inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param details Show detailed information about server. (optional, default to false)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ApiResponse&lt;ServerListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all servers of a project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<ServerListResponse> listServersWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable Boolean details,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		okhttp3.Call localVarCall =
				listServersValidateBeforeCall(projectId, details, labelSelector, null);
		Type localVarReturnType = new TypeToken<ServerListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all servers inside a project. (asynchronously) Get a list of all servers inside a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param details Show detailed information about server. (optional, default to false)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List all servers of a project. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listServersAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable Boolean details,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback<ServerListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listServersValidateBeforeCall(projectId, details, labelSelector, _callback);
		Type localVarReturnType = new TypeToken<ServerListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listSnapshots
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project snapshots. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listSnapshotsCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/snapshots"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (labelSelector != null) {
			localVarQueryParams.addAll(
					localVarApiClient.parameterToPair("label_selector", labelSelector));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listSnapshotsValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listSnapshots(Async)");
		}

		return listSnapshotsCall(projectId, labelSelector, _callback);
	}

	/**
	 * List all snapshots inside a project. Get a list of all snapshots inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return SnapshotListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project snapshots. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public SnapshotListResponse listSnapshots(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		ApiResponse<SnapshotListResponse> localVarResp =
				listSnapshotsWithHttpInfo(projectId, labelSelector);
		return localVarResp.getData();
	}

	/**
	 * List all snapshots inside a project. Get a list of all snapshots inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ApiResponse&lt;SnapshotListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project snapshots. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<SnapshotListResponse> listSnapshotsWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		okhttp3.Call localVarCall = listSnapshotsValidateBeforeCall(projectId, labelSelector, null);
		Type localVarReturnType = new TypeToken<SnapshotListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all snapshots inside a project. (asynchronously) Get a list of all snapshots inside a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project snapshots. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listSnapshotsAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback<SnapshotListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listSnapshotsValidateBeforeCall(projectId, labelSelector, _callback);
		Type localVarReturnType = new TypeToken<SnapshotListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listVolumePerformanceClasses
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List volume performance classes. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listVolumePerformanceClassesCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/volume-performance-classes"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (labelSelector != null) {
			localVarQueryParams.addAll(
					localVarApiClient.parameterToPair("label_selector", labelSelector));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listVolumePerformanceClassesValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listVolumePerformanceClasses(Async)");
		}

		return listVolumePerformanceClassesCall(projectId, labelSelector, _callback);
	}

	/**
	 * List all volume performance classes available for a project. Get a list of all volume
	 * performance classes available inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return VolumePerformanceClassListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List volume performance classes. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public VolumePerformanceClassListResponse listVolumePerformanceClasses(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		ApiResponse<VolumePerformanceClassListResponse> localVarResp =
				listVolumePerformanceClassesWithHttpInfo(projectId, labelSelector);
		return localVarResp.getData();
	}

	/**
	 * List all volume performance classes available for a project. Get a list of all volume
	 * performance classes available inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ApiResponse&lt;VolumePerformanceClassListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List volume performance classes. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<VolumePerformanceClassListResponse> listVolumePerformanceClassesWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		okhttp3.Call localVarCall =
				listVolumePerformanceClassesValidateBeforeCall(projectId, labelSelector, null);
		Type localVarReturnType = new TypeToken<VolumePerformanceClassListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all volume performance classes available for a project. (asynchronously) Get a list of
	 * all volume performance classes available inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List volume performance classes. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listVolumePerformanceClassesAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback<VolumePerformanceClassListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listVolumePerformanceClassesValidateBeforeCall(projectId, labelSelector, _callback);
		Type localVarReturnType = new TypeToken<VolumePerformanceClassListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for listVolumes
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project volumes. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listVolumesCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/volumes"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (labelSelector != null) {
			localVarQueryParams.addAll(
					localVarApiClient.parameterToPair("label_selector", labelSelector));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"GET",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call listVolumesValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling listVolumes(Async)");
		}

		return listVolumesCall(projectId, labelSelector, _callback);
	}

	/**
	 * List all volumes inside a project. Get a list of all volumes inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return VolumeListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project volumes. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public VolumeListResponse listVolumes(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		ApiResponse<VolumeListResponse> localVarResp =
				listVolumesWithHttpInfo(projectId, labelSelector);
		return localVarResp.getData();
	}

	/**
	 * List all volumes inside a project. Get a list of all volumes inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @return ApiResponse&lt;VolumeListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project volumes. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<VolumeListResponse> listVolumesWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector)
			throws ApiException {
		okhttp3.Call localVarCall = listVolumesValidateBeforeCall(projectId, labelSelector, null);
		Type localVarReturnType = new TypeToken<VolumeListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * List all volumes inside a project. (asynchronously) Get a list of all volumes inside a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param labelSelector Filter resources by labels. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> List project volumes. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call listVolumesAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nullable String labelSelector,
			final ApiCallback<VolumeListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				listVolumesValidateBeforeCall(projectId, labelSelector, _callback);
		Type localVarReturnType = new TypeToken<VolumeListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for partialUpdateNetwork
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param partialUpdateNetworkPayload Request an update of a network. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> An update was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call partialUpdateNetworkCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull PartialUpdateNetworkPayload partialUpdateNetworkPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = partialUpdateNetworkPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/networks/{networkId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "networkId" + "}",
								localVarApiClient.escapeString(networkId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PATCH",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call partialUpdateNetworkValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull PartialUpdateNetworkPayload partialUpdateNetworkPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling partialUpdateNetwork(Async)");
		}

		// verify the required parameter 'networkId' is set
		if (networkId == null) {
			throw new ApiException(
					"Missing the required parameter 'networkId' when calling partialUpdateNetwork(Async)");
		}

		// verify the required parameter 'partialUpdateNetworkPayload' is set
		if (partialUpdateNetworkPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'partialUpdateNetworkPayload' when calling partialUpdateNetwork(Async)");
		}

		return partialUpdateNetworkCall(
				projectId, networkId, partialUpdateNetworkPayload, _callback);
	}

	/**
	 * Update network settings. Update the settings of a network inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param partialUpdateNetworkPayload Request an update of a network. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> An update was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void partialUpdateNetwork(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull PartialUpdateNetworkPayload partialUpdateNetworkPayload)
			throws ApiException {
		partialUpdateNetworkWithHttpInfo(projectId, networkId, partialUpdateNetworkPayload);
	}

	/**
	 * Update network settings. Update the settings of a network inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param partialUpdateNetworkPayload Request an update of a network. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> An update was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> partialUpdateNetworkWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull PartialUpdateNetworkPayload partialUpdateNetworkPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				partialUpdateNetworkValidateBeforeCall(
						projectId, networkId, partialUpdateNetworkPayload, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Update network settings. (asynchronously) Update the settings of a network inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param partialUpdateNetworkPayload Request an update of a network. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> An update was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call partialUpdateNetworkAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull PartialUpdateNetworkPayload partialUpdateNetworkPayload,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				partialUpdateNetworkValidateBeforeCall(
						projectId, networkId, partialUpdateNetworkPayload, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for partialUpdateNetworkArea
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param partialUpdateNetworkAreaPayload Request to update an area. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Area has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call partialUpdateNetworkAreaCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull
					PartialUpdateNetworkAreaPayload partialUpdateNetworkAreaPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = partialUpdateNetworkAreaPayload;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas/{areaId}"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()))
						.replace(
								"{" + "areaId" + "}",
								localVarApiClient.escapeString(areaId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PATCH",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call partialUpdateNetworkAreaValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull
					PartialUpdateNetworkAreaPayload partialUpdateNetworkAreaPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling partialUpdateNetworkArea(Async)");
		}

		// verify the required parameter 'areaId' is set
		if (areaId == null) {
			throw new ApiException(
					"Missing the required parameter 'areaId' when calling partialUpdateNetworkArea(Async)");
		}

		// verify the required parameter 'partialUpdateNetworkAreaPayload' is set
		if (partialUpdateNetworkAreaPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'partialUpdateNetworkAreaPayload' when calling partialUpdateNetworkArea(Async)");
		}

		return partialUpdateNetworkAreaCall(
				organizationId, areaId, partialUpdateNetworkAreaPayload, _callback);
	}

	/**
	 * Update network area settings. Update the settings of a network area in an organization.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param partialUpdateNetworkAreaPayload Request to update an area. (required)
	 * @return NetworkArea
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Area has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NetworkArea partialUpdateNetworkArea(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull
					PartialUpdateNetworkAreaPayload partialUpdateNetworkAreaPayload)
			throws ApiException {
		ApiResponse<NetworkArea> localVarResp =
				partialUpdateNetworkAreaWithHttpInfo(
						organizationId, areaId, partialUpdateNetworkAreaPayload);
		return localVarResp.getData();
	}

	/**
	 * Update network area settings. Update the settings of a network area in an organization.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param partialUpdateNetworkAreaPayload Request to update an area. (required)
	 * @return ApiResponse&lt;NetworkArea&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Area has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NetworkArea> partialUpdateNetworkAreaWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull
					PartialUpdateNetworkAreaPayload partialUpdateNetworkAreaPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				partialUpdateNetworkAreaValidateBeforeCall(
						organizationId, areaId, partialUpdateNetworkAreaPayload, null);
		Type localVarReturnType = new TypeToken<NetworkArea>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update network area settings. (asynchronously) Update the settings of a network area in an
	 * organization.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param partialUpdateNetworkAreaPayload Request to update an area. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Area has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call partialUpdateNetworkAreaAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull
					PartialUpdateNetworkAreaPayload partialUpdateNetworkAreaPayload,
			final ApiCallback<NetworkArea> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				partialUpdateNetworkAreaValidateBeforeCall(
						organizationId, areaId, partialUpdateNetworkAreaPayload, _callback);
		Type localVarReturnType = new TypeToken<NetworkArea>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for rebootServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param action Defines if it is a soft or a hard reboot. (optional, default to soft)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server reboot request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call rebootServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable String action,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/reboot"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (action != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
		}

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call rebootServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable String action,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling rebootServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling rebootServer(Async)");
		}

		return rebootServerCall(projectId, serverId, action, _callback);
	}

	/**
	 * Reboot the server. Reboot the server. A soft reboot will attempt to gracefully shut down the
	 * server by passing the command to the operating system. A hard reboot will power cycle the
	 * server without waiting for the operating system to shutdown properly.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param action Defines if it is a soft or a hard reboot. (optional, default to soft)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server reboot request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void rebootServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable String action)
			throws ApiException {
		rebootServerWithHttpInfo(projectId, serverId, action);
	}

	/**
	 * Reboot the server. Reboot the server. A soft reboot will attempt to gracefully shut down the
	 * server by passing the command to the operating system. A hard reboot will power cycle the
	 * server without waiting for the operating system to shutdown properly.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param action Defines if it is a soft or a hard reboot. (optional, default to soft)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server reboot request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> rebootServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable String action)
			throws ApiException {
		okhttp3.Call localVarCall =
				rebootServerValidateBeforeCall(projectId, serverId, action, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Reboot the server. (asynchronously) Reboot the server. A soft reboot will attempt to
	 * gracefully shut down the server by passing the command to the operating system. A hard reboot
	 * will power cycle the server without waiting for the operating system to shutdown properly.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param action Defines if it is a soft or a hard reboot. (optional, default to soft)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server reboot request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call rebootServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nullable String action,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				rebootServerValidateBeforeCall(projectId, serverId, action, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for removeNetworkFromServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Detach and delete network interface was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call removeNetworkFromServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID networkId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/networks/{networkId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()))
						.replace(
								"{" + "networkId" + "}",
								localVarApiClient.escapeString(networkId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call removeNetworkFromServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID networkId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling removeNetworkFromServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling removeNetworkFromServer(Async)");
		}

		// verify the required parameter 'networkId' is set
		if (networkId == null) {
			throw new ApiException(
					"Missing the required parameter 'networkId' when calling removeNetworkFromServer(Async)");
		}

		return removeNetworkFromServerCall(projectId, serverId, networkId, _callback);
	}

	/**
	 * Detach and delete all network interfaces associated with the specified network. Detach and
	 * delete all network interfaces associated with the specified network from the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Detach and delete network interface was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void removeNetworkFromServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID networkId)
			throws ApiException {
		removeNetworkFromServerWithHttpInfo(projectId, serverId, networkId);
	}

	/**
	 * Detach and delete all network interfaces associated with the specified network. Detach and
	 * delete all network interfaces associated with the specified network from the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Detach and delete network interface was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> removeNetworkFromServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID networkId)
			throws ApiException {
		okhttp3.Call localVarCall =
				removeNetworkFromServerValidateBeforeCall(projectId, serverId, networkId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Detach and delete all network interfaces associated with the specified network.
	 * (asynchronously) Detach and delete all network interfaces associated with the specified
	 * network from the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Detach and delete network interface was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call removeNetworkFromServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID networkId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				removeNetworkFromServerValidateBeforeCall(
						projectId, serverId, networkId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for removeNicFromServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Network interface detachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call removeNicFromServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/nics/{nicId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()))
						.replace(
								"{" + "nicId" + "}",
								localVarApiClient.escapeString(nicId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call removeNicFromServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling removeNicFromServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling removeNicFromServer(Async)");
		}

		// verify the required parameter 'nicId' is set
		if (nicId == null) {
			throw new ApiException(
					"Missing the required parameter 'nicId' when calling removeNicFromServer(Async)");
		}

		return removeNicFromServerCall(projectId, serverId, nicId, _callback);
	}

	/**
	 * Detach a network interface. Detach a network interface from a server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Network interface detachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void removeNicFromServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID nicId)
			throws ApiException {
		removeNicFromServerWithHttpInfo(projectId, serverId, nicId);
	}

	/**
	 * Detach a network interface. Detach a network interface from a server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Network interface detachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> removeNicFromServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID nicId)
			throws ApiException {
		okhttp3.Call localVarCall =
				removeNicFromServerValidateBeforeCall(projectId, serverId, nicId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Detach a network interface. (asynchronously) Detach a network interface from a server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Network interface detachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call removeNicFromServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID nicId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				removeNicFromServerValidateBeforeCall(projectId, serverId, nicId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for removePublicIpFromServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Detach Public IP from server was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The server or public IP was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call removePublicIpFromServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID publicIpId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/public-ips/{publicIpId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()))
						.replace(
								"{" + "publicIpId" + "}",
								localVarApiClient.escapeString(publicIpId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call removePublicIpFromServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID publicIpId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling removePublicIpFromServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling removePublicIpFromServer(Async)");
		}

		// verify the required parameter 'publicIpId' is set
		if (publicIpId == null) {
			throw new ApiException(
					"Missing the required parameter 'publicIpId' when calling removePublicIpFromServer(Async)");
		}

		return removePublicIpFromServerCall(projectId, serverId, publicIpId, _callback);
	}

	/**
	 * Dissociate a public IP from a server. Dissociate a public IP on an existing server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Detach Public IP from server was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The server or public IP was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void removePublicIpFromServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID publicIpId)
			throws ApiException {
		removePublicIpFromServerWithHttpInfo(projectId, serverId, publicIpId);
	}

	/**
	 * Dissociate a public IP from a server. Dissociate a public IP on an existing server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Detach Public IP from server was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The server or public IP was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> removePublicIpFromServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID publicIpId)
			throws ApiException {
		okhttp3.Call localVarCall =
				removePublicIpFromServerValidateBeforeCall(projectId, serverId, publicIpId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Dissociate a public IP from a server. (asynchronously) Dissociate a public IP on an existing
	 * server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Detach Public IP from server was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The server or public IP was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call removePublicIpFromServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID publicIpId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				removePublicIpFromServerValidateBeforeCall(
						projectId, serverId, publicIpId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for removeSecurityGroupFromServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Security group detachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call removeSecurityGroupFromServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/security-groups/{securityGroupId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()))
						.replace(
								"{" + "securityGroupId" + "}",
								localVarApiClient.escapeString(securityGroupId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call removeSecurityGroupFromServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling removeSecurityGroupFromServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling removeSecurityGroupFromServer(Async)");
		}

		// verify the required parameter 'securityGroupId' is set
		if (securityGroupId == null) {
			throw new ApiException(
					"Missing the required parameter 'securityGroupId' when calling removeSecurityGroupFromServer(Async)");
		}

		return removeSecurityGroupFromServerCall(projectId, serverId, securityGroupId, _callback);
	}

	/**
	 * Remove a server from a security group. Remove a server from a attached security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Security group detachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void removeSecurityGroupFromServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID securityGroupId)
			throws ApiException {
		removeSecurityGroupFromServerWithHttpInfo(projectId, serverId, securityGroupId);
	}

	/**
	 * Remove a server from a security group. Remove a server from a attached security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Security group detachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> removeSecurityGroupFromServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID securityGroupId)
			throws ApiException {
		okhttp3.Call localVarCall =
				removeSecurityGroupFromServerValidateBeforeCall(
						projectId, serverId, securityGroupId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Remove a server from a security group. (asynchronously) Remove a server from a attached
	 * security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Security group detachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call removeSecurityGroupFromServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID securityGroupId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				removeSecurityGroupFromServerValidateBeforeCall(
						projectId, serverId, securityGroupId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for removeServiceAccountFromServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param serviceAccountMail The e-mail address of a service account. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Service account detached from the server. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call removeServiceAccountFromServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull String serviceAccountMail,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/service-accounts/{serviceAccountMail}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()))
						.replace(
								"{" + "serviceAccountMail" + "}",
								localVarApiClient.escapeString(serviceAccountMail.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call removeServiceAccountFromServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull String serviceAccountMail,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling removeServiceAccountFromServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling removeServiceAccountFromServer(Async)");
		}

		// verify the required parameter 'serviceAccountMail' is set
		if (serviceAccountMail == null) {
			throw new ApiException(
					"Missing the required parameter 'serviceAccountMail' when calling removeServiceAccountFromServer(Async)");
		}

		return removeServiceAccountFromServerCall(
				projectId, serverId, serviceAccountMail, _callback);
	}

	/**
	 * Detach a service account from a server. Detach an additional service account from the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param serviceAccountMail The e-mail address of a service account. (required)
	 * @return ServiceAccountMailListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Service account detached from the server. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ServiceAccountMailListResponse removeServiceAccountFromServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull String serviceAccountMail)
			throws ApiException {
		ApiResponse<ServiceAccountMailListResponse> localVarResp =
				removeServiceAccountFromServerWithHttpInfo(projectId, serverId, serviceAccountMail);
		return localVarResp.getData();
	}

	/**
	 * Detach a service account from a server. Detach an additional service account from the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param serviceAccountMail The e-mail address of a service account. (required)
	 * @return ApiResponse&lt;ServiceAccountMailListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Service account detached from the server. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<ServiceAccountMailListResponse> removeServiceAccountFromServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull String serviceAccountMail)
			throws ApiException {
		okhttp3.Call localVarCall =
				removeServiceAccountFromServerValidateBeforeCall(
						projectId, serverId, serviceAccountMail, null);
		Type localVarReturnType = new TypeToken<ServiceAccountMailListResponse>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Detach a service account from a server. (asynchronously) Detach an additional service account
	 * from the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param serviceAccountMail The e-mail address of a service account. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Service account detached from the server. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call removeServiceAccountFromServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull String serviceAccountMail,
			final ApiCallback<ServiceAccountMailListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				removeServiceAccountFromServerValidateBeforeCall(
						projectId, serverId, serviceAccountMail, _callback);
		Type localVarReturnType = new TypeToken<ServiceAccountMailListResponse>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for removeVolumeFromServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Volume detachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call removeVolumeFromServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/volume-attachments/{volumeId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()))
						.replace(
								"{" + "volumeId" + "}",
								localVarApiClient.escapeString(volumeId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call removeVolumeFromServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling removeVolumeFromServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling removeVolumeFromServer(Async)");
		}

		// verify the required parameter 'volumeId' is set
		if (volumeId == null) {
			throw new ApiException(
					"Missing the required parameter 'volumeId' when calling removeVolumeFromServer(Async)");
		}

		return removeVolumeFromServerCall(projectId, serverId, volumeId, _callback);
	}

	/**
	 * Detach a volume from a server. Detach an existing volume from an existing server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Volume detachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void removeVolumeFromServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId)
			throws ApiException {
		removeVolumeFromServerWithHttpInfo(projectId, serverId, volumeId);
	}

	/**
	 * Detach a volume from a server. Detach an existing volume from an existing server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Volume detachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> removeVolumeFromServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId)
			throws ApiException {
		okhttp3.Call localVarCall =
				removeVolumeFromServerValidateBeforeCall(projectId, serverId, volumeId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Detach a volume from a server. (asynchronously) Detach an existing volume from an existing
	 * server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 204 </td><td> Volume detachment request was accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call removeVolumeFromServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				removeVolumeFromServerValidateBeforeCall(projectId, serverId, volumeId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for rescueServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param rescueServerPayload Request a server rescue. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server rescue request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call rescueServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull RescueServerPayload rescueServerPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = rescueServerPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/rescue"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call rescueServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull RescueServerPayload rescueServerPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling rescueServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling rescueServer(Async)");
		}

		// verify the required parameter 'rescueServerPayload' is set
		if (rescueServerPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'rescueServerPayload' when calling rescueServer(Async)");
		}

		return rescueServerCall(projectId, serverId, rescueServerPayload, _callback);
	}

	/**
	 * Rescue an existing server. Rescue an existing server. It is shutdown and the initial image is
	 * attached as the boot volume, while the boot volume is attached as secondary volume and the
	 * server is booted.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param rescueServerPayload Request a server rescue. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server rescue request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void rescueServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull RescueServerPayload rescueServerPayload)
			throws ApiException {
		rescueServerWithHttpInfo(projectId, serverId, rescueServerPayload);
	}

	/**
	 * Rescue an existing server. Rescue an existing server. It is shutdown and the initial image is
	 * attached as the boot volume, while the boot volume is attached as secondary volume and the
	 * server is booted.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param rescueServerPayload Request a server rescue. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server rescue request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> rescueServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull RescueServerPayload rescueServerPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				rescueServerValidateBeforeCall(projectId, serverId, rescueServerPayload, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Rescue an existing server. (asynchronously) Rescue an existing server. It is shutdown and the
	 * initial image is attached as the boot volume, while the boot volume is attached as secondary
	 * volume and the server is booted.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param rescueServerPayload Request a server rescue. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server rescue request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call rescueServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull RescueServerPayload rescueServerPayload,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				rescueServerValidateBeforeCall(projectId, serverId, rescueServerPayload, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for resizeServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param resizeServerPayload Request a resize of a server. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server resize request is accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call resizeServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull ResizeServerPayload resizeServerPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = resizeServerPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/resize"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call resizeServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull ResizeServerPayload resizeServerPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling resizeServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling resizeServer(Async)");
		}

		// verify the required parameter 'resizeServerPayload' is set
		if (resizeServerPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'resizeServerPayload' when calling resizeServer(Async)");
		}

		return resizeServerCall(projectId, serverId, resizeServerPayload, _callback);
	}

	/**
	 * Resize a server. Resize the server to the given machine type.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param resizeServerPayload Request a resize of a server. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server resize request is accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void resizeServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull ResizeServerPayload resizeServerPayload)
			throws ApiException {
		resizeServerWithHttpInfo(projectId, serverId, resizeServerPayload);
	}

	/**
	 * Resize a server. Resize the server to the given machine type.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param resizeServerPayload Request a resize of a server. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server resize request is accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> resizeServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull ResizeServerPayload resizeServerPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				resizeServerValidateBeforeCall(projectId, serverId, resizeServerPayload, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Resize a server. (asynchronously) Resize the server to the given machine type.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param resizeServerPayload Request a resize of a server. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server resize request is accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call resizeServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull ResizeServerPayload resizeServerPayload,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				resizeServerValidateBeforeCall(projectId, serverId, resizeServerPayload, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for resizeVolume
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param resizeVolumePayload Request a volume resize. (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Volume resize request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call resizeVolumeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nullable ResizeVolumePayload resizeVolumePayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = resizeVolumePayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/volumes/{volumeId}/resize"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "volumeId" + "}",
								localVarApiClient.escapeString(volumeId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call resizeVolumeValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nullable ResizeVolumePayload resizeVolumePayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling resizeVolume(Async)");
		}

		// verify the required parameter 'volumeId' is set
		if (volumeId == null) {
			throw new ApiException(
					"Missing the required parameter 'volumeId' when calling resizeVolume(Async)");
		}

		return resizeVolumeCall(projectId, volumeId, resizeVolumePayload, _callback);
	}

	/**
	 * Update the size of a volume. Update the size of a block device volume. The new volume size
	 * must be larger than the current size.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param resizeVolumePayload Request a volume resize. (optional)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Volume resize request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void resizeVolume(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nullable ResizeVolumePayload resizeVolumePayload)
			throws ApiException {
		resizeVolumeWithHttpInfo(projectId, volumeId, resizeVolumePayload);
	}

	/**
	 * Update the size of a volume. Update the size of a block device volume. The new volume size
	 * must be larger than the current size.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param resizeVolumePayload Request a volume resize. (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Volume resize request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> resizeVolumeWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nullable ResizeVolumePayload resizeVolumePayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				resizeVolumeValidateBeforeCall(projectId, volumeId, resizeVolumePayload, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Update the size of a volume. (asynchronously) Update the size of a block device volume. The
	 * new volume size must be larger than the current size.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param resizeVolumePayload Request a volume resize. (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Volume resize request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call resizeVolumeAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nullable ResizeVolumePayload resizeVolumePayload,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				resizeVolumeValidateBeforeCall(projectId, volumeId, resizeVolumePayload, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for restoreBackup
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Backup restore request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call restoreBackupCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/backups/{backupId}/restore"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "backupId" + "}",
								localVarApiClient.escapeString(backupId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call restoreBackupValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling restoreBackup(Async)");
		}

		// verify the required parameter 'backupId' is set
		if (backupId == null) {
			throw new ApiException(
					"Missing the required parameter 'backupId' when calling restoreBackup(Async)");
		}

		return restoreBackupCall(projectId, backupId, _callback);
	}

	/**
	 * Restore Backup to the referenced source Volume. Restores a Backup to the existing Volume it
	 * references to. The use of this endpoint is disruptive as the volume needs to be detached. If
	 * a new volume is to be created use the volumes endpoint with the option to create from backup.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Backup restore request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void restoreBackup(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID backupId)
			throws ApiException {
		restoreBackupWithHttpInfo(projectId, backupId);
	}

	/**
	 * Restore Backup to the referenced source Volume. Restores a Backup to the existing Volume it
	 * references to. The use of this endpoint is disruptive as the volume needs to be detached. If
	 * a new volume is to be created use the volumes endpoint with the option to create from backup.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Backup restore request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> restoreBackupWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID backupId)
			throws ApiException {
		okhttp3.Call localVarCall = restoreBackupValidateBeforeCall(projectId, backupId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Restore Backup to the referenced source Volume. (asynchronously) Restores a Backup to the
	 * existing Volume it references to. The use of this endpoint is disruptive as the volume needs
	 * to be detached. If a new volume is to be created use the volumes endpoint with the option to
	 * create from backup.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Backup restore request has been accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call restoreBackupAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = restoreBackupValidateBeforeCall(projectId, backupId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for setImageShare
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param setImageSharePayload Settings for an Image Share. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Setting Image share successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call setImageShareCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull SetImageSharePayload setImageSharePayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = setImageSharePayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/images/{imageId}/share"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "imageId" + "}",
								localVarApiClient.escapeString(imageId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PUT",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call setImageShareValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull SetImageSharePayload setImageSharePayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling setImageShare(Async)");
		}

		// verify the required parameter 'imageId' is set
		if (imageId == null) {
			throw new ApiException(
					"Missing the required parameter 'imageId' when calling setImageShare(Async)");
		}

		// verify the required parameter 'setImageSharePayload' is set
		if (setImageSharePayload == null) {
			throw new ApiException(
					"Missing the required parameter 'setImageSharePayload' when calling setImageShare(Async)");
		}

		return setImageShareCall(projectId, imageId, setImageSharePayload, _callback);
	}

	/**
	 * Set image share. Set share of an Image. New Options will replace existing settings.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param setImageSharePayload Settings for an Image Share. (required)
	 * @return ImageShare
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Setting Image share successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ImageShare setImageShare(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull SetImageSharePayload setImageSharePayload)
			throws ApiException {
		ApiResponse<ImageShare> localVarResp =
				setImageShareWithHttpInfo(projectId, imageId, setImageSharePayload);
		return localVarResp.getData();
	}

	/**
	 * Set image share. Set share of an Image. New Options will replace existing settings.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param setImageSharePayload Settings for an Image Share. (required)
	 * @return ApiResponse&lt;ImageShare&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Setting Image share successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<ImageShare> setImageShareWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull SetImageSharePayload setImageSharePayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				setImageShareValidateBeforeCall(projectId, imageId, setImageSharePayload, null);
		Type localVarReturnType = new TypeToken<ImageShare>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Set image share. (asynchronously) Set share of an Image. New Options will replace existing
	 * settings.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param setImageSharePayload Settings for an Image Share. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Setting Image share successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call setImageShareAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull SetImageSharePayload setImageSharePayload,
			final ApiCallback<ImageShare> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				setImageShareValidateBeforeCall(
						projectId, imageId, setImageSharePayload, _callback);
		Type localVarReturnType = new TypeToken<ImageShare>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for startServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server start request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call startServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/start"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call startServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling startServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling startServer(Async)");
		}

		return startServerCall(projectId, serverId, _callback);
	}

	/**
	 * Boot up a server. Start an existing server or allocates the server if deallocated.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server start request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void startServer(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		startServerWithHttpInfo(projectId, serverId);
	}

	/**
	 * Boot up a server. Start an existing server or allocates the server if deallocated.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server start request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> startServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		okhttp3.Call localVarCall = startServerValidateBeforeCall(projectId, serverId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Boot up a server. (asynchronously) Start an existing server or allocates the server if
	 * deallocated.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server start request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call startServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = startServerValidateBeforeCall(projectId, serverId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for stopServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server stop request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call stopServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/stop"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call stopServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling stopServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling stopServer(Async)");
		}

		return stopServerCall(projectId, serverId, _callback);
	}

	/**
	 * Stop an existing server. Stops an existing server. The server will remain on the Hypervisor
	 * and will be charged full price for all resources attached to it. The attached resources will
	 * remain reserved. Useful particularly for vGPU servers.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server stop request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void stopServer(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		stopServerWithHttpInfo(projectId, serverId);
	}

	/**
	 * Stop an existing server. Stops an existing server. The server will remain on the Hypervisor
	 * and will be charged full price for all resources attached to it. The attached resources will
	 * remain reserved. Useful particularly for vGPU servers.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server stop request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> stopServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		okhttp3.Call localVarCall = stopServerValidateBeforeCall(projectId, serverId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Stop an existing server. (asynchronously) Stops an existing server. The server will remain on
	 * the Hypervisor and will be charged full price for all resources attached to it. The attached
	 * resources will remain reserved. Useful particularly for vGPU servers.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server stop request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call stopServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = stopServerValidateBeforeCall(projectId, serverId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for unrescueServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server unrescue request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call unrescueServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/unrescue"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"POST",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call unrescueServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling unrescueServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling unrescueServer(Async)");
		}

		return unrescueServerCall(projectId, serverId, _callback);
	}

	/**
	 * Unrescue an existing server. Unrescue an existing server. The original boot volume is
	 * attached as boot volume of the server and the server is booted up.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server unrescue request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public void unrescueServer(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		unrescueServerWithHttpInfo(projectId, serverId);
	}

	/**
	 * Unrescue an existing server. Unrescue an existing server. The original boot volume is
	 * attached as boot volume of the server and the server is booted up.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server unrescue request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Void> unrescueServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID serverId)
			throws ApiException {
		okhttp3.Call localVarCall = unrescueServerValidateBeforeCall(projectId, serverId, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * Unrescue an existing server. (asynchronously) Unrescue an existing server. The original boot
	 * volume is attached as boot volume of the server and the server is booted up.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 202 </td><td> Server unrescue request accepted. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call unrescueServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			final ApiCallback<Void> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				unrescueServerValidateBeforeCall(projectId, serverId, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateAttachedVolume
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param updateAttachedVolumePayload Request a volume attachment update. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update call. Provide the updated volume attachment object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateAttachedVolumeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nonnull UpdateAttachedVolumePayload updateAttachedVolumePayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = updateAttachedVolumePayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}/volume-attachments/{volumeId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()))
						.replace(
								"{" + "volumeId" + "}",
								localVarApiClient.escapeString(volumeId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PATCH",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateAttachedVolumeValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nonnull UpdateAttachedVolumePayload updateAttachedVolumePayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling updateAttachedVolume(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling updateAttachedVolume(Async)");
		}

		// verify the required parameter 'volumeId' is set
		if (volumeId == null) {
			throw new ApiException(
					"Missing the required parameter 'volumeId' when calling updateAttachedVolume(Async)");
		}

		// verify the required parameter 'updateAttachedVolumePayload' is set
		if (updateAttachedVolumePayload == null) {
			throw new ApiException(
					"Missing the required parameter 'updateAttachedVolumePayload' when calling updateAttachedVolume(Async)");
		}

		return updateAttachedVolumeCall(
				projectId, serverId, volumeId, updateAttachedVolumePayload, _callback);
	}

	/**
	 * Update Volume Attachment Parameters. Update the properties of an existing Volume Attachment.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param updateAttachedVolumePayload Request a volume attachment update. (required)
	 * @return VolumeAttachment
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update call. Provide the updated volume attachment object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public VolumeAttachment updateAttachedVolume(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nonnull UpdateAttachedVolumePayload updateAttachedVolumePayload)
			throws ApiException {
		ApiResponse<VolumeAttachment> localVarResp =
				updateAttachedVolumeWithHttpInfo(
						projectId, serverId, volumeId, updateAttachedVolumePayload);
		return localVarResp.getData();
	}

	/**
	 * Update Volume Attachment Parameters. Update the properties of an existing Volume Attachment.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param updateAttachedVolumePayload Request a volume attachment update. (required)
	 * @return ApiResponse&lt;VolumeAttachment&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update call. Provide the updated volume attachment object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<VolumeAttachment> updateAttachedVolumeWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nonnull UpdateAttachedVolumePayload updateAttachedVolumePayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				updateAttachedVolumeValidateBeforeCall(
						projectId, serverId, volumeId, updateAttachedVolumePayload, null);
		Type localVarReturnType = new TypeToken<VolumeAttachment>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update Volume Attachment Parameters. (asynchronously) Update the properties of an existing
	 * Volume Attachment.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param updateAttachedVolumePayload Request a volume attachment update. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update call. Provide the updated volume attachment object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateAttachedVolumeAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nonnull UpdateAttachedVolumePayload updateAttachedVolumePayload,
			final ApiCallback<VolumeAttachment> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				updateAttachedVolumeValidateBeforeCall(
						projectId, serverId, volumeId, updateAttachedVolumePayload, _callback);
		Type localVarReturnType = new TypeToken<VolumeAttachment>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateBackup
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @param updateBackupPayload Request an update of a backup. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Backup has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateBackupCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			@javax.annotation.Nonnull UpdateBackupPayload updateBackupPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = updateBackupPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/backups/{backupId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "backupId" + "}",
								localVarApiClient.escapeString(backupId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PATCH",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateBackupValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			@javax.annotation.Nonnull UpdateBackupPayload updateBackupPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling updateBackup(Async)");
		}

		// verify the required parameter 'backupId' is set
		if (backupId == null) {
			throw new ApiException(
					"Missing the required parameter 'backupId' when calling updateBackup(Async)");
		}

		// verify the required parameter 'updateBackupPayload' is set
		if (updateBackupPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'updateBackupPayload' when calling updateBackup(Async)");
		}

		return updateBackupCall(projectId, backupId, updateBackupPayload, _callback);
	}

	/**
	 * Update information of a backup. Update name or labels of the backup.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @param updateBackupPayload Request an update of a backup. (required)
	 * @return Backup
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Backup has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Backup updateBackup(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			@javax.annotation.Nonnull UpdateBackupPayload updateBackupPayload)
			throws ApiException {
		ApiResponse<Backup> localVarResp =
				updateBackupWithHttpInfo(projectId, backupId, updateBackupPayload);
		return localVarResp.getData();
	}

	/**
	 * Update information of a backup. Update name or labels of the backup.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @param updateBackupPayload Request an update of a backup. (required)
	 * @return ApiResponse&lt;Backup&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Backup has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Backup> updateBackupWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			@javax.annotation.Nonnull UpdateBackupPayload updateBackupPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				updateBackupValidateBeforeCall(projectId, backupId, updateBackupPayload, null);
		Type localVarReturnType = new TypeToken<Backup>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update information of a backup. (asynchronously) Update name or labels of the backup.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param backupId The identifier (ID) of a STACKIT Backup. (required)
	 * @param updateBackupPayload Request an update of a backup. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Backup has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateBackupAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID backupId,
			@javax.annotation.Nonnull UpdateBackupPayload updateBackupPayload,
			final ApiCallback<Backup> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				updateBackupValidateBeforeCall(projectId, backupId, updateBackupPayload, _callback);
		Type localVarReturnType = new TypeToken<Backup>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateImage
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param updateImagePayload Request an update of an Image. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update call. Provide the updated image object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateImageCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UpdateImagePayload updateImagePayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = updateImagePayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/images/{imageId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "imageId" + "}",
								localVarApiClient.escapeString(imageId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PATCH",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateImageValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UpdateImagePayload updateImagePayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling updateImage(Async)");
		}

		// verify the required parameter 'imageId' is set
		if (imageId == null) {
			throw new ApiException(
					"Missing the required parameter 'imageId' when calling updateImage(Async)");
		}

		// verify the required parameter 'updateImagePayload' is set
		if (updateImagePayload == null) {
			throw new ApiException(
					"Missing the required parameter 'updateImagePayload' when calling updateImage(Async)");
		}

		return updateImageCall(projectId, imageId, updateImagePayload, _callback);
	}

	/**
	 * Update Image Parameters. Update the properties of an existing Image inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param updateImagePayload Request an update of an Image. (required)
	 * @return Image
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update call. Provide the updated image object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Image updateImage(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UpdateImagePayload updateImagePayload)
			throws ApiException {
		ApiResponse<Image> localVarResp =
				updateImageWithHttpInfo(projectId, imageId, updateImagePayload);
		return localVarResp.getData();
	}

	/**
	 * Update Image Parameters. Update the properties of an existing Image inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param updateImagePayload Request an update of an Image. (required)
	 * @return ApiResponse&lt;Image&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update call. Provide the updated image object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Image> updateImageWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UpdateImagePayload updateImagePayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				updateImageValidateBeforeCall(projectId, imageId, updateImagePayload, null);
		Type localVarReturnType = new TypeToken<Image>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update Image Parameters. (asynchronously) Update the properties of an existing Image inside a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param updateImagePayload Request an update of an Image. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update call. Provide the updated image object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateImageAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UpdateImagePayload updateImagePayload,
			final ApiCallback<Image> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				updateImageValidateBeforeCall(projectId, imageId, updateImagePayload, _callback);
		Type localVarReturnType = new TypeToken<Image>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateImageScopeLocal
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update image-scope to local. Provide the updated image object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateImageScopeLocalCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/images/{imageId}/publish"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "imageId" + "}",
								localVarApiClient.escapeString(imageId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"DELETE",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateImageScopeLocalValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling updateImageScopeLocal(Async)");
		}

		// verify the required parameter 'imageId' is set
		if (imageId == null) {
			throw new ApiException(
					"Missing the required parameter 'imageId' when calling updateImageScopeLocal(Async)");
		}

		return updateImageScopeLocalCall(projectId, imageId, _callback);
	}

	/**
	 * Update Image Scope to Local. Update the scope property of an existing Image inside a project
	 * to local.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @return Image
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update image-scope to local. Provide the updated image object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Image updateImageScopeLocal(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID imageId)
			throws ApiException {
		ApiResponse<Image> localVarResp = updateImageScopeLocalWithHttpInfo(projectId, imageId);
		return localVarResp.getData();
	}

	/**
	 * Update Image Scope to Local. Update the scope property of an existing Image inside a project
	 * to local.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @return ApiResponse&lt;Image&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update image-scope to local. Provide the updated image object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Image> updateImageScopeLocalWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID imageId)
			throws ApiException {
		okhttp3.Call localVarCall =
				updateImageScopeLocalValidateBeforeCall(projectId, imageId, null);
		Type localVarReturnType = new TypeToken<Image>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update Image Scope to Local. (asynchronously) Update the scope property of an existing Image
	 * inside a project to local.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update image-scope to local. Provide the updated image object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateImageScopeLocalAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback<Image> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				updateImageScopeLocalValidateBeforeCall(projectId, imageId, _callback);
		Type localVarReturnType = new TypeToken<Image>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateImageScopePublic
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update image-scope to public. Provide the updated image object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateImageScopePublicCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/images/{imageId}/publish"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "imageId" + "}",
								localVarApiClient.escapeString(imageId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PUT",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateImageScopePublicValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling updateImageScopePublic(Async)");
		}

		// verify the required parameter 'imageId' is set
		if (imageId == null) {
			throw new ApiException(
					"Missing the required parameter 'imageId' when calling updateImageScopePublic(Async)");
		}

		return updateImageScopePublicCall(projectId, imageId, _callback);
	}

	/**
	 * Update Image Scope to Public. Update the scope property of an existing Image inside a project
	 * to public.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @return Image
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update image-scope to public. Provide the updated image object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Image updateImageScopePublic(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID imageId)
			throws ApiException {
		ApiResponse<Image> localVarResp = updateImageScopePublicWithHttpInfo(projectId, imageId);
		return localVarResp.getData();
	}

	/**
	 * Update Image Scope to Public. Update the scope property of an existing Image inside a project
	 * to public.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @return ApiResponse&lt;Image&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update image-scope to public. Provide the updated image object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Image> updateImageScopePublicWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId, @javax.annotation.Nonnull UUID imageId)
			throws ApiException {
		okhttp3.Call localVarCall =
				updateImageScopePublicValidateBeforeCall(projectId, imageId, null);
		Type localVarReturnType = new TypeToken<Image>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update Image Scope to Public. (asynchronously) Update the scope property of an existing Image
	 * inside a project to public.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Response to update image-scope to public. Provide the updated image object. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateImageScopePublicAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			final ApiCallback<Image> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				updateImageScopePublicValidateBeforeCall(projectId, imageId, _callback);
		Type localVarReturnType = new TypeToken<Image>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateImageShare
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param updateImageSharePayload Update an Image Share. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Updating Image share successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateImageShareCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UpdateImageSharePayload updateImageSharePayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = updateImageSharePayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/images/{imageId}/share"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "imageId" + "}",
								localVarApiClient.escapeString(imageId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PATCH",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateImageShareValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UpdateImageSharePayload updateImageSharePayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling updateImageShare(Async)");
		}

		// verify the required parameter 'imageId' is set
		if (imageId == null) {
			throw new ApiException(
					"Missing the required parameter 'imageId' when calling updateImageShare(Async)");
		}

		// verify the required parameter 'updateImageSharePayload' is set
		if (updateImageSharePayload == null) {
			throw new ApiException(
					"Missing the required parameter 'updateImageSharePayload' when calling updateImageShare(Async)");
		}

		return updateImageShareCall(projectId, imageId, updateImageSharePayload, _callback);
	}

	/**
	 * Update image share. Update share of an Image. Projects will be appended to existing list.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param updateImageSharePayload Update an Image Share. (required)
	 * @return ImageShare
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Updating Image share successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ImageShare updateImageShare(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UpdateImageSharePayload updateImageSharePayload)
			throws ApiException {
		ApiResponse<ImageShare> localVarResp =
				updateImageShareWithHttpInfo(projectId, imageId, updateImageSharePayload);
		return localVarResp.getData();
	}

	/**
	 * Update image share. Update share of an Image. Projects will be appended to existing list.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param updateImageSharePayload Update an Image Share. (required)
	 * @return ApiResponse&lt;ImageShare&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Updating Image share successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<ImageShare> updateImageShareWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UpdateImageSharePayload updateImageSharePayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				updateImageShareValidateBeforeCall(
						projectId, imageId, updateImageSharePayload, null);
		Type localVarReturnType = new TypeToken<ImageShare>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update image share. (asynchronously) Update share of an Image. Projects will be appended to
	 * existing list.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param imageId The identifier (ID) of a STACKIT Image. (required)
	 * @param updateImageSharePayload Update an Image Share. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Updating Image share successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateImageShareAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID imageId,
			@javax.annotation.Nonnull UpdateImageSharePayload updateImageSharePayload,
			final ApiCallback<ImageShare> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				updateImageShareValidateBeforeCall(
						projectId, imageId, updateImageSharePayload, _callback);
		Type localVarReturnType = new TypeToken<ImageShare>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateKeyPair
	 *
	 * @param keypairName The name of an SSH keypair. (required)
	 * @param updateKeyPairPayload Request an update of an SSH keypair. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> SSH keypair has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateKeyPairCall(
			@javax.annotation.Nonnull String keypairName,
			@javax.annotation.Nonnull UpdateKeyPairPayload updateKeyPairPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = updateKeyPairPayload;

		// create path and map variables
		String localVarPath =
				"/v1/keypairs/{keypairName}"
						.replace(
								"{" + "keypairName" + "}",
								localVarApiClient.escapeString(keypairName.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PATCH",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateKeyPairValidateBeforeCall(
			@javax.annotation.Nonnull String keypairName,
			@javax.annotation.Nonnull UpdateKeyPairPayload updateKeyPairPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'keypairName' is set
		if (keypairName == null) {
			throw new ApiException(
					"Missing the required parameter 'keypairName' when calling updateKeyPair(Async)");
		}

		// verify the required parameter 'updateKeyPairPayload' is set
		if (updateKeyPairPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'updateKeyPairPayload' when calling updateKeyPair(Async)");
		}

		return updateKeyPairCall(keypairName, updateKeyPairPayload, _callback);
	}

	/**
	 * Update information of an SSH keypair. Update labels of the SSH keypair.
	 *
	 * @param keypairName The name of an SSH keypair. (required)
	 * @param updateKeyPairPayload Request an update of an SSH keypair. (required)
	 * @return Keypair
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> SSH keypair has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Keypair updateKeyPair(
			@javax.annotation.Nonnull String keypairName,
			@javax.annotation.Nonnull UpdateKeyPairPayload updateKeyPairPayload)
			throws ApiException {
		ApiResponse<Keypair> localVarResp =
				updateKeyPairWithHttpInfo(keypairName, updateKeyPairPayload);
		return localVarResp.getData();
	}

	/**
	 * Update information of an SSH keypair. Update labels of the SSH keypair.
	 *
	 * @param keypairName The name of an SSH keypair. (required)
	 * @param updateKeyPairPayload Request an update of an SSH keypair. (required)
	 * @return ApiResponse&lt;Keypair&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> SSH keypair has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Keypair> updateKeyPairWithHttpInfo(
			@javax.annotation.Nonnull String keypairName,
			@javax.annotation.Nonnull UpdateKeyPairPayload updateKeyPairPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				updateKeyPairValidateBeforeCall(keypairName, updateKeyPairPayload, null);
		Type localVarReturnType = new TypeToken<Keypair>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update information of an SSH keypair. (asynchronously) Update labels of the SSH keypair.
	 *
	 * @param keypairName The name of an SSH keypair. (required)
	 * @param updateKeyPairPayload Request an update of an SSH keypair. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> SSH keypair has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateKeyPairAsync(
			@javax.annotation.Nonnull String keypairName,
			@javax.annotation.Nonnull UpdateKeyPairPayload updateKeyPairPayload,
			final ApiCallback<Keypair> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				updateKeyPairValidateBeforeCall(keypairName, updateKeyPairPayload, _callback);
		Type localVarReturnType = new TypeToken<Keypair>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateNetworkAreaRoute
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param routeId The identifier (ID) of a STACKIT Route. (required)
	 * @param updateNetworkAreaRoutePayload Request an update of a network route. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Update request for network successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateNetworkAreaRouteCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId,
			@javax.annotation.Nonnull UpdateNetworkAreaRoutePayload updateNetworkAreaRoutePayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = updateNetworkAreaRoutePayload;

		// create path and map variables
		String localVarPath =
				"/v1/organizations/{organizationId}/network-areas/{areaId}/routes/{routeId}"
						.replace(
								"{" + "organizationId" + "}",
								localVarApiClient.escapeString(organizationId.toString()))
						.replace(
								"{" + "areaId" + "}",
								localVarApiClient.escapeString(areaId.toString()))
						.replace(
								"{" + "routeId" + "}",
								localVarApiClient.escapeString(routeId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PATCH",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateNetworkAreaRouteValidateBeforeCall(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId,
			@javax.annotation.Nonnull UpdateNetworkAreaRoutePayload updateNetworkAreaRoutePayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'organizationId' is set
		if (organizationId == null) {
			throw new ApiException(
					"Missing the required parameter 'organizationId' when calling updateNetworkAreaRoute(Async)");
		}

		// verify the required parameter 'areaId' is set
		if (areaId == null) {
			throw new ApiException(
					"Missing the required parameter 'areaId' when calling updateNetworkAreaRoute(Async)");
		}

		// verify the required parameter 'routeId' is set
		if (routeId == null) {
			throw new ApiException(
					"Missing the required parameter 'routeId' when calling updateNetworkAreaRoute(Async)");
		}

		// verify the required parameter 'updateNetworkAreaRoutePayload' is set
		if (updateNetworkAreaRoutePayload == null) {
			throw new ApiException(
					"Missing the required parameter 'updateNetworkAreaRoutePayload' when calling updateNetworkAreaRoute(Async)");
		}

		return updateNetworkAreaRouteCall(
				organizationId, areaId, routeId, updateNetworkAreaRoutePayload, _callback);
	}

	/**
	 * Update a network route. Update a network route defined in a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param routeId The identifier (ID) of a STACKIT Route. (required)
	 * @param updateNetworkAreaRoutePayload Request an update of a network route. (required)
	 * @return Route
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Update request for network successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Route updateNetworkAreaRoute(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId,
			@javax.annotation.Nonnull UpdateNetworkAreaRoutePayload updateNetworkAreaRoutePayload)
			throws ApiException {
		ApiResponse<Route> localVarResp =
				updateNetworkAreaRouteWithHttpInfo(
						organizationId, areaId, routeId, updateNetworkAreaRoutePayload);
		return localVarResp.getData();
	}

	/**
	 * Update a network route. Update a network route defined in a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param routeId The identifier (ID) of a STACKIT Route. (required)
	 * @param updateNetworkAreaRoutePayload Request an update of a network route. (required)
	 * @return ApiResponse&lt;Route&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Update request for network successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Route> updateNetworkAreaRouteWithHttpInfo(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId,
			@javax.annotation.Nonnull UpdateNetworkAreaRoutePayload updateNetworkAreaRoutePayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				updateNetworkAreaRouteValidateBeforeCall(
						organizationId, areaId, routeId, updateNetworkAreaRoutePayload, null);
		Type localVarReturnType = new TypeToken<Route>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update a network route. (asynchronously) Update a network route defined in a network area.
	 *
	 * @param organizationId The identifier (ID) of a STACKIT Organization. (required)
	 * @param areaId The identifier (ID) of a STACKIT Network Area. (required)
	 * @param routeId The identifier (ID) of a STACKIT Route. (required)
	 * @param updateNetworkAreaRoutePayload Request an update of a network route. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Update request for network successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateNetworkAreaRouteAsync(
			@javax.annotation.Nonnull UUID organizationId,
			@javax.annotation.Nonnull UUID areaId,
			@javax.annotation.Nonnull UUID routeId,
			@javax.annotation.Nonnull UpdateNetworkAreaRoutePayload updateNetworkAreaRoutePayload,
			final ApiCallback<Route> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				updateNetworkAreaRouteValidateBeforeCall(
						organizationId, areaId, routeId, updateNetworkAreaRoutePayload, _callback);
		Type localVarReturnType = new TypeToken<Route>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateNic
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @param updateNicPayload Request an update of a network interface. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Network interface has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateNicCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId,
			@javax.annotation.Nonnull UpdateNicPayload updateNicPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = updateNicPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/networks/{networkId}/nics/{nicId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "networkId" + "}",
								localVarApiClient.escapeString(networkId.toString()))
						.replace(
								"{" + "nicId" + "}",
								localVarApiClient.escapeString(nicId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PATCH",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateNicValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId,
			@javax.annotation.Nonnull UpdateNicPayload updateNicPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling updateNic(Async)");
		}

		// verify the required parameter 'networkId' is set
		if (networkId == null) {
			throw new ApiException(
					"Missing the required parameter 'networkId' when calling updateNic(Async)");
		}

		// verify the required parameter 'nicId' is set
		if (nicId == null) {
			throw new ApiException(
					"Missing the required parameter 'nicId' when calling updateNic(Async)");
		}

		// verify the required parameter 'updateNicPayload' is set
		if (updateNicPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'updateNicPayload' when calling updateNic(Async)");
		}

		return updateNicCall(projectId, networkId, nicId, updateNicPayload, _callback);
	}

	/**
	 * Update a network interface. Update the properties of an existing network interface inside a
	 * network.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @param updateNicPayload Request an update of a network interface. (required)
	 * @return NIC
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Network interface has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public NIC updateNic(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId,
			@javax.annotation.Nonnull UpdateNicPayload updateNicPayload)
			throws ApiException {
		ApiResponse<NIC> localVarResp =
				updateNicWithHttpInfo(projectId, networkId, nicId, updateNicPayload);
		return localVarResp.getData();
	}

	/**
	 * Update a network interface. Update the properties of an existing network interface inside a
	 * network.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @param updateNicPayload Request an update of a network interface. (required)
	 * @return ApiResponse&lt;NIC&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Network interface has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<NIC> updateNicWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId,
			@javax.annotation.Nonnull UpdateNicPayload updateNicPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				updateNicValidateBeforeCall(projectId, networkId, nicId, updateNicPayload, null);
		Type localVarReturnType = new TypeToken<NIC>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update a network interface. (asynchronously) Update the properties of an existing network
	 * interface inside a network.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param networkId The identifier (ID) of a STACKIT Network. (required)
	 * @param nicId The identifier (ID) of a network interface. (required)
	 * @param updateNicPayload Request an update of a network interface. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Network interface has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 409 </td><td> A conflict has occurred. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateNicAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID networkId,
			@javax.annotation.Nonnull UUID nicId,
			@javax.annotation.Nonnull UpdateNicPayload updateNicPayload,
			final ApiCallback<NIC> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				updateNicValidateBeforeCall(
						projectId, networkId, nicId, updateNicPayload, _callback);
		Type localVarReturnType = new TypeToken<NIC>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updatePublicIP
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @param updatePublicIPPayload Request an update of a public IP. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Public IP has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updatePublicIPCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID publicIpId,
			@javax.annotation.Nonnull UpdatePublicIPPayload updatePublicIPPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = updatePublicIPPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/public-ips/{publicIpId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "publicIpId" + "}",
								localVarApiClient.escapeString(publicIpId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PATCH",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updatePublicIPValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID publicIpId,
			@javax.annotation.Nonnull UpdatePublicIPPayload updatePublicIPPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling updatePublicIP(Async)");
		}

		// verify the required parameter 'publicIpId' is set
		if (publicIpId == null) {
			throw new ApiException(
					"Missing the required parameter 'publicIpId' when calling updatePublicIP(Async)");
		}

		// verify the required parameter 'updatePublicIPPayload' is set
		if (updatePublicIPPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'updatePublicIPPayload' when calling updatePublicIP(Async)");
		}

		return updatePublicIPCall(projectId, publicIpId, updatePublicIPPayload, _callback);
	}

	/**
	 * Update a public IP. Update the properties of an existing public IP inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @param updatePublicIPPayload Request an update of a public IP. (required)
	 * @return PublicIp
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Public IP has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public PublicIp updatePublicIP(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID publicIpId,
			@javax.annotation.Nonnull UpdatePublicIPPayload updatePublicIPPayload)
			throws ApiException {
		ApiResponse<PublicIp> localVarResp =
				updatePublicIPWithHttpInfo(projectId, publicIpId, updatePublicIPPayload);
		return localVarResp.getData();
	}

	/**
	 * Update a public IP. Update the properties of an existing public IP inside a project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @param updatePublicIPPayload Request an update of a public IP. (required)
	 * @return ApiResponse&lt;PublicIp&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Public IP has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<PublicIp> updatePublicIPWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID publicIpId,
			@javax.annotation.Nonnull UpdatePublicIPPayload updatePublicIPPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				updatePublicIPValidateBeforeCall(
						projectId, publicIpId, updatePublicIPPayload, null);
		Type localVarReturnType = new TypeToken<PublicIp>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update a public IP. (asynchronously) Update the properties of an existing public IP inside a
	 * project.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param publicIpId The identifier (ID) of a Public IP. (required)
	 * @param updatePublicIPPayload Request an update of a public IP. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Public IP has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updatePublicIPAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID publicIpId,
			@javax.annotation.Nonnull UpdatePublicIPPayload updatePublicIPPayload,
			final ApiCallback<PublicIp> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				updatePublicIPValidateBeforeCall(
						projectId, publicIpId, updatePublicIPPayload, _callback);
		Type localVarReturnType = new TypeToken<PublicIp>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateSecurityGroup
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param updateSecurityGroupPayload Request an update of a security group. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Updating security group successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateSecurityGroupCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UpdateSecurityGroupPayload updateSecurityGroupPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = updateSecurityGroupPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/security-groups/{securityGroupId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "securityGroupId" + "}",
								localVarApiClient.escapeString(securityGroupId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PATCH",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateSecurityGroupValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UpdateSecurityGroupPayload updateSecurityGroupPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling updateSecurityGroup(Async)");
		}

		// verify the required parameter 'securityGroupId' is set
		if (securityGroupId == null) {
			throw new ApiException(
					"Missing the required parameter 'securityGroupId' when calling updateSecurityGroup(Async)");
		}

		// verify the required parameter 'updateSecurityGroupPayload' is set
		if (updateSecurityGroupPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'updateSecurityGroupPayload' when calling updateSecurityGroup(Async)");
		}

		return updateSecurityGroupCall(
				projectId, securityGroupId, updateSecurityGroupPayload, _callback);
	}

	/**
	 * Update information of a security group. Update labels of the security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param updateSecurityGroupPayload Request an update of a security group. (required)
	 * @return SecurityGroup
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Updating security group successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public SecurityGroup updateSecurityGroup(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UpdateSecurityGroupPayload updateSecurityGroupPayload)
			throws ApiException {
		ApiResponse<SecurityGroup> localVarResp =
				updateSecurityGroupWithHttpInfo(
						projectId, securityGroupId, updateSecurityGroupPayload);
		return localVarResp.getData();
	}

	/**
	 * Update information of a security group. Update labels of the security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param updateSecurityGroupPayload Request an update of a security group. (required)
	 * @return ApiResponse&lt;SecurityGroup&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Updating security group successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<SecurityGroup> updateSecurityGroupWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UpdateSecurityGroupPayload updateSecurityGroupPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				updateSecurityGroupValidateBeforeCall(
						projectId, securityGroupId, updateSecurityGroupPayload, null);
		Type localVarReturnType = new TypeToken<SecurityGroup>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update information of a security group. (asynchronously) Update labels of the security group.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param securityGroupId The identifier (ID) of a STACKIT Security Group. (required)
	 * @param updateSecurityGroupPayload Request an update of a security group. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Updating security group successful. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateSecurityGroupAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID securityGroupId,
			@javax.annotation.Nonnull UpdateSecurityGroupPayload updateSecurityGroupPayload,
			final ApiCallback<SecurityGroup> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				updateSecurityGroupValidateBeforeCall(
						projectId, securityGroupId, updateSecurityGroupPayload, _callback);
		Type localVarReturnType = new TypeToken<SecurityGroup>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateServer
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param updateServerPayload Request an update of a server. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Server has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateServerCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UpdateServerPayload updateServerPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = updateServerPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/servers/{serverId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "serverId" + "}",
								localVarApiClient.escapeString(serverId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PATCH",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateServerValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UpdateServerPayload updateServerPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling updateServer(Async)");
		}

		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new ApiException(
					"Missing the required parameter 'serverId' when calling updateServer(Async)");
		}

		// verify the required parameter 'updateServerPayload' is set
		if (updateServerPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'updateServerPayload' when calling updateServer(Async)");
		}

		return updateServerCall(projectId, serverId, updateServerPayload, _callback);
	}

	/**
	 * Update information of a server. Update name or labels of the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param updateServerPayload Request an update of a server. (required)
	 * @return Server
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Server has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Server updateServer(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UpdateServerPayload updateServerPayload)
			throws ApiException {
		ApiResponse<Server> localVarResp =
				updateServerWithHttpInfo(projectId, serverId, updateServerPayload);
		return localVarResp.getData();
	}

	/**
	 * Update information of a server. Update name or labels of the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param updateServerPayload Request an update of a server. (required)
	 * @return ApiResponse&lt;Server&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Server has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Server> updateServerWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UpdateServerPayload updateServerPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				updateServerValidateBeforeCall(projectId, serverId, updateServerPayload, null);
		Type localVarReturnType = new TypeToken<Server>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update information of a server. (asynchronously) Update name or labels of the server.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param serverId The identifier (ID) of a STACKIT Server. (required)
	 * @param updateServerPayload Request an update of a server. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Server has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateServerAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID serverId,
			@javax.annotation.Nonnull UpdateServerPayload updateServerPayload,
			final ApiCallback<Server> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				updateServerValidateBeforeCall(projectId, serverId, updateServerPayload, _callback);
		Type localVarReturnType = new TypeToken<Server>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateSnapshot
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param snapshotId The identifier (ID) of a STACKIT Snapshot. (required)
	 * @param updateSnapshotPayload Request an update of a snapshot. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Snapshot has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateSnapshotCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID snapshotId,
			@javax.annotation.Nonnull UpdateSnapshotPayload updateSnapshotPayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = updateSnapshotPayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/snapshots/{snapshotId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "snapshotId" + "}",
								localVarApiClient.escapeString(snapshotId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PATCH",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateSnapshotValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID snapshotId,
			@javax.annotation.Nonnull UpdateSnapshotPayload updateSnapshotPayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling updateSnapshot(Async)");
		}

		// verify the required parameter 'snapshotId' is set
		if (snapshotId == null) {
			throw new ApiException(
					"Missing the required parameter 'snapshotId' when calling updateSnapshot(Async)");
		}

		// verify the required parameter 'updateSnapshotPayload' is set
		if (updateSnapshotPayload == null) {
			throw new ApiException(
					"Missing the required parameter 'updateSnapshotPayload' when calling updateSnapshot(Async)");
		}

		return updateSnapshotCall(projectId, snapshotId, updateSnapshotPayload, _callback);
	}

	/**
	 * Update information of the snapshot. Update information like name or labels of the snapshot.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param snapshotId The identifier (ID) of a STACKIT Snapshot. (required)
	 * @param updateSnapshotPayload Request an update of a snapshot. (required)
	 * @return Snapshot
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Snapshot has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Snapshot updateSnapshot(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID snapshotId,
			@javax.annotation.Nonnull UpdateSnapshotPayload updateSnapshotPayload)
			throws ApiException {
		ApiResponse<Snapshot> localVarResp =
				updateSnapshotWithHttpInfo(projectId, snapshotId, updateSnapshotPayload);
		return localVarResp.getData();
	}

	/**
	 * Update information of the snapshot. Update information like name or labels of the snapshot.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param snapshotId The identifier (ID) of a STACKIT Snapshot. (required)
	 * @param updateSnapshotPayload Request an update of a snapshot. (required)
	 * @return ApiResponse&lt;Snapshot&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Snapshot has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Snapshot> updateSnapshotWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID snapshotId,
			@javax.annotation.Nonnull UpdateSnapshotPayload updateSnapshotPayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				updateSnapshotValidateBeforeCall(
						projectId, snapshotId, updateSnapshotPayload, null);
		Type localVarReturnType = new TypeToken<Snapshot>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update information of the snapshot. (asynchronously) Update information like name or labels
	 * of the snapshot.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param snapshotId The identifier (ID) of a STACKIT Snapshot. (required)
	 * @param updateSnapshotPayload Request an update of a snapshot. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Snapshot has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateSnapshotAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID snapshotId,
			@javax.annotation.Nonnull UpdateSnapshotPayload updateSnapshotPayload,
			final ApiCallback<Snapshot> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				updateSnapshotValidateBeforeCall(
						projectId, snapshotId, updateSnapshotPayload, _callback);
		Type localVarReturnType = new TypeToken<Snapshot>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateVolume
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param updateVolumePayload Request an update of a volume. (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Volume has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateVolumeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nonnull UpdateVolumePayload updateVolumePayload,
			final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = updateVolumePayload;

		// create path and map variables
		String localVarPath =
				"/v1/projects/{projectId}/volumes/{volumeId}"
						.replace(
								"{" + "projectId" + "}",
								localVarApiClient.escapeString(projectId.toString()))
						.replace(
								"{" + "volumeId" + "}",
								localVarApiClient.escapeString(volumeId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType =
				localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(
				basePath,
				localVarPath,
				"PATCH",
				localVarQueryParams,
				localVarCollectionQueryParams,
				localVarPostBody,
				localVarHeaderParams,
				localVarCookieParams,
				localVarFormParams,
				localVarAuthNames,
				_callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateVolumeValidateBeforeCall(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nonnull UpdateVolumePayload updateVolumePayload,
			final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling updateVolume(Async)");
		}

		// verify the required parameter 'volumeId' is set
		if (volumeId == null) {
			throw new ApiException(
					"Missing the required parameter 'volumeId' when calling updateVolume(Async)");
		}

		// verify the required parameter 'updateVolumePayload' is set
		if (updateVolumePayload == null) {
			throw new ApiException(
					"Missing the required parameter 'updateVolumePayload' when calling updateVolume(Async)");
		}

		return updateVolumeCall(projectId, volumeId, updateVolumePayload, _callback);
	}

	/**
	 * Update information of a volume. Update name, description or labels of the volume.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param updateVolumePayload Request an update of a volume. (required)
	 * @return Volume
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Volume has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public Volume updateVolume(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nonnull UpdateVolumePayload updateVolumePayload)
			throws ApiException {
		ApiResponse<Volume> localVarResp =
				updateVolumeWithHttpInfo(projectId, volumeId, updateVolumePayload);
		return localVarResp.getData();
	}

	/**
	 * Update information of a volume. Update name, description or labels of the volume.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param updateVolumePayload Request an update of a volume. (required)
	 * @return ApiResponse&lt;Volume&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
	 *     response body
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Volume has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public ApiResponse<Volume> updateVolumeWithHttpInfo(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nonnull UpdateVolumePayload updateVolumePayload)
			throws ApiException {
		okhttp3.Call localVarCall =
				updateVolumeValidateBeforeCall(projectId, volumeId, updateVolumePayload, null);
		Type localVarReturnType = new TypeToken<Volume>() {}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update information of a volume. (asynchronously) Update name, description or labels of the
	 * volume.
	 *
	 * @param projectId The identifier (ID) of a STACKIT Project. (required)
	 * @param volumeId The identifier (ID) of a STACKIT Volume. (required)
	 * @param updateVolumePayload Request an update of a volume. (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body
	 *     object
	 * @http.response.details
	 *     <table border="1">
	 * <caption>Response Details</caption>
	 * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
	 * <tr><td> 200 </td><td> Volume has been updated. </td><td>  -  </td></tr>
	 * <tr><td> 400 </td><td> A bad request. </td><td>  -  </td></tr>
	 * <tr><td> 401 </td><td> A request which was not authorized. </td><td>  -  </td></tr>
	 * <tr><td> 403 </td><td> A request which was forbidden. </td><td>  -  </td></tr>
	 * <tr><td> 404 </td><td> The object was not found. </td><td>  -  </td></tr>
	 * <tr><td> 500 </td><td> Internal Server Error, returns a 500 if something is broken on IaaS API Side. </td><td>  -  </td></tr>
	 * </table>
	 */
	public okhttp3.Call updateVolumeAsync(
			@javax.annotation.Nonnull UUID projectId,
			@javax.annotation.Nonnull UUID volumeId,
			@javax.annotation.Nonnull UpdateVolumePayload updateVolumePayload,
			final ApiCallback<Volume> _callback)
			throws ApiException {

		okhttp3.Call localVarCall =
				updateVolumeValidateBeforeCall(projectId, volumeId, updateVolumePayload, _callback);
		Type localVarReturnType = new TypeToken<Volume>() {}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}
}
