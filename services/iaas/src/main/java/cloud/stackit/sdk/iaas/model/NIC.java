/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/** Object that represents a network interface. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class NIC {
	public static final String SERIALIZED_NAME_ALLOWED_ADDRESSES = "allowedAddresses";

	@SerializedName(SERIALIZED_NAME_ALLOWED_ADDRESSES)
	@javax.annotation.Nullable private List<AllowedAddressesInner> allowedAddresses = new ArrayList<>();

	public static final String SERIALIZED_NAME_DEVICE = "device";

	@SerializedName(SERIALIZED_NAME_DEVICE)
	@javax.annotation.Nullable private UUID device;

	public static final String SERIALIZED_NAME_ID = "id";

	@SerializedName(SERIALIZED_NAME_ID)
	@javax.annotation.Nullable private UUID id;

	public static final String SERIALIZED_NAME_IPV4 = "ipv4";

	@SerializedName(SERIALIZED_NAME_IPV4)
	@javax.annotation.Nullable private String ipv4;

	public static final String SERIALIZED_NAME_IPV6 = "ipv6";

	@SerializedName(SERIALIZED_NAME_IPV6)
	@javax.annotation.Nullable private String ipv6;

	public static final String SERIALIZED_NAME_LABELS = "labels";

	@SerializedName(SERIALIZED_NAME_LABELS)
	@javax.annotation.Nullable private Object labels;

	public static final String SERIALIZED_NAME_MAC = "mac";

	@SerializedName(SERIALIZED_NAME_MAC)
	@javax.annotation.Nullable private String mac;

	public static final String SERIALIZED_NAME_NAME = "name";

	@SerializedName(SERIALIZED_NAME_NAME)
	@javax.annotation.Nullable private String name;

	public static final String SERIALIZED_NAME_NETWORK_ID = "networkId";

	@SerializedName(SERIALIZED_NAME_NETWORK_ID)
	@javax.annotation.Nullable private UUID networkId;

	public static final String SERIALIZED_NAME_NIC_SECURITY = "nicSecurity";

	@SerializedName(SERIALIZED_NAME_NIC_SECURITY)
	@javax.annotation.Nullable private Boolean nicSecurity = true;

	public static final String SERIALIZED_NAME_SECURITY_GROUPS = "securityGroups";

	@SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
	@javax.annotation.Nullable private List<UUID> securityGroups = new ArrayList<>();

	public static final String SERIALIZED_NAME_STATUS = "status";

	@SerializedName(SERIALIZED_NAME_STATUS)
	@javax.annotation.Nullable private String status;

	public static final String SERIALIZED_NAME_TYPE = "type";

	@SerializedName(SERIALIZED_NAME_TYPE)
	@javax.annotation.Nullable private String type;

	public NIC() {}

	public NIC(UUID device, UUID id, String mac, UUID networkId, String status, String type) {
		this();
		this.device = device;
		this.id = id;
		this.mac = mac;
		this.networkId = networkId;
		this.status = status;
		this.type = type;
	}

	public NIC allowedAddresses(
			@javax.annotation.Nullable List<AllowedAddressesInner> allowedAddresses) {
		this.allowedAddresses = allowedAddresses;
		return this;
	}

	public NIC addAllowedAddressesItem(AllowedAddressesInner allowedAddressesItem) {
		if (this.allowedAddresses == null) {
			this.allowedAddresses = new ArrayList<>();
		}
		this.allowedAddresses.add(allowedAddressesItem);
		return this;
	}

	/**
	 * A list of IPs or CIDR notations.
	 *
	 * @return allowedAddresses
	 */
	@javax.annotation.Nullable public List<AllowedAddressesInner> getAllowedAddresses() {
		return allowedAddresses;
	}

	public void setAllowedAddresses(
			@javax.annotation.Nullable List<AllowedAddressesInner> allowedAddresses) {
		this.allowedAddresses = allowedAddresses;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return device
	 */
	@javax.annotation.Nullable public UUID getDevice() {
		return device;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return id
	 */
	@javax.annotation.Nullable public UUID getId() {
		return id;
	}

	public NIC ipv4(@javax.annotation.Nullable String ipv4) {
		this.ipv4 = ipv4;
		return this;
	}

	/**
	 * Object that represents an IP address.
	 *
	 * @return ipv4
	 */
	@javax.annotation.Nullable public String getIpv4() {
		return ipv4;
	}

	public void setIpv4(@javax.annotation.Nullable String ipv4) {
		this.ipv4 = ipv4;
	}

	public NIC ipv6(@javax.annotation.Nullable String ipv6) {
		this.ipv6 = ipv6;
		return this;
	}

	/**
	 * String that represents an IPv6 address.
	 *
	 * @return ipv6
	 */
	@javax.annotation.Nullable public String getIpv6() {
		return ipv6;
	}

	public void setIpv6(@javax.annotation.Nullable String ipv6) {
		this.ipv6 = ipv6;
	}

	public NIC labels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
		return this;
	}

	/**
	 * Object that represents the labels of an object. Regex for keys:
	 * &#x60;^[a-z]((-|_|[a-z0-9])){0,62}$&#x60;. Regex for values:
	 * &#x60;^(-|_|[a-z0-9]){0,63}$&#x60;. Providing a &#x60;null&#x60; value for a key will remove
	 * that key.
	 *
	 * @return labels
	 */
	@javax.annotation.Nullable public Object getLabels() {
		return labels;
	}

	public void setLabels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
	}

	/**
	 * Object that represents an MAC address.
	 *
	 * @return mac
	 */
	@javax.annotation.Nullable public String getMac() {
		return mac;
	}

	public NIC name(@javax.annotation.Nullable String name) {
		this.name = name;
		return this;
	}

	/**
	 * The name for a General Object. Matches Names and also UUIDs.
	 *
	 * @return name
	 */
	@javax.annotation.Nullable public String getName() {
		return name;
	}

	public void setName(@javax.annotation.Nullable String name) {
		this.name = name;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return networkId
	 */
	@javax.annotation.Nullable public UUID getNetworkId() {
		return networkId;
	}

	public NIC nicSecurity(@javax.annotation.Nullable Boolean nicSecurity) {
		this.nicSecurity = nicSecurity;
		return this;
	}

	/**
	 * If this is set to false, then no security groups will apply to this network interface.
	 *
	 * @return nicSecurity
	 */
	@javax.annotation.Nullable public Boolean getNicSecurity() {
		return nicSecurity;
	}

	public void setNicSecurity(@javax.annotation.Nullable Boolean nicSecurity) {
		this.nicSecurity = nicSecurity;
	}

	public NIC securityGroups(@javax.annotation.Nullable List<UUID> securityGroups) {
		this.securityGroups = securityGroups;
		return this;
	}

	public NIC addSecurityGroupsItem(UUID securityGroupsItem) {
		if (this.securityGroups == null) {
			this.securityGroups = new ArrayList<>();
		}
		this.securityGroups.add(securityGroupsItem);
		return this;
	}

	/**
	 * A list of UUIDs.
	 *
	 * @return securityGroups
	 */
	@javax.annotation.Nullable public List<UUID> getSecurityGroups() {
		return securityGroups;
	}

	public void setSecurityGroups(@javax.annotation.Nullable List<UUID> securityGroups) {
		this.securityGroups = securityGroups;
	}

	/**
	 * Possible values: &#x60;ACTIVE&#x60;, &#x60;DOWN&#x60;.
	 *
	 * @return status
	 */
	@javax.annotation.Nullable public String getStatus() {
		return status;
	}

	/**
	 * Possible values: &#x60;server&#x60;, &#x60;metadata&#x60;, &#x60;gateway&#x60;,
	 * &#x60;none&#x60;.
	 *
	 * @return type
	 */
	@javax.annotation.Nullable public String getType() {
		return type;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		NIC NIC = (NIC) o;
		return Objects.equals(this.allowedAddresses, NIC.allowedAddresses)
				&& Objects.equals(this.device, NIC.device)
				&& Objects.equals(this.id, NIC.id)
				&& Objects.equals(this.ipv4, NIC.ipv4)
				&& Objects.equals(this.ipv6, NIC.ipv6)
				&& Objects.equals(this.labels, NIC.labels)
				&& Objects.equals(this.mac, NIC.mac)
				&& Objects.equals(this.name, NIC.name)
				&& Objects.equals(this.networkId, NIC.networkId)
				&& Objects.equals(this.nicSecurity, NIC.nicSecurity)
				&& Objects.equals(this.securityGroups, NIC.securityGroups)
				&& Objects.equals(this.status, NIC.status)
				&& Objects.equals(this.type, NIC.type);
	}

	@Override
	public int hashCode() {
		return Objects.hash(
				allowedAddresses,
				device,
				id,
				ipv4,
				ipv6,
				labels,
				mac,
				name,
				networkId,
				nicSecurity,
				securityGroups,
				status,
				type);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class NIC {\n");
		sb.append("    allowedAddresses: ").append(toIndentedString(allowedAddresses)).append("\n");
		sb.append("    device: ").append(toIndentedString(device)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    ipv4: ").append(toIndentedString(ipv4)).append("\n");
		sb.append("    ipv6: ").append(toIndentedString(ipv6)).append("\n");
		sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
		sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
		sb.append("    nicSecurity: ").append(toIndentedString(nicSecurity)).append("\n");
		sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"allowedAddresses",
								"device",
								"id",
								"ipv4",
								"ipv6",
								"labels",
								"mac",
								"name",
								"networkId",
								"nicSecurity",
								"securityGroups",
								"status",
								"type"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(0);
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to NIC
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!NIC.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in NIC is not found in the empty JSON string",
								NIC.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!NIC.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `NIC` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if (jsonObj.get("allowedAddresses") != null
				&& !jsonObj.get("allowedAddresses").isJsonNull()) {
			JsonArray jsonArrayallowedAddresses = jsonObj.getAsJsonArray("allowedAddresses");
			if (jsonArrayallowedAddresses != null) {
				// ensure the json data is an array
				if (!jsonObj.get("allowedAddresses").isJsonArray()) {
					throw new IllegalArgumentException(
							String.format(
									"Expected the field `allowedAddresses` to be an array in the JSON string but got `%s`",
									jsonObj.get("allowedAddresses").toString()));
				}

				// validate the optional field `allowedAddresses` (array)
				for (int i = 0; i < jsonArrayallowedAddresses.size(); i++) {
					AllowedAddressesInner.validateJsonElement(jsonArrayallowedAddresses.get(i));
				}
				;
			}
		}
		if ((jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull())
				&& !jsonObj.get("device").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `device` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("device").toString()));
		}
		if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
				&& !jsonObj.get("id").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `id` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("id").toString()));
		}
		if ((jsonObj.get("ipv4") != null && !jsonObj.get("ipv4").isJsonNull())
				&& !jsonObj.get("ipv4").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `ipv4` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("ipv4").toString()));
		}
		if ((jsonObj.get("ipv6") != null && !jsonObj.get("ipv6").isJsonNull())
				&& !jsonObj.get("ipv6").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `ipv6` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("ipv6").toString()));
		}
		if ((jsonObj.get("mac") != null && !jsonObj.get("mac").isJsonNull())
				&& !jsonObj.get("mac").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `mac` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("mac").toString()));
		}
		if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
				&& !jsonObj.get("name").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `name` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("name").toString()));
		}
		if ((jsonObj.get("networkId") != null && !jsonObj.get("networkId").isJsonNull())
				&& !jsonObj.get("networkId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `networkId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("networkId").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("securityGroups") != null
				&& !jsonObj.get("securityGroups").isJsonNull()
				&& !jsonObj.get("securityGroups").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `securityGroups` to be an array in the JSON string but got `%s`",
							jsonObj.get("securityGroups").toString()));
		}
		if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
				&& !jsonObj.get("status").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `status` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("status").toString()));
		}
		if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
				&& !jsonObj.get("type").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `type` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("type").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!NIC.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'NIC' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<NIC> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(NIC.class));

			return (TypeAdapter<T>)
					new TypeAdapter<NIC>() {
						@Override
						public void write(JsonWriter out, NIC value) throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public NIC read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of NIC given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of NIC
	 * @throws IOException if the JSON string is invalid with respect to NIC
	 */
	public static NIC fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, NIC.class);
	}

	/**
	 * Convert an instance of NIC to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
