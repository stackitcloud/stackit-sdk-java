/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/**
 * Object that represents a volume and its parameters. Volumes sized up to 16000GB are supported.
 */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.14.0")
public class Volume {
	public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "availabilityZone";

	@SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
	@javax.annotation.Nonnull
	private String availabilityZone;

	public static final String SERIALIZED_NAME_BOOTABLE = "bootable";

	@SerializedName(SERIALIZED_NAME_BOOTABLE)
	@javax.annotation.Nullable private Boolean bootable;

	public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

	@SerializedName(SERIALIZED_NAME_CREATED_AT)
	@javax.annotation.Nullable private OffsetDateTime createdAt;

	public static final String SERIALIZED_NAME_DESCRIPTION = "description";

	@SerializedName(SERIALIZED_NAME_DESCRIPTION)
	@javax.annotation.Nullable private String description;

	public static final String SERIALIZED_NAME_ENCRYPTED = "encrypted";

	@SerializedName(SERIALIZED_NAME_ENCRYPTED)
	@javax.annotation.Nullable private Boolean encrypted;

	public static final String SERIALIZED_NAME_ENCRYPTION_PARAMETERS = "encryptionParameters";

	@SerializedName(SERIALIZED_NAME_ENCRYPTION_PARAMETERS)
	@javax.annotation.Nullable private VolumeEncryptionParameter encryptionParameters;

	public static final String SERIALIZED_NAME_ID = "id";

	@SerializedName(SERIALIZED_NAME_ID)
	@javax.annotation.Nullable private UUID id;

	public static final String SERIALIZED_NAME_IMAGE_CONFIG = "imageConfig";

	@SerializedName(SERIALIZED_NAME_IMAGE_CONFIG)
	@javax.annotation.Nullable private ImageConfig imageConfig;

	public static final String SERIALIZED_NAME_LABELS = "labels";

	@SerializedName(SERIALIZED_NAME_LABELS)
	@javax.annotation.Nullable private Object labels;

	public static final String SERIALIZED_NAME_NAME = "name";

	@SerializedName(SERIALIZED_NAME_NAME)
	@javax.annotation.Nullable private String name;

	public static final String SERIALIZED_NAME_PERFORMANCE_CLASS = "performanceClass";

	@SerializedName(SERIALIZED_NAME_PERFORMANCE_CLASS)
	@javax.annotation.Nullable private String performanceClass;

	public static final String SERIALIZED_NAME_SERVER_ID = "serverId";

	@SerializedName(SERIALIZED_NAME_SERVER_ID)
	@javax.annotation.Nullable private UUID serverId;

	public static final String SERIALIZED_NAME_SIZE = "size";

	@SerializedName(SERIALIZED_NAME_SIZE)
	@javax.annotation.Nullable private Long size;

	public static final String SERIALIZED_NAME_SOURCE = "source";

	@SerializedName(SERIALIZED_NAME_SOURCE)
	@javax.annotation.Nullable private VolumeSource source;

	public static final String SERIALIZED_NAME_STATUS = "status";

	@SerializedName(SERIALIZED_NAME_STATUS)
	@javax.annotation.Nullable private String status;

	public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

	@SerializedName(SERIALIZED_NAME_UPDATED_AT)
	@javax.annotation.Nullable private OffsetDateTime updatedAt;

	public Volume() {}

	public Volume(
			OffsetDateTime createdAt,
			Boolean encrypted,
			UUID id,
			ImageConfig imageConfig,
			UUID serverId,
			String status,
			OffsetDateTime updatedAt) {
		this();
		this.createdAt = createdAt;
		this.encrypted = encrypted;
		this.id = id;
		this.imageConfig = imageConfig;
		this.serverId = serverId;
		this.status = status;
		this.updatedAt = updatedAt;
	}

	public Volume availabilityZone(@javax.annotation.Nonnull String availabilityZone) {
		this.availabilityZone = availabilityZone;
		return this;
	}

	/**
	 * Object that represents an availability zone.
	 *
	 * @return availabilityZone
	 */
	@javax.annotation.Nonnull
	public String getAvailabilityZone() {
		return availabilityZone;
	}

	public void setAvailabilityZone(@javax.annotation.Nonnull String availabilityZone) {
		this.availabilityZone = availabilityZone;
	}

	public Volume bootable(@javax.annotation.Nullable Boolean bootable) {
		this.bootable = bootable;
		return this;
	}

	/**
	 * Indicates if a volume is bootable.
	 *
	 * @return bootable
	 */
	@javax.annotation.Nullable public Boolean getBootable() {
		return bootable;
	}

	public void setBootable(@javax.annotation.Nullable Boolean bootable) {
		this.bootable = bootable;
	}

	/**
	 * Date-time when resource was created.
	 *
	 * @return createdAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getCreatedAt() {
		return createdAt;
	}

	public Volume description(@javax.annotation.Nullable String description) {
		this.description = description;
		return this;
	}

	/**
	 * Description Object. Allows string up to 255 Characters.
	 *
	 * @return description
	 */
	@javax.annotation.Nullable public String getDescription() {
		return description;
	}

	public void setDescription(@javax.annotation.Nullable String description) {
		this.description = description;
	}

	/**
	 * Indicates if a volume is encrypted.
	 *
	 * @return encrypted
	 */
	@javax.annotation.Nullable public Boolean getEncrypted() {
		return encrypted;
	}

	public Volume encryptionParameters(
			@javax.annotation.Nullable VolumeEncryptionParameter encryptionParameters) {
		this.encryptionParameters = encryptionParameters;
		return this;
	}

	/**
	 * Get encryptionParameters
	 *
	 * @return encryptionParameters
	 */
	@javax.annotation.Nullable public VolumeEncryptionParameter getEncryptionParameters() {
		return encryptionParameters;
	}

	public void setEncryptionParameters(
			@javax.annotation.Nullable VolumeEncryptionParameter encryptionParameters) {
		this.encryptionParameters = encryptionParameters;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return id
	 */
	@javax.annotation.Nullable public UUID getId() {
		return id;
	}

	/**
	 * Get imageConfig
	 *
	 * @return imageConfig
	 */
	@javax.annotation.Nullable public ImageConfig getImageConfig() {
		return imageConfig;
	}

	public Volume labels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
		return this;
	}

	/**
	 * Object that represents the labels of an object. Regex for keys:
	 * &#x60;^[a-z]((-|_|[a-z0-9])){0,62}$&#x60;. Regex for values:
	 * &#x60;^(-|_|[a-z0-9]){0,63}$&#x60;. Providing a &#x60;null&#x60; value for a key will remove
	 * that key.
	 *
	 * @return labels
	 */
	@javax.annotation.Nullable public Object getLabels() {
		return labels;
	}

	public void setLabels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
	}

	public Volume name(@javax.annotation.Nullable String name) {
		this.name = name;
		return this;
	}

	/**
	 * The name for a General Object. Matches Names and also UUIDs.
	 *
	 * @return name
	 */
	@javax.annotation.Nullable public String getName() {
		return name;
	}

	public void setName(@javax.annotation.Nullable String name) {
		this.name = name;
	}

	public Volume performanceClass(@javax.annotation.Nullable String performanceClass) {
		this.performanceClass = performanceClass;
		return this;
	}

	/**
	 * The name for a General Object. Matches Names and also UUIDs.
	 *
	 * @return performanceClass
	 */
	@javax.annotation.Nullable public String getPerformanceClass() {
		return performanceClass;
	}

	public void setPerformanceClass(@javax.annotation.Nullable String performanceClass) {
		this.performanceClass = performanceClass;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return serverId
	 */
	@javax.annotation.Nullable public UUID getServerId() {
		return serverId;
	}

	public Volume size(@javax.annotation.Nullable Long size) {
		this.size = size;
		return this;
	}

	/**
	 * Size in Gigabyte.
	 *
	 * @return size
	 */
	@javax.annotation.Nullable public Long getSize() {
		return size;
	}

	public void setSize(@javax.annotation.Nullable Long size) {
		this.size = size;
	}

	public Volume source(@javax.annotation.Nullable VolumeSource source) {
		this.source = source;
		return this;
	}

	/**
	 * Get source
	 *
	 * @return source
	 */
	@javax.annotation.Nullable public VolumeSource getSource() {
		return source;
	}

	public void setSource(@javax.annotation.Nullable VolumeSource source) {
		this.source = source;
	}

	/**
	 * The status of a volume object. Possible values: &#x60;ATTACHED&#x60;, &#x60;ATTACHING&#x60;,
	 * &#x60;AVAILABLE&#x60;, &#x60;AWAITING-TRANSFER&#x60;, &#x60;BACKING-UP&#x60;,
	 * &#x60;CREATING&#x60;, &#x60;DELETED&#x60;, &#x60;DELETING&#x60;, &#x60;DETACHING&#x60;,
	 * &#x60;DOWNLOADING&#x60;, &#x60;ERROR&#x60;, &#x60;ERROR_BACKING-UP&#x60;,
	 * &#x60;ERROR_DELETING&#x60;, &#x60;ERROR_RESIZING&#x60;, &#x60;ERROR_RESTORING-BACKUP&#x60;,
	 * &#x60;MAINTENANCE&#x60;, &#x60;RESERVED&#x60;, &#x60;RESIZING&#x60;,
	 * &#x60;RESTORING-BACKUP&#x60;, &#x60;RETYPING&#x60;, &#x60;UPLOADING&#x60;.
	 *
	 * @return status
	 */
	@javax.annotation.Nullable public String getStatus() {
		return status;
	}

	/**
	 * Date-time when resource was last updated.
	 *
	 * @return updatedAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getUpdatedAt() {
		return updatedAt;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Volume volume = (Volume) o;
		return Objects.equals(this.availabilityZone, volume.availabilityZone)
				&& Objects.equals(this.bootable, volume.bootable)
				&& Objects.equals(this.createdAt, volume.createdAt)
				&& Objects.equals(this.description, volume.description)
				&& Objects.equals(this.encrypted, volume.encrypted)
				&& Objects.equals(this.encryptionParameters, volume.encryptionParameters)
				&& Objects.equals(this.id, volume.id)
				&& Objects.equals(this.imageConfig, volume.imageConfig)
				&& Objects.equals(this.labels, volume.labels)
				&& Objects.equals(this.name, volume.name)
				&& Objects.equals(this.performanceClass, volume.performanceClass)
				&& Objects.equals(this.serverId, volume.serverId)
				&& Objects.equals(this.size, volume.size)
				&& Objects.equals(this.source, volume.source)
				&& Objects.equals(this.status, volume.status)
				&& Objects.equals(this.updatedAt, volume.updatedAt);
	}

	@Override
	public int hashCode() {
		return Objects.hash(
				availabilityZone,
				bootable,
				createdAt,
				description,
				encrypted,
				encryptionParameters,
				id,
				imageConfig,
				labels,
				name,
				performanceClass,
				serverId,
				size,
				source,
				status,
				updatedAt);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Volume {\n");
		sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
		sb.append("    bootable: ").append(toIndentedString(bootable)).append("\n");
		sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    encrypted: ").append(toIndentedString(encrypted)).append("\n");
		sb.append("    encryptionParameters: ")
				.append(toIndentedString(encryptionParameters))
				.append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    imageConfig: ").append(toIndentedString(imageConfig)).append("\n");
		sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    performanceClass: ").append(toIndentedString(performanceClass)).append("\n");
		sb.append("    serverId: ").append(toIndentedString(serverId)).append("\n");
		sb.append("    size: ").append(toIndentedString(size)).append("\n");
		sb.append("    source: ").append(toIndentedString(source)).append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"availabilityZone",
								"bootable",
								"createdAt",
								"description",
								"encrypted",
								"encryptionParameters",
								"id",
								"imageConfig",
								"labels",
								"name",
								"performanceClass",
								"serverId",
								"size",
								"source",
								"status",
								"updatedAt"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(Arrays.asList("availabilityZone"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to Volume
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!Volume.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in Volume is not found in the empty JSON string",
								Volume.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!Volume.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `Volume` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : Volume.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if (!jsonObj.get("availabilityZone").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `availabilityZone` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("availabilityZone").toString()));
		}
		if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
				&& !jsonObj.get("description").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `description` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("description").toString()));
		}
		// validate the optional field `encryptionParameters`
		if (jsonObj.get("encryptionParameters") != null
				&& !jsonObj.get("encryptionParameters").isJsonNull()) {
			VolumeEncryptionParameter.validateJsonElement(jsonObj.get("encryptionParameters"));
		}
		if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
				&& !jsonObj.get("id").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `id` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("id").toString()));
		}
		// validate the optional field `imageConfig`
		if (jsonObj.get("imageConfig") != null && !jsonObj.get("imageConfig").isJsonNull()) {
			ImageConfig.validateJsonElement(jsonObj.get("imageConfig"));
		}
		if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
				&& !jsonObj.get("name").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `name` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("name").toString()));
		}
		if ((jsonObj.get("performanceClass") != null
						&& !jsonObj.get("performanceClass").isJsonNull())
				&& !jsonObj.get("performanceClass").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `performanceClass` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("performanceClass").toString()));
		}
		if ((jsonObj.get("serverId") != null && !jsonObj.get("serverId").isJsonNull())
				&& !jsonObj.get("serverId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `serverId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("serverId").toString()));
		}
		// validate the optional field `source`
		if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
			VolumeSource.validateJsonElement(jsonObj.get("source"));
		}
		if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
				&& !jsonObj.get("status").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `status` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("status").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!Volume.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'Volume' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<Volume> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(Volume.class));

			return (TypeAdapter<T>)
					new TypeAdapter<Volume>() {
						@Override
						public void write(JsonWriter out, Volume value) throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public Volume read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of Volume given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of Volume
	 * @throws IOException if the JSON string is invalid with respect to Volume
	 */
	public static Volume fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, Volume.class);
	}

	/**
	 * Convert an instance of Volume to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
