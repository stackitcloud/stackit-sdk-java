/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * Machine Type. Filterable Fields: &#x60;disk&#x60;, &#x60;extraSpecs&#x60;, &#x60;name&#x60;,
 * &#x60;ram&#x60;, &#x60;vcpus&#x60;.
 */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.14.0")
public class MachineType {
	public static final String SERIALIZED_NAME_DESCRIPTION = "description";

	@SerializedName(SERIALIZED_NAME_DESCRIPTION)
	@javax.annotation.Nullable private String description;

	public static final String SERIALIZED_NAME_DISK = "disk";

	@SerializedName(SERIALIZED_NAME_DISK)
	@javax.annotation.Nonnull
	private Long disk;

	public static final String SERIALIZED_NAME_EXTRA_SPECS = "extraSpecs";

	@SerializedName(SERIALIZED_NAME_EXTRA_SPECS)
	@javax.annotation.Nullable private Object extraSpecs;

	public static final String SERIALIZED_NAME_NAME = "name";

	@SerializedName(SERIALIZED_NAME_NAME)
	@javax.annotation.Nonnull
	private String name;

	public static final String SERIALIZED_NAME_RAM = "ram";

	@SerializedName(SERIALIZED_NAME_RAM)
	@javax.annotation.Nonnull
	private Long ram;

	public static final String SERIALIZED_NAME_VCPUS = "vcpus";

	@SerializedName(SERIALIZED_NAME_VCPUS)
	@javax.annotation.Nonnull
	private Long vcpus;

	public MachineType() {}

	public MachineType description(@javax.annotation.Nullable String description) {
		this.description = description;
		return this;
	}

	/**
	 * Description Object. Allows string up to 255 Characters.
	 *
	 * @return description
	 */
	@javax.annotation.Nullable public String getDescription() {
		return description;
	}

	public void setDescription(@javax.annotation.Nullable String description) {
		this.description = description;
	}

	public MachineType disk(@javax.annotation.Nonnull Long disk) {
		this.disk = disk;
		return this;
	}

	/**
	 * Size in Gigabyte.
	 *
	 * @return disk
	 */
	@javax.annotation.Nonnull
	public Long getDisk() {
		return disk;
	}

	public void setDisk(@javax.annotation.Nonnull Long disk) {
		this.disk = disk;
	}

	public MachineType extraSpecs(@javax.annotation.Nullable Object extraSpecs) {
		this.extraSpecs = extraSpecs;
		return this;
	}

	/**
	 * Properties to control certain aspects or scheduling behavior for an object.
	 *
	 * @return extraSpecs
	 */
	@javax.annotation.Nullable public Object getExtraSpecs() {
		return extraSpecs;
	}

	public void setExtraSpecs(@javax.annotation.Nullable Object extraSpecs) {
		this.extraSpecs = extraSpecs;
	}

	public MachineType name(@javax.annotation.Nonnull String name) {
		this.name = name;
		return this;
	}

	/**
	 * The name for a General Object. Matches Names and also UUIDs.
	 *
	 * @return name
	 */
	@javax.annotation.Nonnull
	public String getName() {
		return name;
	}

	public void setName(@javax.annotation.Nonnull String name) {
		this.name = name;
	}

	public MachineType ram(@javax.annotation.Nonnull Long ram) {
		this.ram = ram;
		return this;
	}

	/**
	 * Size in Megabyte.
	 *
	 * @return ram
	 */
	@javax.annotation.Nonnull
	public Long getRam() {
		return ram;
	}

	public void setRam(@javax.annotation.Nonnull Long ram) {
		this.ram = ram;
	}

	public MachineType vcpus(@javax.annotation.Nonnull Long vcpus) {
		this.vcpus = vcpus;
		return this;
	}

	/**
	 * The number of virtual CPUs of a server. minimum: 1
	 *
	 * @return vcpus
	 */
	@javax.annotation.Nonnull
	public Long getVcpus() {
		return vcpus;
	}

	public void setVcpus(@javax.annotation.Nonnull Long vcpus) {
		this.vcpus = vcpus;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		MachineType machineType = (MachineType) o;
		return Objects.equals(this.description, machineType.description)
				&& Objects.equals(this.disk, machineType.disk)
				&& Objects.equals(this.extraSpecs, machineType.extraSpecs)
				&& Objects.equals(this.name, machineType.name)
				&& Objects.equals(this.ram, machineType.ram)
				&& Objects.equals(this.vcpus, machineType.vcpus);
	}

	@Override
	public int hashCode() {
		return Objects.hash(description, disk, extraSpecs, name, ram, vcpus);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class MachineType {\n");
		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    disk: ").append(toIndentedString(disk)).append("\n");
		sb.append("    extraSpecs: ").append(toIndentedString(extraSpecs)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    ram: ").append(toIndentedString(ram)).append("\n");
		sb.append("    vcpus: ").append(toIndentedString(vcpus)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList("description", "disk", "extraSpecs", "name", "ram", "vcpus"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(Arrays.asList("disk", "name", "ram", "vcpus"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to MachineType
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!MachineType.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in MachineType is not found in the empty JSON string",
								MachineType.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!MachineType.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `MachineType` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : MachineType.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
				&& !jsonObj.get("description").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `description` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("description").toString()));
		}
		if (!jsonObj.get("name").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `name` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("name").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!MachineType.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'MachineType' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<MachineType> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(MachineType.class));

			return (TypeAdapter<T>)
					new TypeAdapter<MachineType>() {
						@Override
						public void write(JsonWriter out, MachineType value) throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public MachineType read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of MachineType given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of MachineType
	 * @throws IOException if the JSON string is invalid with respect to MachineType
	 */
	public static MachineType fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, MachineType.class);
	}

	/**
	 * Convert an instance of MachineType to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
