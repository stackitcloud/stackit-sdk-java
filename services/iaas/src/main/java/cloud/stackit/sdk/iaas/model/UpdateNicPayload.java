/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 2
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/** Object that represents a network interface update. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class UpdateNicPayload {
	public static final String SERIALIZED_NAME_ALLOWED_ADDRESSES = "allowedAddresses";

	@SerializedName(SERIALIZED_NAME_ALLOWED_ADDRESSES)
	@javax.annotation.Nullable private List<AllowedAddressesInner> allowedAddresses = new ArrayList<>();

	public static final String SERIALIZED_NAME_DESCRIPTION = "description";

	@SerializedName(SERIALIZED_NAME_DESCRIPTION)
	@javax.annotation.Nullable private String description;

	public static final String SERIALIZED_NAME_LABELS = "labels";

	@SerializedName(SERIALIZED_NAME_LABELS)
	@javax.annotation.Nullable private Object labels;

	public static final String SERIALIZED_NAME_NAME = "name";

	@SerializedName(SERIALIZED_NAME_NAME)
	@javax.annotation.Nullable private String name;

	public static final String SERIALIZED_NAME_NIC_SECURITY = "nicSecurity";

	@SerializedName(SERIALIZED_NAME_NIC_SECURITY)
	@javax.annotation.Nullable private Boolean nicSecurity;

	public static final String SERIALIZED_NAME_SECURITY_GROUPS = "securityGroups";

	@SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
	@javax.annotation.Nullable private List<UUID> securityGroups = new ArrayList<>();

	public UpdateNicPayload() {}

	public UpdateNicPayload allowedAddresses(
			@javax.annotation.Nullable List<AllowedAddressesInner> allowedAddresses) {
		this.allowedAddresses = allowedAddresses;
		return this;
	}

	public UpdateNicPayload addAllowedAddressesItem(AllowedAddressesInner allowedAddressesItem) {
		if (this.allowedAddresses == null) {
			this.allowedAddresses = new ArrayList<>();
		}
		this.allowedAddresses.add(allowedAddressesItem);
		return this;
	}

	/**
	 * A list of IPs or CIDR notations.
	 *
	 * @return allowedAddresses
	 */
	@javax.annotation.Nullable public List<AllowedAddressesInner> getAllowedAddresses() {
		return allowedAddresses;
	}

	public void setAllowedAddresses(
			@javax.annotation.Nullable List<AllowedAddressesInner> allowedAddresses) {
		this.allowedAddresses = allowedAddresses;
	}

	public UpdateNicPayload description(@javax.annotation.Nullable String description) {
		this.description = description;
		return this;
	}

	/**
	 * Description Object. Allows string up to 255 Characters.
	 *
	 * @return description
	 */
	@javax.annotation.Nullable public String getDescription() {
		return description;
	}

	public void setDescription(@javax.annotation.Nullable String description) {
		this.description = description;
	}

	public UpdateNicPayload labels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
		return this;
	}

	/**
	 * Object that represents the labels of an object. Regex for keys:
	 * &#x60;^(?&#x3D;.{1,63}$)([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$&#x60;. Regex for values:
	 * &#x60;^(?&#x3D;.{0,63}$)(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])*$&#x60;. Providing a
	 * &#x60;null&#x60; value for a key will remove that key.
	 *
	 * @return labels
	 */
	@javax.annotation.Nullable public Object getLabels() {
		return labels;
	}

	public void setLabels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
	}

	public UpdateNicPayload name(@javax.annotation.Nullable String name) {
		this.name = name;
		return this;
	}

	/**
	 * The name for a General Object. Matches Names and also UUIDs.
	 *
	 * @return name
	 */
	@javax.annotation.Nullable public String getName() {
		return name;
	}

	public void setName(@javax.annotation.Nullable String name) {
		this.name = name;
	}

	public UpdateNicPayload nicSecurity(@javax.annotation.Nullable Boolean nicSecurity) {
		this.nicSecurity = nicSecurity;
		return this;
	}

	/**
	 * If this is set to false, then no security groups will apply to this network interface.
	 *
	 * @return nicSecurity
	 */
	@javax.annotation.Nullable public Boolean getNicSecurity() {
		return nicSecurity;
	}

	public void setNicSecurity(@javax.annotation.Nullable Boolean nicSecurity) {
		this.nicSecurity = nicSecurity;
	}

	public UpdateNicPayload securityGroups(@javax.annotation.Nullable List<UUID> securityGroups) {
		this.securityGroups = securityGroups;
		return this;
	}

	public UpdateNicPayload addSecurityGroupsItem(UUID securityGroupsItem) {
		if (this.securityGroups == null) {
			this.securityGroups = new ArrayList<>();
		}
		this.securityGroups.add(securityGroupsItem);
		return this;
	}

	/**
	 * A list of UUIDs.
	 *
	 * @return securityGroups
	 */
	@javax.annotation.Nullable public List<UUID> getSecurityGroups() {
		return securityGroups;
	}

	public void setSecurityGroups(@javax.annotation.Nullable List<UUID> securityGroups) {
		this.securityGroups = securityGroups;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		UpdateNicPayload updateNicPayload = (UpdateNicPayload) o;
		return Objects.equals(this.allowedAddresses, updateNicPayload.allowedAddresses)
				&& Objects.equals(this.description, updateNicPayload.description)
				&& Objects.equals(this.labels, updateNicPayload.labels)
				&& Objects.equals(this.name, updateNicPayload.name)
				&& Objects.equals(this.nicSecurity, updateNicPayload.nicSecurity)
				&& Objects.equals(this.securityGroups, updateNicPayload.securityGroups);
	}

	@Override
	public int hashCode() {
		return Objects.hash(
				allowedAddresses, description, labels, name, nicSecurity, securityGroups);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class UpdateNicPayload {\n");
		sb.append("    allowedAddresses: ").append(toIndentedString(allowedAddresses)).append("\n");
		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    nicSecurity: ").append(toIndentedString(nicSecurity)).append("\n");
		sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"allowedAddresses",
								"description",
								"labels",
								"name",
								"nicSecurity",
								"securityGroups"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(0);
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to UpdateNicPayload
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!UpdateNicPayload.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in UpdateNicPayload is not found in the empty JSON string",
								UpdateNicPayload.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!UpdateNicPayload.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `UpdateNicPayload` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if (jsonObj.get("allowedAddresses") != null
				&& !jsonObj.get("allowedAddresses").isJsonNull()) {
			JsonArray jsonArrayallowedAddresses = jsonObj.getAsJsonArray("allowedAddresses");
			if (jsonArrayallowedAddresses != null) {
				// ensure the json data is an array
				if (!jsonObj.get("allowedAddresses").isJsonArray()) {
					throw new IllegalArgumentException(
							String.format(
									"Expected the field `allowedAddresses` to be an array in the JSON string but got `%s`",
									jsonObj.get("allowedAddresses").toString()));
				}

				// validate the optional field `allowedAddresses` (array)
				for (int i = 0; i < jsonArrayallowedAddresses.size(); i++) {
					AllowedAddressesInner.validateJsonElement(jsonArrayallowedAddresses.get(i));
				}
				;
			}
		}
		if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
				&& !jsonObj.get("description").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `description` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("description").toString()));
		}
		if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
				&& !jsonObj.get("name").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `name` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("name").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("securityGroups") != null
				&& !jsonObj.get("securityGroups").isJsonNull()
				&& !jsonObj.get("securityGroups").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `securityGroups` to be an array in the JSON string but got `%s`",
							jsonObj.get("securityGroups").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!UpdateNicPayload.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'UpdateNicPayload' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<UpdateNicPayload> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(UpdateNicPayload.class));

			return (TypeAdapter<T>)
					new TypeAdapter<UpdateNicPayload>() {
						@Override
						public void write(JsonWriter out, UpdateNicPayload value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public UpdateNicPayload read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of UpdateNicPayload given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of UpdateNicPayload
	 * @throws IOException if the JSON string is invalid with respect to UpdateNicPayload
	 */
	public static UpdateNicPayload fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, UpdateNicPayload.class);
	}

	/**
	 * Convert an instance of UpdateNicPayload to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
