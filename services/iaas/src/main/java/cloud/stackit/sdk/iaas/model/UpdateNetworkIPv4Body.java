/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 2
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** The config object for a IPv4 network update. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class UpdateNetworkIPv4Body {
	public static final String SERIALIZED_NAME_GATEWAY = "gateway";

	@SerializedName(SERIALIZED_NAME_GATEWAY)
	@javax.annotation.Nullable private String gateway;

	public static final String SERIALIZED_NAME_NAMESERVERS = "nameservers";

	@SerializedName(SERIALIZED_NAME_NAMESERVERS)
	@javax.annotation.Nullable private List<String> nameservers = new ArrayList<>();

	public UpdateNetworkIPv4Body() {}

	public UpdateNetworkIPv4Body gateway(@javax.annotation.Nullable String gateway) {
		this.gateway = gateway;
		return this;
	}

	/**
	 * The IPv4 gateway of a network. If not specified the first IP of the network will be assigned
	 * as the gateway. If &#39;null&#39; is sent, then the network doesn&#39;t have a gateway.
	 *
	 * @return gateway
	 */
	@javax.annotation.Nullable public String getGateway() {
		return gateway;
	}

	public void setGateway(@javax.annotation.Nullable String gateway) {
		this.gateway = gateway;
	}

	public UpdateNetworkIPv4Body nameservers(@javax.annotation.Nullable List<String> nameservers) {
		this.nameservers = nameservers;
		return this;
	}

	public UpdateNetworkIPv4Body addNameserversItem(String nameserversItem) {
		if (this.nameservers == null) {
			this.nameservers = new ArrayList<>();
		}
		this.nameservers.add(nameserversItem);
		return this;
	}

	/**
	 * A list containing DNS Servers/Nameservers for IPv4.
	 *
	 * @return nameservers
	 */
	@javax.annotation.Nullable public List<String> getNameservers() {
		return nameservers;
	}

	public void setNameservers(@javax.annotation.Nullable List<String> nameservers) {
		this.nameservers = nameservers;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		UpdateNetworkIPv4Body updateNetworkIPv4Body = (UpdateNetworkIPv4Body) o;
		return Objects.equals(this.gateway, updateNetworkIPv4Body.gateway)
				&& Objects.equals(this.nameservers, updateNetworkIPv4Body.nameservers);
	}

	private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
		return a == b
				|| (a != null
						&& b != null
						&& a.isPresent()
						&& b.isPresent()
						&& Objects.deepEquals(a.get(), b.get()));
	}

	@Override
	public int hashCode() {
		return Objects.hash(gateway, nameservers);
	}

	private static <T> int hashCodeNullable(JsonNullable<T> a) {
		if (a == null) {
			return 1;
		}
		return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class UpdateNetworkIPv4Body {\n");
		sb.append("    gateway: ").append(toIndentedString(gateway)).append("\n");
		sb.append("    nameservers: ").append(toIndentedString(nameservers)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>(Arrays.asList("gateway", "nameservers"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(0);
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkIPv4Body
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!UpdateNetworkIPv4Body.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in UpdateNetworkIPv4Body is not found in the empty JSON string",
								UpdateNetworkIPv4Body.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!UpdateNetworkIPv4Body.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `UpdateNetworkIPv4Body` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("gateway") != null && !jsonObj.get("gateway").isJsonNull())
				&& !jsonObj.get("gateway").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `gateway` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("gateway").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("nameservers") != null
				&& !jsonObj.get("nameservers").isJsonNull()
				&& !jsonObj.get("nameservers").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `nameservers` to be an array in the JSON string but got `%s`",
							jsonObj.get("nameservers").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!UpdateNetworkIPv4Body.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'UpdateNetworkIPv4Body' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<UpdateNetworkIPv4Body> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkIPv4Body.class));

			return (TypeAdapter<T>)
					new TypeAdapter<UpdateNetworkIPv4Body>() {
						@Override
						public void write(JsonWriter out, UpdateNetworkIPv4Body value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public UpdateNetworkIPv4Body read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of UpdateNetworkIPv4Body given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of UpdateNetworkIPv4Body
	 * @throws IOException if the JSON string is invalid with respect to UpdateNetworkIPv4Body
	 */
	public static UpdateNetworkIPv4Body fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, UpdateNetworkIPv4Body.class);
	}

	/**
	 * Convert an instance of UpdateNetworkIPv4Body to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
