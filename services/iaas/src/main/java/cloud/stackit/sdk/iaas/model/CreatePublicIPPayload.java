/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

/** Object that represents a public IP. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.14.0")
public class CreatePublicIPPayload {
	public static final String SERIALIZED_NAME_ID = "id";

	@SerializedName(SERIALIZED_NAME_ID)
	@javax.annotation.Nullable private UUID id;

	public static final String SERIALIZED_NAME_IP = "ip";

	@SerializedName(SERIALIZED_NAME_IP)
	@javax.annotation.Nullable private String ip;

	public static final String SERIALIZED_NAME_LABELS = "labels";

	@SerializedName(SERIALIZED_NAME_LABELS)
	@javax.annotation.Nullable private Object labels;

	public static final String SERIALIZED_NAME_NETWORK_INTERFACE = "networkInterface";

	@SerializedName(SERIALIZED_NAME_NETWORK_INTERFACE)
	@javax.annotation.Nullable private UUID networkInterface;

	public CreatePublicIPPayload() {}

	public CreatePublicIPPayload(UUID id, String ip) {
		this();
		this.id = id;
		this.ip = ip;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return id
	 */
	@javax.annotation.Nullable public UUID getId() {
		return id;
	}

	/**
	 * Object that represents an IP address.
	 *
	 * @return ip
	 */
	@javax.annotation.Nullable public String getIp() {
		return ip;
	}

	public CreatePublicIPPayload labels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
		return this;
	}

	/**
	 * Object that represents the labels of an object. Regex for keys:
	 * &#x60;^[a-z]((-|_|[a-z0-9])){0,62}$&#x60;. Regex for values:
	 * &#x60;^(-|_|[a-z0-9]){0,63}$&#x60;. Providing a &#x60;null&#x60; value for a key will remove
	 * that key.
	 *
	 * @return labels
	 */
	@javax.annotation.Nullable public Object getLabels() {
		return labels;
	}

	public void setLabels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
	}

	public CreatePublicIPPayload networkInterface(
			@javax.annotation.Nullable UUID networkInterface) {
		this.networkInterface = networkInterface;
		return this;
	}

	/**
	 * Associate the public IP with a network interface (ID).
	 *
	 * @return networkInterface
	 */
	@javax.annotation.Nullable public UUID getNetworkInterface() {
		return networkInterface;
	}

	public void setNetworkInterface(@javax.annotation.Nullable UUID networkInterface) {
		this.networkInterface = networkInterface;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		CreatePublicIPPayload createPublicIPPayload = (CreatePublicIPPayload) o;
		return Objects.equals(this.id, createPublicIPPayload.id)
				&& Objects.equals(this.ip, createPublicIPPayload.ip)
				&& Objects.equals(this.labels, createPublicIPPayload.labels)
				&& Objects.equals(this.networkInterface, createPublicIPPayload.networkInterface);
	}

	private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
		return a == b
				|| (a != null
						&& b != null
						&& a.isPresent()
						&& b.isPresent()
						&& Objects.deepEquals(a.get(), b.get()));
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, ip, labels, networkInterface);
	}

	private static <T> int hashCodeNullable(JsonNullable<T> a) {
		if (a == null) {
			return 1;
		}
		return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class CreatePublicIPPayload {\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
		sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
		sb.append("    networkInterface: ").append(toIndentedString(networkInterface)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(Arrays.asList("id", "ip", "labels", "networkInterface"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(0);
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to CreatePublicIPPayload
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!CreatePublicIPPayload.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in CreatePublicIPPayload is not found in the empty JSON string",
								CreatePublicIPPayload.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!CreatePublicIPPayload.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `CreatePublicIPPayload` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
				&& !jsonObj.get("id").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `id` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("id").toString()));
		}
		if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull())
				&& !jsonObj.get("ip").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `ip` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("ip").toString()));
		}
		if ((jsonObj.get("networkInterface") != null
						&& !jsonObj.get("networkInterface").isJsonNull())
				&& !jsonObj.get("networkInterface").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `networkInterface` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("networkInterface").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!CreatePublicIPPayload.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'CreatePublicIPPayload' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<CreatePublicIPPayload> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(CreatePublicIPPayload.class));

			return (TypeAdapter<T>)
					new TypeAdapter<CreatePublicIPPayload>() {
						@Override
						public void write(JsonWriter out, CreatePublicIPPayload value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public CreatePublicIPPayload read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of CreatePublicIPPayload given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of CreatePublicIPPayload
	 * @throws IOException if the JSON string is invalid with respect to CreatePublicIPPayload
	 */
	public static CreatePublicIPPayload fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, CreatePublicIPPayload.class);
	}

	/**
	 * Convert an instance of CreatePublicIPPayload to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
