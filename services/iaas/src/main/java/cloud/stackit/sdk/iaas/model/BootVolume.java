/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/** The boot device for the server. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.14.0")
public class BootVolume {
	public static final String SERIALIZED_NAME_DELETE_ON_TERMINATION = "deleteOnTermination";

	@SerializedName(SERIALIZED_NAME_DELETE_ON_TERMINATION)
	@javax.annotation.Nullable private Boolean deleteOnTermination;

	public static final String SERIALIZED_NAME_ID = "id";

	@SerializedName(SERIALIZED_NAME_ID)
	@javax.annotation.Nullable private UUID id;

	public static final String SERIALIZED_NAME_PERFORMANCE_CLASS = "performanceClass";

	@SerializedName(SERIALIZED_NAME_PERFORMANCE_CLASS)
	@javax.annotation.Nullable private String performanceClass;

	public static final String SERIALIZED_NAME_SIZE = "size";

	@SerializedName(SERIALIZED_NAME_SIZE)
	@javax.annotation.Nullable private Long size;

	public static final String SERIALIZED_NAME_SOURCE = "source";

	@SerializedName(SERIALIZED_NAME_SOURCE)
	@javax.annotation.Nullable private BootVolumeSource source;

	public BootVolume() {}

	public BootVolume(UUID id) {
		this();
		this.id = id;
	}

	public BootVolume deleteOnTermination(@javax.annotation.Nullable Boolean deleteOnTermination) {
		this.deleteOnTermination = deleteOnTermination;
		return this;
	}

	/**
	 * Delete the volume during the termination of the server. Defaults to false.
	 *
	 * @return deleteOnTermination
	 */
	@javax.annotation.Nullable public Boolean getDeleteOnTermination() {
		return deleteOnTermination;
	}

	public void setDeleteOnTermination(@javax.annotation.Nullable Boolean deleteOnTermination) {
		this.deleteOnTermination = deleteOnTermination;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return id
	 */
	@javax.annotation.Nullable public UUID getId() {
		return id;
	}

	public BootVolume performanceClass(@javax.annotation.Nullable String performanceClass) {
		this.performanceClass = performanceClass;
		return this;
	}

	/**
	 * The name for a General Object. Matches Names and also UUIDs.
	 *
	 * @return performanceClass
	 */
	@javax.annotation.Nullable public String getPerformanceClass() {
		return performanceClass;
	}

	public void setPerformanceClass(@javax.annotation.Nullable String performanceClass) {
		this.performanceClass = performanceClass;
	}

	public BootVolume size(@javax.annotation.Nullable Long size) {
		this.size = size;
		return this;
	}

	/**
	 * Size in Gigabyte.
	 *
	 * @return size
	 */
	@javax.annotation.Nullable public Long getSize() {
		return size;
	}

	public void setSize(@javax.annotation.Nullable Long size) {
		this.size = size;
	}

	public BootVolume source(@javax.annotation.Nullable BootVolumeSource source) {
		this.source = source;
		return this;
	}

	/**
	 * Get source
	 *
	 * @return source
	 */
	@javax.annotation.Nullable public BootVolumeSource getSource() {
		return source;
	}

	public void setSource(@javax.annotation.Nullable BootVolumeSource source) {
		this.source = source;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		BootVolume bootVolume = (BootVolume) o;
		return Objects.equals(this.deleteOnTermination, bootVolume.deleteOnTermination)
				&& Objects.equals(this.id, bootVolume.id)
				&& Objects.equals(this.performanceClass, bootVolume.performanceClass)
				&& Objects.equals(this.size, bootVolume.size)
				&& Objects.equals(this.source, bootVolume.source);
	}

	@Override
	public int hashCode() {
		return Objects.hash(deleteOnTermination, id, performanceClass, size, source);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class BootVolume {\n");
		sb.append("    deleteOnTermination: ")
				.append(toIndentedString(deleteOnTermination))
				.append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    performanceClass: ").append(toIndentedString(performanceClass)).append("\n");
		sb.append("    size: ").append(toIndentedString(size)).append("\n");
		sb.append("    source: ").append(toIndentedString(source)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"deleteOnTermination", "id", "performanceClass", "size", "source"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(0);
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to BootVolume
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!BootVolume.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in BootVolume is not found in the empty JSON string",
								BootVolume.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!BootVolume.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `BootVolume` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
				&& !jsonObj.get("id").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `id` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("id").toString()));
		}
		if ((jsonObj.get("performanceClass") != null
						&& !jsonObj.get("performanceClass").isJsonNull())
				&& !jsonObj.get("performanceClass").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `performanceClass` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("performanceClass").toString()));
		}
		// validate the optional field `source`
		if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
			BootVolumeSource.validateJsonElement(jsonObj.get("source"));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!BootVolume.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'BootVolume' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<BootVolume> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(BootVolume.class));

			return (TypeAdapter<T>)
					new TypeAdapter<BootVolume>() {
						@Override
						public void write(JsonWriter out, BootVolume value) throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public BootVolume read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of BootVolume given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of BootVolume
	 * @throws IOException if the JSON string is invalid with respect to BootVolume
	 */
	public static BootVolume fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, BootVolume.class);
	}

	/**
	 * Convert an instance of BootVolume to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
