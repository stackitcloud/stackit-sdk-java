/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/** Representation of a single server object. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class Server {
	public static final String SERIALIZED_NAME_AFFINITY_GROUP = "affinityGroup";

	@SerializedName(SERIALIZED_NAME_AFFINITY_GROUP)
	@javax.annotation.Nullable private UUID affinityGroup;

	public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "availabilityZone";

	@SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
	@javax.annotation.Nullable private String availabilityZone;

	public static final String SERIALIZED_NAME_BOOT_VOLUME = "bootVolume";

	@SerializedName(SERIALIZED_NAME_BOOT_VOLUME)
	@javax.annotation.Nullable private BootVolume bootVolume;

	public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

	@SerializedName(SERIALIZED_NAME_CREATED_AT)
	@javax.annotation.Nullable private OffsetDateTime createdAt;

	public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";

	@SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
	@javax.annotation.Nullable private String errorMessage;

	public static final String SERIALIZED_NAME_ID = "id";

	@SerializedName(SERIALIZED_NAME_ID)
	@javax.annotation.Nullable private UUID id;

	public static final String SERIALIZED_NAME_IMAGE_ID = "imageId";

	@SerializedName(SERIALIZED_NAME_IMAGE_ID)
	@javax.annotation.Nullable private UUID imageId;

	public static final String SERIALIZED_NAME_KEYPAIR_NAME = "keypairName";

	@SerializedName(SERIALIZED_NAME_KEYPAIR_NAME)
	@javax.annotation.Nullable private String keypairName;

	public static final String SERIALIZED_NAME_LABELS = "labels";

	@SerializedName(SERIALIZED_NAME_LABELS)
	@javax.annotation.Nullable private Object labels;

	public static final String SERIALIZED_NAME_LAUNCHED_AT = "launchedAt";

	@SerializedName(SERIALIZED_NAME_LAUNCHED_AT)
	@javax.annotation.Nullable private OffsetDateTime launchedAt;

	public static final String SERIALIZED_NAME_MACHINE_TYPE = "machineType";

	@SerializedName(SERIALIZED_NAME_MACHINE_TYPE)
	@javax.annotation.Nonnull
	private String machineType;

	public static final String SERIALIZED_NAME_MAINTENANCE_WINDOW = "maintenanceWindow";

	@SerializedName(SERIALIZED_NAME_MAINTENANCE_WINDOW)
	@javax.annotation.Nullable private ServerMaintenance maintenanceWindow;

	public static final String SERIALIZED_NAME_METADATA = "metadata";

	@SerializedName(SERIALIZED_NAME_METADATA)
	@javax.annotation.Nullable private Object metadata;

	public static final String SERIALIZED_NAME_NAME = "name";

	@SerializedName(SERIALIZED_NAME_NAME)
	@javax.annotation.Nonnull
	private String name;

	public static final String SERIALIZED_NAME_NETWORKING = "networking";

	@SerializedName(SERIALIZED_NAME_NETWORKING)
	@javax.annotation.Nullable private CreateServerPayloadNetworking networking;

	public static final String SERIALIZED_NAME_NICS = "nics";

	@SerializedName(SERIALIZED_NAME_NICS)
	@javax.annotation.Nullable private List<ServerNetwork> nics;

	public static final String SERIALIZED_NAME_POWER_STATUS = "powerStatus";

	@SerializedName(SERIALIZED_NAME_POWER_STATUS)
	@javax.annotation.Nullable private String powerStatus;

	public static final String SERIALIZED_NAME_SECURITY_GROUPS = "securityGroups";

	@SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
	@javax.annotation.Nullable private List<String> securityGroups;

	public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_MAILS = "serviceAccountMails";

	@SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_MAILS)
	@javax.annotation.Nullable private List<String> serviceAccountMails;

	public static final String SERIALIZED_NAME_STATUS = "status";

	@SerializedName(SERIALIZED_NAME_STATUS)
	@javax.annotation.Nullable private String status;

	public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

	@SerializedName(SERIALIZED_NAME_UPDATED_AT)
	@javax.annotation.Nullable private OffsetDateTime updatedAt;

	public static final String SERIALIZED_NAME_USER_DATA = "userData";

	@SerializedName(SERIALIZED_NAME_USER_DATA)
	@javax.annotation.Nullable private byte[] userData;

	public static final String SERIALIZED_NAME_VOLUMES = "volumes";

	@SerializedName(SERIALIZED_NAME_VOLUMES)
	@javax.annotation.Nullable private List<UUID> volumes;

	public Server() {}

	public Server(
			OffsetDateTime createdAt,
			String errorMessage,
			UUID id,
			OffsetDateTime launchedAt,
			ServerMaintenance maintenanceWindow,
			List<ServerNetwork> nics,
			String powerStatus,
			String status,
			OffsetDateTime updatedAt) {
		this();
		this.createdAt = createdAt;
		this.errorMessage = errorMessage;
		this.id = id;
		this.launchedAt = launchedAt;
		this.maintenanceWindow = maintenanceWindow;
		this.nics = nics;
		this.powerStatus = powerStatus;
		this.status = status;
		this.updatedAt = updatedAt;
	}

	public Server affinityGroup(@javax.annotation.Nullable UUID affinityGroup) {
		this.affinityGroup = affinityGroup;
		return this;
	}

	/**
	 * The affinity group the server is assigned to.
	 *
	 * @return affinityGroup
	 */
	@javax.annotation.Nullable public UUID getAffinityGroup() {
		return affinityGroup;
	}

	public void setAffinityGroup(@javax.annotation.Nullable UUID affinityGroup) {
		this.affinityGroup = affinityGroup;
	}

	public Server availabilityZone(@javax.annotation.Nullable String availabilityZone) {
		this.availabilityZone = availabilityZone;
		return this;
	}

	/**
	 * This is the availability zone requested during server creation. If none is provided during
	 * the creation request and an existing volume will be used as boot volume it will be set to the
	 * same availability zone as the volume. For requests with no volumes involved it will be set to
	 * the metro availability zone.
	 *
	 * @return availabilityZone
	 */
	@javax.annotation.Nullable public String getAvailabilityZone() {
		return availabilityZone;
	}

	public void setAvailabilityZone(@javax.annotation.Nullable String availabilityZone) {
		this.availabilityZone = availabilityZone;
	}

	public Server bootVolume(@javax.annotation.Nullable BootVolume bootVolume) {
		this.bootVolume = bootVolume;
		return this;
	}

	/**
	 * Get bootVolume
	 *
	 * @return bootVolume
	 */
	@javax.annotation.Nullable public BootVolume getBootVolume() {
		return bootVolume;
	}

	public void setBootVolume(@javax.annotation.Nullable BootVolume bootVolume) {
		this.bootVolume = bootVolume;
	}

	/**
	 * Date-time when resource was created.
	 *
	 * @return createdAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getCreatedAt() {
		return createdAt;
	}

	/**
	 * An error message.
	 *
	 * @return errorMessage
	 */
	@javax.annotation.Nullable public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return id
	 */
	@javax.annotation.Nullable public UUID getId() {
		return id;
	}

	public Server imageId(@javax.annotation.Nullable UUID imageId) {
		this.imageId = imageId;
		return this;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return imageId
	 */
	@javax.annotation.Nullable public UUID getImageId() {
		return imageId;
	}

	public void setImageId(@javax.annotation.Nullable UUID imageId) {
		this.imageId = imageId;
	}

	public Server keypairName(@javax.annotation.Nullable String keypairName) {
		this.keypairName = keypairName;
		return this;
	}

	/**
	 * The SSH keypair used during the server creation.
	 *
	 * @return keypairName
	 */
	@javax.annotation.Nullable public String getKeypairName() {
		return keypairName;
	}

	public void setKeypairName(@javax.annotation.Nullable String keypairName) {
		this.keypairName = keypairName;
	}

	public Server labels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
		return this;
	}

	/**
	 * Object that represents the labels of an object. Regex for keys:
	 * &#x60;^[a-z]((-|_|[a-z0-9])){0,62}$&#x60;. Regex for values:
	 * &#x60;^(-|_|[a-z0-9]){0,63}$&#x60;. Providing a &#x60;null&#x60; value for a key will remove
	 * that key.
	 *
	 * @return labels
	 */
	@javax.annotation.Nullable public Object getLabels() {
		return labels;
	}

	public void setLabels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
	}

	/**
	 * Date-time when resource was launched.
	 *
	 * @return launchedAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getLaunchedAt() {
		return launchedAt;
	}

	public Server machineType(@javax.annotation.Nonnull String machineType) {
		this.machineType = machineType;
		return this;
	}

	/**
	 * Name of the machine type the server shall belong to.
	 *
	 * @return machineType
	 */
	@javax.annotation.Nonnull
	public String getMachineType() {
		return machineType;
	}

	public void setMachineType(@javax.annotation.Nonnull String machineType) {
		this.machineType = machineType;
	}

	/**
	 * Get maintenanceWindow
	 *
	 * @return maintenanceWindow
	 */
	@javax.annotation.Nullable public ServerMaintenance getMaintenanceWindow() {
		return maintenanceWindow;
	}

	public Server metadata(@javax.annotation.Nullable Object metadata) {
		this.metadata = metadata;
		return this;
	}

	/**
	 * Object that represents the metadata of an object. Regex for keys: &#x60;^[a-zA-Z0-9-_:.
	 * ]{1,255}$&#x60;. Regex for values: &#x60;^.{0,255}$&#x60;. Providing a &#x60;null&#x60; value
	 * for a key will remove that key.
	 *
	 * @return metadata
	 */
	@javax.annotation.Nullable public Object getMetadata() {
		return metadata;
	}

	public void setMetadata(@javax.annotation.Nullable Object metadata) {
		this.metadata = metadata;
	}

	public Server name(@javax.annotation.Nonnull String name) {
		this.name = name;
		return this;
	}

	/**
	 * The name for a Server.
	 *
	 * @return name
	 */
	@javax.annotation.Nonnull
	public String getName() {
		return name;
	}

	public void setName(@javax.annotation.Nonnull String name) {
		this.name = name;
	}

	public Server networking(@javax.annotation.Nullable CreateServerPayloadNetworking networking) {
		this.networking = networking;
		return this;
	}

	/**
	 * Get networking
	 *
	 * @return networking
	 */
	@javax.annotation.Nullable public CreateServerPayloadNetworking getNetworking() {
		return networking;
	}

	public void setNetworking(@javax.annotation.Nullable CreateServerPayloadNetworking networking) {
		this.networking = networking;
	}

	/**
	 * The list of network interfaces (NICs) attached to the server. Only shown when detailed
	 * information is requested.
	 *
	 * @return nics
	 */
	@javax.annotation.Nullable public List<ServerNetwork> getNics() {
		return nics;
	}

	/**
	 * The power status of a server. Possible values: &#x60;CRASHED&#x60;, &#x60;ERROR&#x60;,
	 * &#x60;RUNNING&#x60;, &#x60;STOPPED&#x60;.
	 *
	 * @return powerStatus
	 */
	@javax.annotation.Nullable public String getPowerStatus() {
		return powerStatus;
	}

	public Server securityGroups(@javax.annotation.Nullable List<String> securityGroups) {
		this.securityGroups = securityGroups;
		return this;
	}

	public Server addSecurityGroupsItem(String securityGroupsItem) {
		if (this.securityGroups == null) {
			this.securityGroups = new ArrayList<>();
		}
		this.securityGroups.add(securityGroupsItem);
		return this;
	}

	/**
	 * The initial security groups for the server creation.
	 *
	 * @return securityGroups
	 */
	@javax.annotation.Nullable public List<String> getSecurityGroups() {
		return securityGroups;
	}

	public void setSecurityGroups(@javax.annotation.Nullable List<String> securityGroups) {
		this.securityGroups = securityGroups;
	}

	public Server serviceAccountMails(@javax.annotation.Nullable List<String> serviceAccountMails) {
		this.serviceAccountMails = serviceAccountMails;
		return this;
	}

	public Server addServiceAccountMailsItem(String serviceAccountMailsItem) {
		if (this.serviceAccountMails == null) {
			this.serviceAccountMails = new ArrayList<>();
		}
		this.serviceAccountMails.add(serviceAccountMailsItem);
		return this;
	}

	/**
	 * A list of service account mails. Only shown when detailed information is requested.
	 *
	 * @return serviceAccountMails
	 */
	@javax.annotation.Nullable public List<String> getServiceAccountMails() {
		return serviceAccountMails;
	}

	public void setServiceAccountMails(
			@javax.annotation.Nullable List<String> serviceAccountMails) {
		this.serviceAccountMails = serviceAccountMails;
	}

	/**
	 * The status of a server object. Possible values: &#x60;ACTIVE&#x60;, &#x60;BACKING-UP&#x60;,
	 * &#x60;CREATING&#x60;, &#x60;DEALLOCATED&#x60;, &#x60;DEALLOCATING&#x60;, &#x60;DELETED&#x60;,
	 * &#x60;DELETING&#x60;, &#x60;ERROR&#x60;, &#x60;INACTIVE&#x60;, &#x60;MIGRATING&#x60;,
	 * &#x60;PAUSED&#x60;, &#x60;REBOOT&#x60;, &#x60;REBOOTING&#x60;, &#x60;REBUILD&#x60;,
	 * &#x60;REBUILDING&#x60;, &#x60;RESCUE&#x60;, &#x60;RESCUING&#x60;, &#x60;RESIZING&#x60;,
	 * &#x60;RESTORING&#x60;, &#x60;SNAPSHOTTING&#x60;, &#x60;STARTING&#x60;, &#x60;STOPPING&#x60;,
	 * &#x60;UNRESCUING&#x60;, &#x60;UPDATING&#x60;.
	 *
	 * @return status
	 */
	@javax.annotation.Nullable public String getStatus() {
		return status;
	}

	/**
	 * Date-time when resource was last updated.
	 *
	 * @return updatedAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getUpdatedAt() {
		return updatedAt;
	}

	public Server userData(@javax.annotation.Nullable byte[] userData) {
		this.userData = userData;
		return this;
	}

	/**
	 * User Data that is provided to the server. Must be base64 encoded and is passed via cloud-init
	 * to the server. Only shown when detailed information is requested.
	 *
	 * @return userData
	 */
	@javax.annotation.Nullable public byte[] getUserData() {
		return userData;
	}

	public void setUserData(@javax.annotation.Nullable byte[] userData) {
		this.userData = userData;
	}

	public Server volumes(@javax.annotation.Nullable List<UUID> volumes) {
		this.volumes = volumes;
		return this;
	}

	public Server addVolumesItem(UUID volumesItem) {
		if (this.volumes == null) {
			this.volumes = new ArrayList<>();
		}
		this.volumes.add(volumesItem);
		return this;
	}

	/**
	 * The list of volumes attached to the server.
	 *
	 * @return volumes
	 */
	@javax.annotation.Nullable public List<UUID> getVolumes() {
		return volumes;
	}

	public void setVolumes(@javax.annotation.Nullable List<UUID> volumes) {
		this.volumes = volumes;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Server server = (Server) o;
		return Objects.equals(this.affinityGroup, server.affinityGroup)
				&& Objects.equals(this.availabilityZone, server.availabilityZone)
				&& Objects.equals(this.bootVolume, server.bootVolume)
				&& Objects.equals(this.createdAt, server.createdAt)
				&& Objects.equals(this.errorMessage, server.errorMessage)
				&& Objects.equals(this.id, server.id)
				&& Objects.equals(this.imageId, server.imageId)
				&& Objects.equals(this.keypairName, server.keypairName)
				&& Objects.equals(this.labels, server.labels)
				&& Objects.equals(this.launchedAt, server.launchedAt)
				&& Objects.equals(this.machineType, server.machineType)
				&& Objects.equals(this.maintenanceWindow, server.maintenanceWindow)
				&& Objects.equals(this.metadata, server.metadata)
				&& Objects.equals(this.name, server.name)
				&& Objects.equals(this.networking, server.networking)
				&& Objects.equals(this.nics, server.nics)
				&& Objects.equals(this.powerStatus, server.powerStatus)
				&& Objects.equals(this.securityGroups, server.securityGroups)
				&& Objects.equals(this.serviceAccountMails, server.serviceAccountMails)
				&& Objects.equals(this.status, server.status)
				&& Objects.equals(this.updatedAt, server.updatedAt)
				&& Arrays.equals(this.userData, server.userData)
				&& Objects.equals(this.volumes, server.volumes);
	}

	@Override
	public int hashCode() {
		return Objects.hash(
				affinityGroup,
				availabilityZone,
				bootVolume,
				createdAt,
				errorMessage,
				id,
				imageId,
				keypairName,
				labels,
				launchedAt,
				machineType,
				maintenanceWindow,
				metadata,
				name,
				networking,
				nics,
				powerStatus,
				securityGroups,
				serviceAccountMails,
				status,
				updatedAt,
				Arrays.hashCode(userData),
				volumes);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Server {\n");
		sb.append("    affinityGroup: ").append(toIndentedString(affinityGroup)).append("\n");
		sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
		sb.append("    bootVolume: ").append(toIndentedString(bootVolume)).append("\n");
		sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
		sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
		sb.append("    keypairName: ").append(toIndentedString(keypairName)).append("\n");
		sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
		sb.append("    launchedAt: ").append(toIndentedString(launchedAt)).append("\n");
		sb.append("    machineType: ").append(toIndentedString(machineType)).append("\n");
		sb.append("    maintenanceWindow: ")
				.append(toIndentedString(maintenanceWindow))
				.append("\n");
		sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    networking: ").append(toIndentedString(networking)).append("\n");
		sb.append("    nics: ").append(toIndentedString(nics)).append("\n");
		sb.append("    powerStatus: ").append(toIndentedString(powerStatus)).append("\n");
		sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
		sb.append("    serviceAccountMails: ")
				.append(toIndentedString(serviceAccountMails))
				.append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
		sb.append("    userData: ").append(toIndentedString(userData)).append("\n");
		sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"affinityGroup",
								"availabilityZone",
								"bootVolume",
								"createdAt",
								"errorMessage",
								"id",
								"imageId",
								"keypairName",
								"labels",
								"launchedAt",
								"machineType",
								"maintenanceWindow",
								"metadata",
								"name",
								"networking",
								"nics",
								"powerStatus",
								"securityGroups",
								"serviceAccountMails",
								"status",
								"updatedAt",
								"userData",
								"volumes"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(Arrays.asList("machineType", "name"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to Server
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!Server.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in Server is not found in the empty JSON string",
								Server.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!Server.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `Server` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : Server.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("affinityGroup") != null && !jsonObj.get("affinityGroup").isJsonNull())
				&& !jsonObj.get("affinityGroup").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `affinityGroup` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("affinityGroup").toString()));
		}
		if ((jsonObj.get("availabilityZone") != null
						&& !jsonObj.get("availabilityZone").isJsonNull())
				&& !jsonObj.get("availabilityZone").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `availabilityZone` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("availabilityZone").toString()));
		}
		// validate the optional field `bootVolume`
		if (jsonObj.get("bootVolume") != null && !jsonObj.get("bootVolume").isJsonNull()) {
			BootVolume.validateJsonElement(jsonObj.get("bootVolume"));
		}
		if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull())
				&& !jsonObj.get("errorMessage").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("errorMessage").toString()));
		}
		if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
				&& !jsonObj.get("id").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `id` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("id").toString()));
		}
		if ((jsonObj.get("imageId") != null && !jsonObj.get("imageId").isJsonNull())
				&& !jsonObj.get("imageId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `imageId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("imageId").toString()));
		}
		if ((jsonObj.get("keypairName") != null && !jsonObj.get("keypairName").isJsonNull())
				&& !jsonObj.get("keypairName").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `keypairName` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("keypairName").toString()));
		}
		if (!jsonObj.get("machineType").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `machineType` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("machineType").toString()));
		}
		// validate the optional field `maintenanceWindow`
		if (jsonObj.get("maintenanceWindow") != null
				&& !jsonObj.get("maintenanceWindow").isJsonNull()) {
			ServerMaintenance.validateJsonElement(jsonObj.get("maintenanceWindow"));
		}
		if (!jsonObj.get("name").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `name` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("name").toString()));
		}
		// validate the optional field `networking`
		if (jsonObj.get("networking") != null && !jsonObj.get("networking").isJsonNull()) {
			CreateServerPayloadNetworking.validateJsonElement(jsonObj.get("networking"));
		}
		if (jsonObj.get("nics") != null && !jsonObj.get("nics").isJsonNull()) {
			JsonArray jsonArraynics = jsonObj.getAsJsonArray("nics");
			if (jsonArraynics != null) {
				// ensure the json data is an array
				if (!jsonObj.get("nics").isJsonArray()) {
					throw new IllegalArgumentException(
							String.format(
									"Expected the field `nics` to be an array in the JSON string but got `%s`",
									jsonObj.get("nics").toString()));
				}

				// validate the optional field `nics` (array)
				for (int i = 0; i < jsonArraynics.size(); i++) {
					ServerNetwork.validateJsonElement(jsonArraynics.get(i));
				}
				;
			}
		}
		if ((jsonObj.get("powerStatus") != null && !jsonObj.get("powerStatus").isJsonNull())
				&& !jsonObj.get("powerStatus").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `powerStatus` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("powerStatus").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("securityGroups") != null
				&& !jsonObj.get("securityGroups").isJsonNull()
				&& !jsonObj.get("securityGroups").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `securityGroups` to be an array in the JSON string but got `%s`",
							jsonObj.get("securityGroups").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("serviceAccountMails") != null
				&& !jsonObj.get("serviceAccountMails").isJsonNull()
				&& !jsonObj.get("serviceAccountMails").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `serviceAccountMails` to be an array in the JSON string but got `%s`",
							jsonObj.get("serviceAccountMails").toString()));
		}
		if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
				&& !jsonObj.get("status").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `status` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("status").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("volumes") != null
				&& !jsonObj.get("volumes").isJsonNull()
				&& !jsonObj.get("volumes").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `volumes` to be an array in the JSON string but got `%s`",
							jsonObj.get("volumes").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!Server.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'Server' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<Server> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(Server.class));

			return (TypeAdapter<T>)
					new TypeAdapter<Server>() {
						@Override
						public void write(JsonWriter out, Server value) throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public Server read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of Server given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of Server
	 * @throws IOException if the JSON string is invalid with respect to Server
	 */
	public static Server fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, Server.class);
	}

	/**
	 * Convert an instance of Server to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
