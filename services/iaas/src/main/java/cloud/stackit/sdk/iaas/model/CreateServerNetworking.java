/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 2beta1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/** The initial networking setup for the server creation with a network. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class CreateServerNetworking {
	public static final String SERIALIZED_NAME_NETWORK_ID = "networkId";

	@SerializedName(SERIALIZED_NAME_NETWORK_ID)
	@javax.annotation.Nullable private UUID networkId;

	public CreateServerNetworking() {}

	public CreateServerNetworking networkId(@javax.annotation.Nullable UUID networkId) {
		this.networkId = networkId;
		return this;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return networkId
	 */
	@javax.annotation.Nullable public UUID getNetworkId() {
		return networkId;
	}

	public void setNetworkId(@javax.annotation.Nullable UUID networkId) {
		this.networkId = networkId;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		CreateServerNetworking createServerNetworking = (CreateServerNetworking) o;
		return Objects.equals(this.networkId, createServerNetworking.networkId);
	}

	@Override
	public int hashCode() {
		return Objects.hash(networkId);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class CreateServerNetworking {\n");
		sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>(Arrays.asList("networkId"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(0);
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to CreateServerNetworking
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!CreateServerNetworking.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in CreateServerNetworking is not found in the empty JSON string",
								CreateServerNetworking.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!CreateServerNetworking.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `CreateServerNetworking` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("networkId") != null && !jsonObj.get("networkId").isJsonNull())
				&& !jsonObj.get("networkId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `networkId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("networkId").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!CreateServerNetworking.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'CreateServerNetworking' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<CreateServerNetworking> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(CreateServerNetworking.class));

			return (TypeAdapter<T>)
					new TypeAdapter<CreateServerNetworking>() {
						@Override
						public void write(JsonWriter out, CreateServerNetworking value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public CreateServerNetworking read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of CreateServerNetworking given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of CreateServerNetworking
	 * @throws IOException if the JSON string is invalid with respect to CreateServerNetworking
	 */
	public static CreateServerNetworking fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, CreateServerNetworking.class);
	}

	/**
	 * Convert an instance of CreateServerNetworking to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
