/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 2beta1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/** Object that represents a security group. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class SecurityGroup {
	public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

	@SerializedName(SERIALIZED_NAME_CREATED_AT)
	@javax.annotation.Nullable private OffsetDateTime createdAt;

	public static final String SERIALIZED_NAME_DESCRIPTION = "description";

	@SerializedName(SERIALIZED_NAME_DESCRIPTION)
	@javax.annotation.Nullable private String description;

	public static final String SERIALIZED_NAME_ID = "id";

	@SerializedName(SERIALIZED_NAME_ID)
	@javax.annotation.Nullable private UUID id;

	public static final String SERIALIZED_NAME_LABELS = "labels";

	@SerializedName(SERIALIZED_NAME_LABELS)
	@javax.annotation.Nullable private Object labels;

	public static final String SERIALIZED_NAME_NAME = "name";

	@SerializedName(SERIALIZED_NAME_NAME)
	@javax.annotation.Nonnull
	private String name;

	public static final String SERIALIZED_NAME_RULES = "rules";

	@SerializedName(SERIALIZED_NAME_RULES)
	@javax.annotation.Nullable private List<SecurityGroupRule> rules;

	public static final String SERIALIZED_NAME_STATEFUL = "stateful";

	@SerializedName(SERIALIZED_NAME_STATEFUL)
	@javax.annotation.Nullable private Boolean stateful = true;

	public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

	@SerializedName(SERIALIZED_NAME_UPDATED_AT)
	@javax.annotation.Nullable private OffsetDateTime updatedAt;

	public SecurityGroup() {}

	public SecurityGroup(
			OffsetDateTime createdAt,
			UUID id,
			List<SecurityGroupRule> rules,
			OffsetDateTime updatedAt) {
		this();
		this.createdAt = createdAt;
		this.id = id;
		this.rules = rules;
		this.updatedAt = updatedAt;
	}

	/**
	 * Date-time when resource was created.
	 *
	 * @return createdAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getCreatedAt() {
		return createdAt;
	}

	public SecurityGroup description(@javax.annotation.Nullable String description) {
		this.description = description;
		return this;
	}

	/**
	 * Description Object. Allows string up to 255 Characters.
	 *
	 * @return description
	 */
	@javax.annotation.Nullable public String getDescription() {
		return description;
	}

	public void setDescription(@javax.annotation.Nullable String description) {
		this.description = description;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return id
	 */
	@javax.annotation.Nullable public UUID getId() {
		return id;
	}

	public SecurityGroup labels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
		return this;
	}

	/**
	 * Object that represents the labels of an object. Regex for keys:
	 * &#x60;^(?&#x3D;.{1,63}$)([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$&#x60;. Regex for values:
	 * &#x60;^(?&#x3D;.{0,63}$)(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])*$&#x60;. Providing a
	 * &#x60;null&#x60; value for a key will remove that key.
	 *
	 * @return labels
	 */
	@javax.annotation.Nullable public Object getLabels() {
		return labels;
	}

	public void setLabels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
	}

	public SecurityGroup name(@javax.annotation.Nonnull String name) {
		this.name = name;
		return this;
	}

	/**
	 * The name for a General Object. Matches Names and also UUIDs.
	 *
	 * @return name
	 */
	@javax.annotation.Nonnull
	public String getName() {
		return name;
	}

	public void setName(@javax.annotation.Nonnull String name) {
		this.name = name;
	}

	/**
	 * A list containing security group rule objects.
	 *
	 * @return rules
	 */
	@javax.annotation.Nullable public List<SecurityGroupRule> getRules() {
		return rules;
	}

	public SecurityGroup stateful(@javax.annotation.Nullable Boolean stateful) {
		this.stateful = stateful;
		return this;
	}

	/**
	 * Shows if a security group is stateful or stateless. You can only have one type of security
	 * groups per network interface/server.
	 *
	 * @return stateful
	 */
	@javax.annotation.Nullable public Boolean getStateful() {
		return stateful;
	}

	public void setStateful(@javax.annotation.Nullable Boolean stateful) {
		this.stateful = stateful;
	}

	/**
	 * Date-time when resource was last updated.
	 *
	 * @return updatedAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getUpdatedAt() {
		return updatedAt;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		SecurityGroup securityGroup = (SecurityGroup) o;
		return Objects.equals(this.createdAt, securityGroup.createdAt)
				&& Objects.equals(this.description, securityGroup.description)
				&& Objects.equals(this.id, securityGroup.id)
				&& Objects.equals(this.labels, securityGroup.labels)
				&& Objects.equals(this.name, securityGroup.name)
				&& Objects.equals(this.rules, securityGroup.rules)
				&& Objects.equals(this.stateful, securityGroup.stateful)
				&& Objects.equals(this.updatedAt, securityGroup.updatedAt);
	}

	@Override
	public int hashCode() {
		return Objects.hash(createdAt, description, id, labels, name, rules, stateful, updatedAt);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class SecurityGroup {\n");
		sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
		sb.append("    stateful: ").append(toIndentedString(stateful)).append("\n");
		sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"createdAt",
								"description",
								"id",
								"labels",
								"name",
								"rules",
								"stateful",
								"updatedAt"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(Arrays.asList("name"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to SecurityGroup
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!SecurityGroup.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in SecurityGroup is not found in the empty JSON string",
								SecurityGroup.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!SecurityGroup.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `SecurityGroup` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : SecurityGroup.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
				&& !jsonObj.get("description").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `description` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("description").toString()));
		}
		if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
				&& !jsonObj.get("id").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `id` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("id").toString()));
		}
		if (!jsonObj.get("name").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `name` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("name").toString()));
		}
		if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
			JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
			if (jsonArrayrules != null) {
				// ensure the json data is an array
				if (!jsonObj.get("rules").isJsonArray()) {
					throw new IllegalArgumentException(
							String.format(
									"Expected the field `rules` to be an array in the JSON string but got `%s`",
									jsonObj.get("rules").toString()));
				}

				// validate the optional field `rules` (array)
				for (int i = 0; i < jsonArrayrules.size(); i++) {
					SecurityGroupRule.validateJsonElement(jsonArrayrules.get(i));
				}
				;
			}
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!SecurityGroup.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'SecurityGroup' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<SecurityGroup> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(SecurityGroup.class));

			return (TypeAdapter<T>)
					new TypeAdapter<SecurityGroup>() {
						@Override
						public void write(JsonWriter out, SecurityGroup value) throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public SecurityGroup read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of SecurityGroup given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of SecurityGroup
	 * @throws IOException if the JSON string is invalid with respect to SecurityGroup
	 */
	public static SecurityGroup fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, SecurityGroup.class);
	}

	/**
	 * Convert an instance of SecurityGroup to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
