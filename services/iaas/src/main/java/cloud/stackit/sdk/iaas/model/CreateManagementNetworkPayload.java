/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 2
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Object that represents the request body for a mgmt network create. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class CreateManagementNetworkPayload {
	public static final String SERIALIZED_NAME_IPV6_ASSIGNMENT = "ipv6Assignment";

	@SerializedName(SERIALIZED_NAME_IPV6_ASSIGNMENT)
	@javax.annotation.Nullable private String ipv6Assignment;

	public static final String SERIALIZED_NAME_NAME = "name";

	@SerializedName(SERIALIZED_NAME_NAME)
	@javax.annotation.Nonnull
	private String name;

	public CreateManagementNetworkPayload() {}

	public CreateManagementNetworkPayload ipv6Assignment(
			@javax.annotation.Nullable String ipv6Assignment) {
		this.ipv6Assignment = ipv6Assignment;
		return this;
	}

	/**
	 * IPv6 assignment method; either &#39;dhcp&#39; for stateful dhcpv6, or slaac for autoconfig.
	 * Possible values: &#x60;dhcp&#x60;, &#x60;slaac&#x60;.
	 *
	 * @return ipv6Assignment
	 */
	@javax.annotation.Nullable public String getIpv6Assignment() {
		return ipv6Assignment;
	}

	public void setIpv6Assignment(@javax.annotation.Nullable String ipv6Assignment) {
		this.ipv6Assignment = ipv6Assignment;
	}

	public CreateManagementNetworkPayload name(@javax.annotation.Nonnull String name) {
		this.name = name;
		return this;
	}

	/**
	 * The name for a General Object. Matches Names and also UUIDs.
	 *
	 * @return name
	 */
	@javax.annotation.Nonnull
	public String getName() {
		return name;
	}

	public void setName(@javax.annotation.Nonnull String name) {
		this.name = name;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		CreateManagementNetworkPayload createManagementNetworkPayload =
				(CreateManagementNetworkPayload) o;
		return Objects.equals(this.ipv6Assignment, createManagementNetworkPayload.ipv6Assignment)
				&& Objects.equals(this.name, createManagementNetworkPayload.name);
	}

	@Override
	public int hashCode() {
		return Objects.hash(ipv6Assignment, name);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class CreateManagementNetworkPayload {\n");
		sb.append("    ipv6Assignment: ").append(toIndentedString(ipv6Assignment)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>(Arrays.asList("ipv6Assignment", "name"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(Arrays.asList("name"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to
	 *     CreateManagementNetworkPayload
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!CreateManagementNetworkPayload.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in CreateManagementNetworkPayload is not found in the empty JSON string",
								CreateManagementNetworkPayload.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!CreateManagementNetworkPayload.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `CreateManagementNetworkPayload` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : CreateManagementNetworkPayload.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("ipv6Assignment") != null && !jsonObj.get("ipv6Assignment").isJsonNull())
				&& !jsonObj.get("ipv6Assignment").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `ipv6Assignment` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("ipv6Assignment").toString()));
		}
		if (!jsonObj.get("name").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `name` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("name").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!CreateManagementNetworkPayload.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'CreateManagementNetworkPayload' and its
				// subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<CreateManagementNetworkPayload> thisAdapter =
					gson.getDelegateAdapter(
							this, TypeToken.get(CreateManagementNetworkPayload.class));

			return (TypeAdapter<T>)
					new TypeAdapter<CreateManagementNetworkPayload>() {
						@Override
						public void write(JsonWriter out, CreateManagementNetworkPayload value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public CreateManagementNetworkPayload read(JsonReader in)
								throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of CreateManagementNetworkPayload given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of CreateManagementNetworkPayload
	 * @throws IOException if the JSON string is invalid with respect to
	 *     CreateManagementNetworkPayload
	 */
	public static CreateManagementNetworkPayload fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, CreateManagementNetworkPayload.class);
	}

	/**
	 * Convert an instance of CreateManagementNetworkPayload to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
