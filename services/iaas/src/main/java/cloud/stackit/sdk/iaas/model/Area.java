/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** The basic properties of a network area. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.14.0")
public class Area {
	public static final String SERIALIZED_NAME_DEFAULT_NAMESERVERS = "defaultNameservers";

	@SerializedName(SERIALIZED_NAME_DEFAULT_NAMESERVERS)
	@javax.annotation.Nullable private List<String> defaultNameservers = new ArrayList<>();

	public static final String SERIALIZED_NAME_NETWORK_RANGES = "networkRanges";

	@SerializedName(SERIALIZED_NAME_NETWORK_RANGES)
	@javax.annotation.Nullable private List<NetworkRange> networkRanges = new ArrayList<>();

	public static final String SERIALIZED_NAME_ROUTES = "routes";

	@SerializedName(SERIALIZED_NAME_ROUTES)
	@javax.annotation.Nullable private List<Route> routes = new ArrayList<>();

	public static final String SERIALIZED_NAME_TRANSFER_NETWORK = "transferNetwork";

	@SerializedName(SERIALIZED_NAME_TRANSFER_NETWORK)
	@javax.annotation.Nullable private String transferNetwork;

	public Area() {}

	public Area defaultNameservers(@javax.annotation.Nullable List<String> defaultNameservers) {
		this.defaultNameservers = defaultNameservers;
		return this;
	}

	public Area addDefaultNameserversItem(String defaultNameserversItem) {
		if (this.defaultNameservers == null) {
			this.defaultNameservers = new ArrayList<>();
		}
		this.defaultNameservers.add(defaultNameserversItem);
		return this;
	}

	/**
	 * A list containing DNS Servers/Nameservers for IPv4.
	 *
	 * @return defaultNameservers
	 */
	@javax.annotation.Nullable public List<String> getDefaultNameservers() {
		return defaultNameservers;
	}

	public void setDefaultNameservers(@javax.annotation.Nullable List<String> defaultNameservers) {
		this.defaultNameservers = defaultNameservers;
	}

	public Area networkRanges(@javax.annotation.Nullable List<NetworkRange> networkRanges) {
		this.networkRanges = networkRanges;
		return this;
	}

	public Area addNetworkRangesItem(NetworkRange networkRangesItem) {
		if (this.networkRanges == null) {
			this.networkRanges = new ArrayList<>();
		}
		this.networkRanges.add(networkRangesItem);
		return this;
	}

	/**
	 * A list of network ranges.
	 *
	 * @return networkRanges
	 */
	@javax.annotation.Nullable public List<NetworkRange> getNetworkRanges() {
		return networkRanges;
	}

	public void setNetworkRanges(@javax.annotation.Nullable List<NetworkRange> networkRanges) {
		this.networkRanges = networkRanges;
	}

	public Area routes(@javax.annotation.Nullable List<Route> routes) {
		this.routes = routes;
		return this;
	}

	public Area addRoutesItem(Route routesItem) {
		if (this.routes == null) {
			this.routes = new ArrayList<>();
		}
		this.routes.add(routesItem);
		return this;
	}

	/**
	 * A list of routes.
	 *
	 * @return routes
	 */
	@javax.annotation.Nullable public List<Route> getRoutes() {
		return routes;
	}

	public void setRoutes(@javax.annotation.Nullable List<Route> routes) {
		this.routes = routes;
	}

	public Area transferNetwork(@javax.annotation.Nullable String transferNetwork) {
		this.transferNetwork = transferNetwork;
		return this;
	}

	/**
	 * Classless Inter-Domain Routing (CIDR).
	 *
	 * @return transferNetwork
	 */
	@javax.annotation.Nullable public String getTransferNetwork() {
		return transferNetwork;
	}

	public void setTransferNetwork(@javax.annotation.Nullable String transferNetwork) {
		this.transferNetwork = transferNetwork;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Area area = (Area) o;
		return Objects.equals(this.defaultNameservers, area.defaultNameservers)
				&& Objects.equals(this.networkRanges, area.networkRanges)
				&& Objects.equals(this.routes, area.routes)
				&& Objects.equals(this.transferNetwork, area.transferNetwork);
	}

	@Override
	public int hashCode() {
		return Objects.hash(defaultNameservers, networkRanges, routes, transferNetwork);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Area {\n");
		sb.append("    defaultNameservers: ")
				.append(toIndentedString(defaultNameservers))
				.append("\n");
		sb.append("    networkRanges: ").append(toIndentedString(networkRanges)).append("\n");
		sb.append("    routes: ").append(toIndentedString(routes)).append("\n");
		sb.append("    transferNetwork: ").append(toIndentedString(transferNetwork)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"defaultNameservers",
								"networkRanges",
								"routes",
								"transferNetwork"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(0);
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to Area
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!Area.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in Area is not found in the empty JSON string",
								Area.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!Area.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `Area` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		// ensure the optional json data is an array if present
		if (jsonObj.get("defaultNameservers") != null
				&& !jsonObj.get("defaultNameservers").isJsonNull()
				&& !jsonObj.get("defaultNameservers").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `defaultNameservers` to be an array in the JSON string but got `%s`",
							jsonObj.get("defaultNameservers").toString()));
		}
		if (jsonObj.get("networkRanges") != null && !jsonObj.get("networkRanges").isJsonNull()) {
			JsonArray jsonArraynetworkRanges = jsonObj.getAsJsonArray("networkRanges");
			if (jsonArraynetworkRanges != null) {
				// ensure the json data is an array
				if (!jsonObj.get("networkRanges").isJsonArray()) {
					throw new IllegalArgumentException(
							String.format(
									"Expected the field `networkRanges` to be an array in the JSON string but got `%s`",
									jsonObj.get("networkRanges").toString()));
				}

				// validate the optional field `networkRanges` (array)
				for (int i = 0; i < jsonArraynetworkRanges.size(); i++) {
					NetworkRange.validateJsonElement(jsonArraynetworkRanges.get(i));
				}
				;
			}
		}
		if (jsonObj.get("routes") != null && !jsonObj.get("routes").isJsonNull()) {
			JsonArray jsonArrayroutes = jsonObj.getAsJsonArray("routes");
			if (jsonArrayroutes != null) {
				// ensure the json data is an array
				if (!jsonObj.get("routes").isJsonArray()) {
					throw new IllegalArgumentException(
							String.format(
									"Expected the field `routes` to be an array in the JSON string but got `%s`",
									jsonObj.get("routes").toString()));
				}

				// validate the optional field `routes` (array)
				for (int i = 0; i < jsonArrayroutes.size(); i++) {
					Route.validateJsonElement(jsonArrayroutes.get(i));
				}
				;
			}
		}
		if ((jsonObj.get("transferNetwork") != null && !jsonObj.get("transferNetwork").isJsonNull())
				&& !jsonObj.get("transferNetwork").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `transferNetwork` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("transferNetwork").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!Area.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'Area' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<Area> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(Area.class));

			return (TypeAdapter<T>)
					new TypeAdapter<Area>() {
						@Override
						public void write(JsonWriter out, Area value) throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public Area read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of Area given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of Area
	 * @throws IOException if the JSON string is invalid with respect to Area
	 */
	public static Area fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, Area.class);
	}

	/**
	 * Convert an instance of Area to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
