/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

/** Object that represents a network. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.14.0")
public class Network {
	public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

	@SerializedName(SERIALIZED_NAME_CREATED_AT)
	@javax.annotation.Nullable private OffsetDateTime createdAt;

	public static final String SERIALIZED_NAME_DHCP = "dhcp";

	@SerializedName(SERIALIZED_NAME_DHCP)
	@javax.annotation.Nullable private Boolean dhcp;

	public static final String SERIALIZED_NAME_GATEWAY = "gateway";

	@SerializedName(SERIALIZED_NAME_GATEWAY)
	@javax.annotation.Nullable private String gateway;

	public static final String SERIALIZED_NAME_GATEWAYV6 = "gatewayv6";

	@SerializedName(SERIALIZED_NAME_GATEWAYV6)
	@javax.annotation.Nullable private String gatewayv6;

	public static final String SERIALIZED_NAME_LABELS = "labels";

	@SerializedName(SERIALIZED_NAME_LABELS)
	@javax.annotation.Nullable private Object labels;

	public static final String SERIALIZED_NAME_NAME = "name";

	@SerializedName(SERIALIZED_NAME_NAME)
	@javax.annotation.Nonnull
	private String name;

	public static final String SERIALIZED_NAME_NAMESERVERS = "nameservers";

	@SerializedName(SERIALIZED_NAME_NAMESERVERS)
	@javax.annotation.Nullable private List<String> nameservers = new ArrayList<>();

	public static final String SERIALIZED_NAME_NAMESERVERS_V6 = "nameserversV6";

	@SerializedName(SERIALIZED_NAME_NAMESERVERS_V6)
	@javax.annotation.Nullable private List<String> nameserversV6 = new ArrayList<>();

	public static final String SERIALIZED_NAME_NETWORK_ID = "networkId";

	@SerializedName(SERIALIZED_NAME_NETWORK_ID)
	@javax.annotation.Nonnull
	private UUID networkId;

	public static final String SERIALIZED_NAME_PREFIXES = "prefixes";

	@SerializedName(SERIALIZED_NAME_PREFIXES)
	@javax.annotation.Nullable private List<String> prefixes = new ArrayList<>();

	public static final String SERIALIZED_NAME_PREFIXES_V6 = "prefixesV6";

	@SerializedName(SERIALIZED_NAME_PREFIXES_V6)
	@javax.annotation.Nullable private List<String> prefixesV6 = new ArrayList<>();

	public static final String SERIALIZED_NAME_PUBLIC_IP = "publicIp";

	@SerializedName(SERIALIZED_NAME_PUBLIC_IP)
	@javax.annotation.Nullable private String publicIp;

	public static final String SERIALIZED_NAME_ROUTED = "routed";

	@SerializedName(SERIALIZED_NAME_ROUTED)
	@javax.annotation.Nullable private Boolean routed;

	public static final String SERIALIZED_NAME_STATE = "state";

	@SerializedName(SERIALIZED_NAME_STATE)
	@javax.annotation.Nonnull
	private String state;

	public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

	@SerializedName(SERIALIZED_NAME_UPDATED_AT)
	@javax.annotation.Nullable private OffsetDateTime updatedAt;

	public Network() {}

	public Network(OffsetDateTime createdAt, OffsetDateTime updatedAt) {
		this();
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
	}

	/**
	 * Date-time when resource was created.
	 *
	 * @return createdAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getCreatedAt() {
		return createdAt;
	}

	public Network dhcp(@javax.annotation.Nullable Boolean dhcp) {
		this.dhcp = dhcp;
		return this;
	}

	/**
	 * Enable or disable DHCP for a network.
	 *
	 * @return dhcp
	 */
	@javax.annotation.Nullable public Boolean getDhcp() {
		return dhcp;
	}

	public void setDhcp(@javax.annotation.Nullable Boolean dhcp) {
		this.dhcp = dhcp;
	}

	public Network gateway(@javax.annotation.Nullable String gateway) {
		this.gateway = gateway;
		return this;
	}

	/**
	 * The gateway of a network. If not specified the first IP of the network will be assigned as
	 * the gateway. If &#39;null&#39; is sent, then the network doesn&#39;t have a gateway.
	 *
	 * @return gateway
	 */
	@javax.annotation.Nullable public String getGateway() {
		return gateway;
	}

	public void setGateway(@javax.annotation.Nullable String gateway) {
		this.gateway = gateway;
	}

	public Network gatewayv6(@javax.annotation.Nullable String gatewayv6) {
		this.gatewayv6 = gatewayv6;
		return this;
	}

	/**
	 * The gateway of a network. If not specified the first IP of the network will be assigned as
	 * the gateway. If &#39;null&#39; is sent, then the network doesn&#39;t have a gateway.
	 *
	 * @return gatewayv6
	 */
	@javax.annotation.Nullable public String getGatewayv6() {
		return gatewayv6;
	}

	public void setGatewayv6(@javax.annotation.Nullable String gatewayv6) {
		this.gatewayv6 = gatewayv6;
	}

	public Network labels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
		return this;
	}

	/**
	 * Object that represents the labels of an object. Regex for keys:
	 * &#x60;^[a-z]((-|_|[a-z0-9])){0,62}$&#x60;. Regex for values:
	 * &#x60;^(-|_|[a-z0-9]){0,63}$&#x60;. Providing a &#x60;null&#x60; value for a key will remove
	 * that key.
	 *
	 * @return labels
	 */
	@javax.annotation.Nullable public Object getLabels() {
		return labels;
	}

	public void setLabels(@javax.annotation.Nullable Object labels) {
		this.labels = labels;
	}

	public Network name(@javax.annotation.Nonnull String name) {
		this.name = name;
		return this;
	}

	/**
	 * Get name
	 *
	 * @return name
	 */
	@javax.annotation.Nonnull
	public String getName() {
		return name;
	}

	public void setName(@javax.annotation.Nonnull String name) {
		this.name = name;
	}

	public Network nameservers(@javax.annotation.Nullable List<String> nameservers) {
		this.nameservers = nameservers;
		return this;
	}

	public Network addNameserversItem(String nameserversItem) {
		if (this.nameservers == null) {
			this.nameservers = new ArrayList<>();
		}
		this.nameservers.add(nameserversItem);
		return this;
	}

	/**
	 * A list containing DNS Servers/Nameservers for IPv4.
	 *
	 * @return nameservers
	 */
	@javax.annotation.Nullable public List<String> getNameservers() {
		return nameservers;
	}

	public void setNameservers(@javax.annotation.Nullable List<String> nameservers) {
		this.nameservers = nameservers;
	}

	public Network nameserversV6(@javax.annotation.Nullable List<String> nameserversV6) {
		this.nameserversV6 = nameserversV6;
		return this;
	}

	public Network addNameserversV6Item(String nameserversV6Item) {
		if (this.nameserversV6 == null) {
			this.nameserversV6 = new ArrayList<>();
		}
		this.nameserversV6.add(nameserversV6Item);
		return this;
	}

	/**
	 * A list containing DNS Servers/Nameservers for IPv6.
	 *
	 * @return nameserversV6
	 */
	@javax.annotation.Nullable public List<String> getNameserversV6() {
		return nameserversV6;
	}

	public void setNameserversV6(@javax.annotation.Nullable List<String> nameserversV6) {
		this.nameserversV6 = nameserversV6;
	}

	public Network networkId(@javax.annotation.Nonnull UUID networkId) {
		this.networkId = networkId;
		return this;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return networkId
	 */
	@javax.annotation.Nonnull
	public UUID getNetworkId() {
		return networkId;
	}

	public void setNetworkId(@javax.annotation.Nonnull UUID networkId) {
		this.networkId = networkId;
	}

	public Network prefixes(@javax.annotation.Nullable List<String> prefixes) {
		this.prefixes = prefixes;
		return this;
	}

	public Network addPrefixesItem(String prefixesItem) {
		if (this.prefixes == null) {
			this.prefixes = new ArrayList<>();
		}
		this.prefixes.add(prefixesItem);
		return this;
	}

	/**
	 * Get prefixes
	 *
	 * @return prefixes
	 */
	@javax.annotation.Nullable public List<String> getPrefixes() {
		return prefixes;
	}

	public void setPrefixes(@javax.annotation.Nullable List<String> prefixes) {
		this.prefixes = prefixes;
	}

	public Network prefixesV6(@javax.annotation.Nullable List<String> prefixesV6) {
		this.prefixesV6 = prefixesV6;
		return this;
	}

	public Network addPrefixesV6Item(String prefixesV6Item) {
		if (this.prefixesV6 == null) {
			this.prefixesV6 = new ArrayList<>();
		}
		this.prefixesV6.add(prefixesV6Item);
		return this;
	}

	/**
	 * Get prefixesV6
	 *
	 * @return prefixesV6
	 */
	@javax.annotation.Nullable public List<String> getPrefixesV6() {
		return prefixesV6;
	}

	public void setPrefixesV6(@javax.annotation.Nullable List<String> prefixesV6) {
		this.prefixesV6 = prefixesV6;
	}

	public Network publicIp(@javax.annotation.Nullable String publicIp) {
		this.publicIp = publicIp;
		return this;
	}

	/**
	 * Object that represents an IP address.
	 *
	 * @return publicIp
	 */
	@javax.annotation.Nullable public String getPublicIp() {
		return publicIp;
	}

	public void setPublicIp(@javax.annotation.Nullable String publicIp) {
		this.publicIp = publicIp;
	}

	public Network routed(@javax.annotation.Nullable Boolean routed) {
		this.routed = routed;
		return this;
	}

	/**
	 * Shows if the network is routed and therefore accessible from other networks.
	 *
	 * @return routed
	 */
	@javax.annotation.Nullable public Boolean getRouted() {
		return routed;
	}

	public void setRouted(@javax.annotation.Nullable Boolean routed) {
		this.routed = routed;
	}

	public Network state(@javax.annotation.Nonnull String state) {
		this.state = state;
		return this;
	}

	/**
	 * The state of a resource object. Possible values: &#x60;CREATING&#x60;, &#x60;CREATED&#x60;,
	 * &#x60;DELETING&#x60;, &#x60;DELETED&#x60;, &#x60;FAILED&#x60;, &#x60;UPDATED&#x60;,
	 * &#x60;UPDATING&#x60;.
	 *
	 * @return state
	 */
	@javax.annotation.Nonnull
	public String getState() {
		return state;
	}

	public void setState(@javax.annotation.Nonnull String state) {
		this.state = state;
	}

	/**
	 * Date-time when resource was last updated.
	 *
	 * @return updatedAt
	 */
	@javax.annotation.Nullable public OffsetDateTime getUpdatedAt() {
		return updatedAt;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Network network = (Network) o;
		return Objects.equals(this.createdAt, network.createdAt)
				&& Objects.equals(this.dhcp, network.dhcp)
				&& Objects.equals(this.gateway, network.gateway)
				&& Objects.equals(this.gatewayv6, network.gatewayv6)
				&& Objects.equals(this.labels, network.labels)
				&& Objects.equals(this.name, network.name)
				&& Objects.equals(this.nameservers, network.nameservers)
				&& Objects.equals(this.nameserversV6, network.nameserversV6)
				&& Objects.equals(this.networkId, network.networkId)
				&& Objects.equals(this.prefixes, network.prefixes)
				&& Objects.equals(this.prefixesV6, network.prefixesV6)
				&& Objects.equals(this.publicIp, network.publicIp)
				&& Objects.equals(this.routed, network.routed)
				&& Objects.equals(this.state, network.state)
				&& Objects.equals(this.updatedAt, network.updatedAt);
	}

	private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
		return a == b
				|| (a != null
						&& b != null
						&& a.isPresent()
						&& b.isPresent()
						&& Objects.deepEquals(a.get(), b.get()));
	}

	@Override
	public int hashCode() {
		return Objects.hash(
				createdAt,
				dhcp,
				gateway,
				gatewayv6,
				labels,
				name,
				nameservers,
				nameserversV6,
				networkId,
				prefixes,
				prefixesV6,
				publicIp,
				routed,
				state,
				updatedAt);
	}

	private static <T> int hashCodeNullable(JsonNullable<T> a) {
		if (a == null) {
			return 1;
		}
		return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Network {\n");
		sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
		sb.append("    dhcp: ").append(toIndentedString(dhcp)).append("\n");
		sb.append("    gateway: ").append(toIndentedString(gateway)).append("\n");
		sb.append("    gatewayv6: ").append(toIndentedString(gatewayv6)).append("\n");
		sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    nameservers: ").append(toIndentedString(nameservers)).append("\n");
		sb.append("    nameserversV6: ").append(toIndentedString(nameserversV6)).append("\n");
		sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
		sb.append("    prefixes: ").append(toIndentedString(prefixes)).append("\n");
		sb.append("    prefixesV6: ").append(toIndentedString(prefixesV6)).append("\n");
		sb.append("    publicIp: ").append(toIndentedString(publicIp)).append("\n");
		sb.append("    routed: ").append(toIndentedString(routed)).append("\n");
		sb.append("    state: ").append(toIndentedString(state)).append("\n");
		sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"createdAt",
								"dhcp",
								"gateway",
								"gatewayv6",
								"labels",
								"name",
								"nameservers",
								"nameserversV6",
								"networkId",
								"prefixes",
								"prefixesV6",
								"publicIp",
								"routed",
								"state",
								"updatedAt"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(Arrays.asList("name", "networkId", "state"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to Network
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!Network.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in Network is not found in the empty JSON string",
								Network.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!Network.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `Network` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : Network.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("gateway") != null && !jsonObj.get("gateway").isJsonNull())
				&& !jsonObj.get("gateway").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `gateway` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("gateway").toString()));
		}
		if ((jsonObj.get("gatewayv6") != null && !jsonObj.get("gatewayv6").isJsonNull())
				&& !jsonObj.get("gatewayv6").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `gatewayv6` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("gatewayv6").toString()));
		}
		if (!jsonObj.get("name").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `name` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("name").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("nameservers") != null
				&& !jsonObj.get("nameservers").isJsonNull()
				&& !jsonObj.get("nameservers").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `nameservers` to be an array in the JSON string but got `%s`",
							jsonObj.get("nameservers").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("nameserversV6") != null
				&& !jsonObj.get("nameserversV6").isJsonNull()
				&& !jsonObj.get("nameserversV6").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `nameserversV6` to be an array in the JSON string but got `%s`",
							jsonObj.get("nameserversV6").toString()));
		}
		if (!jsonObj.get("networkId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `networkId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("networkId").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("prefixes") != null
				&& !jsonObj.get("prefixes").isJsonNull()
				&& !jsonObj.get("prefixes").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `prefixes` to be an array in the JSON string but got `%s`",
							jsonObj.get("prefixes").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("prefixesV6") != null
				&& !jsonObj.get("prefixesV6").isJsonNull()
				&& !jsonObj.get("prefixesV6").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `prefixesV6` to be an array in the JSON string but got `%s`",
							jsonObj.get("prefixesV6").toString()));
		}
		if ((jsonObj.get("publicIp") != null && !jsonObj.get("publicIp").isJsonNull())
				&& !jsonObj.get("publicIp").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `publicIp` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("publicIp").toString()));
		}
		if (!jsonObj.get("state").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `state` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("state").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!Network.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'Network' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<Network> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(Network.class));

			return (TypeAdapter<T>)
					new TypeAdapter<Network>() {
						@Override
						public void write(JsonWriter out, Network value) throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public Network read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of Network given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of Network
	 * @throws IOException if the JSON string is invalid with respect to Network
	 */
	public static Network fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, Network.class);
	}

	/**
	 * Convert an instance of Network to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
