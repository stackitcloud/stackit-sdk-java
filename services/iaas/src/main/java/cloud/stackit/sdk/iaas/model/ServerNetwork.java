/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/** Describes the object that matches servers to its networks. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.14.0")
public class ServerNetwork {
	public static final String SERIALIZED_NAME_ALLOWED_ADDRESSES = "allowedAddresses";

	@SerializedName(SERIALIZED_NAME_ALLOWED_ADDRESSES)
	@javax.annotation.Nullable private List<AllowedAddressesInner> allowedAddresses = new ArrayList<>();

	public static final String SERIALIZED_NAME_IPV4 = "ipv4";

	@SerializedName(SERIALIZED_NAME_IPV4)
	@javax.annotation.Nullable private String ipv4;

	public static final String SERIALIZED_NAME_IPV6 = "ipv6";

	@SerializedName(SERIALIZED_NAME_IPV6)
	@javax.annotation.Nullable private String ipv6;

	public static final String SERIALIZED_NAME_MAC = "mac";

	@SerializedName(SERIALIZED_NAME_MAC)
	@javax.annotation.Nonnull
	private String mac;

	public static final String SERIALIZED_NAME_NETWORK_ID = "networkId";

	@SerializedName(SERIALIZED_NAME_NETWORK_ID)
	@javax.annotation.Nonnull
	private UUID networkId;

	public static final String SERIALIZED_NAME_NETWORK_NAME = "networkName";

	@SerializedName(SERIALIZED_NAME_NETWORK_NAME)
	@javax.annotation.Nonnull
	private String networkName;

	public static final String SERIALIZED_NAME_NIC_ID = "nicId";

	@SerializedName(SERIALIZED_NAME_NIC_ID)
	@javax.annotation.Nonnull
	private UUID nicId;

	public static final String SERIALIZED_NAME_NIC_SECURITY = "nicSecurity";

	@SerializedName(SERIALIZED_NAME_NIC_SECURITY)
	@javax.annotation.Nonnull
	private Boolean nicSecurity;

	public static final String SERIALIZED_NAME_PUBLIC_IP = "publicIp";

	@SerializedName(SERIALIZED_NAME_PUBLIC_IP)
	@javax.annotation.Nullable private String publicIp;

	public static final String SERIALIZED_NAME_SECURITY_GROUPS = "securityGroups";

	@SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
	@javax.annotation.Nullable private List<UUID> securityGroups = new ArrayList<>();

	public ServerNetwork() {}

	public ServerNetwork allowedAddresses(
			@javax.annotation.Nullable List<AllowedAddressesInner> allowedAddresses) {
		this.allowedAddresses = allowedAddresses;
		return this;
	}

	public ServerNetwork addAllowedAddressesItem(AllowedAddressesInner allowedAddressesItem) {
		if (this.allowedAddresses == null) {
			this.allowedAddresses = new ArrayList<>();
		}
		this.allowedAddresses.add(allowedAddressesItem);
		return this;
	}

	/**
	 * A list of IPs or CIDR notations.
	 *
	 * @return allowedAddresses
	 */
	@javax.annotation.Nullable public List<AllowedAddressesInner> getAllowedAddresses() {
		return allowedAddresses;
	}

	public void setAllowedAddresses(
			@javax.annotation.Nullable List<AllowedAddressesInner> allowedAddresses) {
		this.allowedAddresses = allowedAddresses;
	}

	public ServerNetwork ipv4(@javax.annotation.Nullable String ipv4) {
		this.ipv4 = ipv4;
		return this;
	}

	/**
	 * Object that represents an IP address.
	 *
	 * @return ipv4
	 */
	@javax.annotation.Nullable public String getIpv4() {
		return ipv4;
	}

	public void setIpv4(@javax.annotation.Nullable String ipv4) {
		this.ipv4 = ipv4;
	}

	public ServerNetwork ipv6(@javax.annotation.Nullable String ipv6) {
		this.ipv6 = ipv6;
		return this;
	}

	/**
	 * String that represents an IPv6 address.
	 *
	 * @return ipv6
	 */
	@javax.annotation.Nullable public String getIpv6() {
		return ipv6;
	}

	public void setIpv6(@javax.annotation.Nullable String ipv6) {
		this.ipv6 = ipv6;
	}

	public ServerNetwork mac(@javax.annotation.Nonnull String mac) {
		this.mac = mac;
		return this;
	}

	/**
	 * Object that represents an MAC address.
	 *
	 * @return mac
	 */
	@javax.annotation.Nonnull
	public String getMac() {
		return mac;
	}

	public void setMac(@javax.annotation.Nonnull String mac) {
		this.mac = mac;
	}

	public ServerNetwork networkId(@javax.annotation.Nonnull UUID networkId) {
		this.networkId = networkId;
		return this;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return networkId
	 */
	@javax.annotation.Nonnull
	public UUID getNetworkId() {
		return networkId;
	}

	public void setNetworkId(@javax.annotation.Nonnull UUID networkId) {
		this.networkId = networkId;
	}

	public ServerNetwork networkName(@javax.annotation.Nonnull String networkName) {
		this.networkName = networkName;
		return this;
	}

	/**
	 * The name for a General Object. Matches Names and also UUIDs.
	 *
	 * @return networkName
	 */
	@javax.annotation.Nonnull
	public String getNetworkName() {
		return networkName;
	}

	public void setNetworkName(@javax.annotation.Nonnull String networkName) {
		this.networkName = networkName;
	}

	public ServerNetwork nicId(@javax.annotation.Nonnull UUID nicId) {
		this.nicId = nicId;
		return this;
	}

	/**
	 * Universally Unique Identifier (UUID).
	 *
	 * @return nicId
	 */
	@javax.annotation.Nonnull
	public UUID getNicId() {
		return nicId;
	}

	public void setNicId(@javax.annotation.Nonnull UUID nicId) {
		this.nicId = nicId;
	}

	public ServerNetwork nicSecurity(@javax.annotation.Nonnull Boolean nicSecurity) {
		this.nicSecurity = nicSecurity;
		return this;
	}

	/**
	 * If this is set to false, then no security groups will apply to this server network interface.
	 *
	 * @return nicSecurity
	 */
	@javax.annotation.Nonnull
	public Boolean getNicSecurity() {
		return nicSecurity;
	}

	public void setNicSecurity(@javax.annotation.Nonnull Boolean nicSecurity) {
		this.nicSecurity = nicSecurity;
	}

	public ServerNetwork publicIp(@javax.annotation.Nullable String publicIp) {
		this.publicIp = publicIp;
		return this;
	}

	/**
	 * Object that represents an IP address.
	 *
	 * @return publicIp
	 */
	@javax.annotation.Nullable public String getPublicIp() {
		return publicIp;
	}

	public void setPublicIp(@javax.annotation.Nullable String publicIp) {
		this.publicIp = publicIp;
	}

	public ServerNetwork securityGroups(@javax.annotation.Nullable List<UUID> securityGroups) {
		this.securityGroups = securityGroups;
		return this;
	}

	public ServerNetwork addSecurityGroupsItem(UUID securityGroupsItem) {
		if (this.securityGroups == null) {
			this.securityGroups = new ArrayList<>();
		}
		this.securityGroups.add(securityGroupsItem);
		return this;
	}

	/**
	 * A list of UUIDs.
	 *
	 * @return securityGroups
	 */
	@javax.annotation.Nullable public List<UUID> getSecurityGroups() {
		return securityGroups;
	}

	public void setSecurityGroups(@javax.annotation.Nullable List<UUID> securityGroups) {
		this.securityGroups = securityGroups;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ServerNetwork serverNetwork = (ServerNetwork) o;
		return Objects.equals(this.allowedAddresses, serverNetwork.allowedAddresses)
				&& Objects.equals(this.ipv4, serverNetwork.ipv4)
				&& Objects.equals(this.ipv6, serverNetwork.ipv6)
				&& Objects.equals(this.mac, serverNetwork.mac)
				&& Objects.equals(this.networkId, serverNetwork.networkId)
				&& Objects.equals(this.networkName, serverNetwork.networkName)
				&& Objects.equals(this.nicId, serverNetwork.nicId)
				&& Objects.equals(this.nicSecurity, serverNetwork.nicSecurity)
				&& Objects.equals(this.publicIp, serverNetwork.publicIp)
				&& Objects.equals(this.securityGroups, serverNetwork.securityGroups);
	}

	@Override
	public int hashCode() {
		return Objects.hash(
				allowedAddresses,
				ipv4,
				ipv6,
				mac,
				networkId,
				networkName,
				nicId,
				nicSecurity,
				publicIp,
				securityGroups);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ServerNetwork {\n");
		sb.append("    allowedAddresses: ").append(toIndentedString(allowedAddresses)).append("\n");
		sb.append("    ipv4: ").append(toIndentedString(ipv4)).append("\n");
		sb.append("    ipv6: ").append(toIndentedString(ipv6)).append("\n");
		sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
		sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
		sb.append("    networkName: ").append(toIndentedString(networkName)).append("\n");
		sb.append("    nicId: ").append(toIndentedString(nicId)).append("\n");
		sb.append("    nicSecurity: ").append(toIndentedString(nicSecurity)).append("\n");
		sb.append("    publicIp: ").append(toIndentedString(publicIp)).append("\n");
		sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"allowedAddresses",
								"ipv4",
								"ipv6",
								"mac",
								"networkId",
								"networkName",
								"nicId",
								"nicSecurity",
								"publicIp",
								"securityGroups"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields =
				new HashSet<String>(
						Arrays.asList("mac", "networkId", "networkName", "nicId", "nicSecurity"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to ServerNetwork
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!ServerNetwork.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in ServerNetwork is not found in the empty JSON string",
								ServerNetwork.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!ServerNetwork.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `ServerNetwork` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : ServerNetwork.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if (jsonObj.get("allowedAddresses") != null
				&& !jsonObj.get("allowedAddresses").isJsonNull()) {
			JsonArray jsonArrayallowedAddresses = jsonObj.getAsJsonArray("allowedAddresses");
			if (jsonArrayallowedAddresses != null) {
				// ensure the json data is an array
				if (!jsonObj.get("allowedAddresses").isJsonArray()) {
					throw new IllegalArgumentException(
							String.format(
									"Expected the field `allowedAddresses` to be an array in the JSON string but got `%s`",
									jsonObj.get("allowedAddresses").toString()));
				}

				// validate the optional field `allowedAddresses` (array)
				for (int i = 0; i < jsonArrayallowedAddresses.size(); i++) {
					AllowedAddressesInner.validateJsonElement(jsonArrayallowedAddresses.get(i));
				}
				;
			}
		}
		if ((jsonObj.get("ipv4") != null && !jsonObj.get("ipv4").isJsonNull())
				&& !jsonObj.get("ipv4").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `ipv4` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("ipv4").toString()));
		}
		if ((jsonObj.get("ipv6") != null && !jsonObj.get("ipv6").isJsonNull())
				&& !jsonObj.get("ipv6").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `ipv6` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("ipv6").toString()));
		}
		if (!jsonObj.get("mac").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `mac` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("mac").toString()));
		}
		if (!jsonObj.get("networkId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `networkId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("networkId").toString()));
		}
		if (!jsonObj.get("networkName").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `networkName` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("networkName").toString()));
		}
		if (!jsonObj.get("nicId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `nicId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("nicId").toString()));
		}
		if ((jsonObj.get("publicIp") != null && !jsonObj.get("publicIp").isJsonNull())
				&& !jsonObj.get("publicIp").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `publicIp` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("publicIp").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("securityGroups") != null
				&& !jsonObj.get("securityGroups").isJsonNull()
				&& !jsonObj.get("securityGroups").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `securityGroups` to be an array in the JSON string but got `%s`",
							jsonObj.get("securityGroups").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!ServerNetwork.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'ServerNetwork' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<ServerNetwork> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(ServerNetwork.class));

			return (TypeAdapter<T>)
					new TypeAdapter<ServerNetwork>() {
						@Override
						public void write(JsonWriter out, ServerNetwork value) throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public ServerNetwork read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of ServerNetwork given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of ServerNetwork
	 * @throws IOException if the JSON string is invalid with respect to ServerNetwork
	 */
	public static ServerNetwork fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, ServerNetwork.class);
	}

	/**
	 * Convert an instance of ServerNetwork to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
