/*
 * IaaS-API
 * This API allows you to create and modify IaaS resources.
 *
 * The version of the OpenAPI document: 1
 * Contact: stackit-iaas@mail.schwarz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.iaas.model;

import cloud.stackit.sdk.iaas.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/**
 * Parameter to connect to a key-encryption-key within the STACKIT-KMS to create encrypted volumes.
 * If no key_payload is set, a random passphrase is generated, which will be encrypted against the
 * STACKIT-KMS. These parameter never leave the backend again. So these parameters are not in the
 * responses.
 */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class VolumeEncryptionParameter {
	public static final String SERIALIZED_NAME_KEK_KEY_ID = "kekKeyId";

	@SerializedName(SERIALIZED_NAME_KEK_KEY_ID)
	@javax.annotation.Nonnull
	private UUID kekKeyId;

	public static final String SERIALIZED_NAME_KEK_KEY_VERSION = "kekKeyVersion";

	@SerializedName(SERIALIZED_NAME_KEK_KEY_VERSION)
	@javax.annotation.Nonnull
	private Long kekKeyVersion;

	public static final String SERIALIZED_NAME_KEK_KEYRING_ID = "kekKeyringId";

	@SerializedName(SERIALIZED_NAME_KEK_KEYRING_ID)
	@javax.annotation.Nonnull
	private UUID kekKeyringId;

	public static final String SERIALIZED_NAME_KEK_PROJECT_ID = "kekProjectId";

	@SerializedName(SERIALIZED_NAME_KEK_PROJECT_ID)
	@javax.annotation.Nullable private UUID kekProjectId;

	public static final String SERIALIZED_NAME_KEY_PAYLOAD = "keyPayload";

	@SerializedName(SERIALIZED_NAME_KEY_PAYLOAD)
	@javax.annotation.Nullable private byte[] keyPayload;

	public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";

	@SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
	@javax.annotation.Nonnull
	private String serviceAccount;

	public VolumeEncryptionParameter() {}

	public VolumeEncryptionParameter kekKeyId(@javax.annotation.Nonnull UUID kekKeyId) {
		this.kekKeyId = kekKeyId;
		return this;
	}

	/**
	 * UUID of the Key within the STACKIT-KMS to use for the encryption.
	 *
	 * @return kekKeyId
	 */
	@javax.annotation.Nonnull
	public UUID getKekKeyId() {
		return kekKeyId;
	}

	public void setKekKeyId(@javax.annotation.Nonnull UUID kekKeyId) {
		this.kekKeyId = kekKeyId;
	}

	public VolumeEncryptionParameter kekKeyVersion(@javax.annotation.Nonnull Long kekKeyVersion) {
		this.kekKeyVersion = kekKeyVersion;
		return this;
	}

	/**
	 * Version of the key within the STACKIT-KMS to use for the encryption.
	 *
	 * @return kekKeyVersion
	 */
	@javax.annotation.Nonnull
	public Long getKekKeyVersion() {
		return kekKeyVersion;
	}

	public void setKekKeyVersion(@javax.annotation.Nonnull Long kekKeyVersion) {
		this.kekKeyVersion = kekKeyVersion;
	}

	public VolumeEncryptionParameter kekKeyringId(@javax.annotation.Nonnull UUID kekKeyringId) {
		this.kekKeyringId = kekKeyringId;
		return this;
	}

	/**
	 * UUID of the keyring where the key is located within the STACKTI-KMS.
	 *
	 * @return kekKeyringId
	 */
	@javax.annotation.Nonnull
	public UUID getKekKeyringId() {
		return kekKeyringId;
	}

	public void setKekKeyringId(@javax.annotation.Nonnull UUID kekKeyringId) {
		this.kekKeyringId = kekKeyringId;
	}

	public VolumeEncryptionParameter kekProjectId(@javax.annotation.Nullable UUID kekProjectId) {
		this.kekProjectId = kekProjectId;
		return this;
	}

	/**
	 * Id of the project, where the key in the STACKIT-KMS belongs to, in case the key is located in
	 * a different project. By default the same project ID is used, like for the volume itself.
	 * Defining a key in a different project is only allowed for privileged internal projects.
	 *
	 * @return kekProjectId
	 */
	@javax.annotation.Nullable public UUID getKekProjectId() {
		return kekProjectId;
	}

	public void setKekProjectId(@javax.annotation.Nullable UUID kekProjectId) {
		this.kekProjectId = kekProjectId;
	}

	public VolumeEncryptionParameter keyPayload(@javax.annotation.Nullable byte[] keyPayload) {
		this.keyPayload = keyPayload;
		return this;
	}

	/**
	 * Optional predefined secret, which will be encrypted against the key-encryption-key within the
	 * STACKIT-KMS. If not defined, a random secret will be generated by the API and encrypted
	 * against the STACKIT-KMS. If a key-payload is provided here, it must be base64 encoded.
	 *
	 * @return keyPayload
	 */
	@javax.annotation.Nullable public byte[] getKeyPayload() {
		return keyPayload;
	}

	public void setKeyPayload(@javax.annotation.Nullable byte[] keyPayload) {
		this.keyPayload = keyPayload;
	}

	public VolumeEncryptionParameter serviceAccount(
			@javax.annotation.Nonnull String serviceAccount) {
		this.serviceAccount = serviceAccount;
		return this;
	}

	/**
	 * Service-Account linked to the Key within the STACKIT-KMS.
	 *
	 * @return serviceAccount
	 */
	@javax.annotation.Nonnull
	public String getServiceAccount() {
		return serviceAccount;
	}

	public void setServiceAccount(@javax.annotation.Nonnull String serviceAccount) {
		this.serviceAccount = serviceAccount;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		VolumeEncryptionParameter volumeEncryptionParameter = (VolumeEncryptionParameter) o;
		return Objects.equals(this.kekKeyId, volumeEncryptionParameter.kekKeyId)
				&& Objects.equals(this.kekKeyVersion, volumeEncryptionParameter.kekKeyVersion)
				&& Objects.equals(this.kekKeyringId, volumeEncryptionParameter.kekKeyringId)
				&& Objects.equals(this.kekProjectId, volumeEncryptionParameter.kekProjectId)
				&& Arrays.equals(this.keyPayload, volumeEncryptionParameter.keyPayload)
				&& Objects.equals(this.serviceAccount, volumeEncryptionParameter.serviceAccount);
	}

	@Override
	public int hashCode() {
		return Objects.hash(
				kekKeyId,
				kekKeyVersion,
				kekKeyringId,
				kekProjectId,
				Arrays.hashCode(keyPayload),
				serviceAccount);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class VolumeEncryptionParameter {\n");
		sb.append("    kekKeyId: ").append(toIndentedString(kekKeyId)).append("\n");
		sb.append("    kekKeyVersion: ").append(toIndentedString(kekKeyVersion)).append("\n");
		sb.append("    kekKeyringId: ").append(toIndentedString(kekKeyringId)).append("\n");
		sb.append("    kekProjectId: ").append(toIndentedString(kekProjectId)).append("\n");
		sb.append("    keyPayload: ").append(toIndentedString(keyPayload)).append("\n");
		sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"kekKeyId",
								"kekKeyVersion",
								"kekKeyringId",
								"kekProjectId",
								"keyPayload",
								"serviceAccount"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields =
				new HashSet<String>(
						Arrays.asList(
								"kekKeyId", "kekKeyVersion", "kekKeyringId", "serviceAccount"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to VolumeEncryptionParameter
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!VolumeEncryptionParameter.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in VolumeEncryptionParameter is not found in the empty JSON string",
								VolumeEncryptionParameter.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!VolumeEncryptionParameter.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `VolumeEncryptionParameter` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : VolumeEncryptionParameter.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if (!jsonObj.get("kekKeyId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `kekKeyId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("kekKeyId").toString()));
		}
		if (!jsonObj.get("kekKeyringId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `kekKeyringId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("kekKeyringId").toString()));
		}
		if ((jsonObj.get("kekProjectId") != null && !jsonObj.get("kekProjectId").isJsonNull())
				&& !jsonObj.get("kekProjectId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `kekProjectId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("kekProjectId").toString()));
		}
		if (!jsonObj.get("serviceAccount").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("serviceAccount").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!VolumeEncryptionParameter.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'VolumeEncryptionParameter' and its
				// subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<VolumeEncryptionParameter> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(VolumeEncryptionParameter.class));

			return (TypeAdapter<T>)
					new TypeAdapter<VolumeEncryptionParameter>() {
						@Override
						public void write(JsonWriter out, VolumeEncryptionParameter value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public VolumeEncryptionParameter read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of VolumeEncryptionParameter given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of VolumeEncryptionParameter
	 * @throws IOException if the JSON string is invalid with respect to VolumeEncryptionParameter
	 */
	public static VolumeEncryptionParameter fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, VolumeEncryptionParameter.class);
	}

	/**
	 * Convert an instance of VolumeEncryptionParameter to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
