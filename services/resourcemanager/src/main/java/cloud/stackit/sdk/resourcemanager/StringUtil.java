/*
 * Resource Manager API
 * API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.resourcemanager;

import java.util.Collection;
import java.util.Iterator;

@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class StringUtil {
	/**
	 * Check if the given array contains the given value (with case-insensitive comparison).
	 *
	 * @param array The array
	 * @param value The value to search
	 * @return true if the array contains the value
	 */
	public static boolean containsIgnoreCase(String[] array, String value) {
		for (String str : array) {
			if (value == null && str == null) {
				return true;
			}
			if (value != null && value.equalsIgnoreCase(str)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Join an array of strings with the given separator.
	 *
	 * <p>Note: This might be replaced by utility method from commons-lang or guava someday if one
	 * of those libraries is added as dependency.
	 *
	 * @param array The array of strings
	 * @param separator The separator
	 * @return the resulting string
	 */
	public static String join(String[] array, String separator) {
		int len = array.length;
		if (len == 0) {
			return "";
		}

		StringBuilder out = new StringBuilder();
		out.append(array[0]);
		for (int i = 1; i < len; i++) {
			out.append(separator).append(array[i]);
		}
		return out.toString();
	}

	/**
	 * Join a list of strings with the given separator.
	 *
	 * @param list The list of strings
	 * @param separator The separator
	 * @return the resulting string
	 */
	public static String join(Collection<String> list, String separator) {
		Iterator<String> iterator = list.iterator();
		StringBuilder out = new StringBuilder();
		if (iterator.hasNext()) {
			out.append(iterator.next());
		}
		while (iterator.hasNext()) {
			out.append(separator).append(iterator.next());
		}
		return out.toString();
	}
}
