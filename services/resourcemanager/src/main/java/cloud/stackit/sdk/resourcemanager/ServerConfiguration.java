/*
 * Resource Manager API
 * API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.resourcemanager;

import java.util.Map;

/** Representing a Server configuration. */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class ServerConfiguration {
	public String URL;
	public String description;
	public Map<String, ServerVariable> variables;

	/**
	 * @param URL A URL to the target host.
	 * @param description A description of the host designated by the URL.
	 * @param variables A map between a variable name and its value. The value is used for
	 *     substitution in the server's URL template.
	 */
	public ServerConfiguration(
			String URL, String description, Map<String, ServerVariable> variables) {
		this.URL = URL;
		this.description = description;
		this.variables = variables;
	}

	/**
	 * Format URL template using given variables.
	 *
	 * @param variables A map between a variable name and its value.
	 * @return Formatted URL.
	 */
	public String URL(Map<String, String> variables) {
		String url = this.URL;

		// go through variables and replace placeholders
		for (Map.Entry<String, ServerVariable> variable : this.variables.entrySet()) {
			String name = variable.getKey();
			ServerVariable serverVariable = variable.getValue();
			String value = serverVariable.defaultValue;

			if (variables != null && variables.containsKey(name)) {
				value = variables.get(name);
				if (serverVariable.enumValues.size() > 0
						&& !serverVariable.enumValues.contains(value)) {
					throw new IllegalArgumentException(
							"The variable "
									+ name
									+ " in the server URL has invalid value "
									+ value
									+ ".");
				}
			}
			url = url.replace("{" + name + "}", value);
		}
		return url;
	}

	/**
	 * Format URL template using default server variables.
	 *
	 * @return Formatted URL.
	 */
	public String URL() {
		return URL(null);
	}
}
