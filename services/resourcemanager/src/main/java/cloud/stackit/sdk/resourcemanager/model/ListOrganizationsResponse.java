/*
 * Resource Manager API
 * API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.resourcemanager.model;

import cloud.stackit.sdk.resourcemanager.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** ListOrganizationsResponse */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.14.0")
public class ListOrganizationsResponse {
	public static final String SERIALIZED_NAME_ITEMS = "items";

	@SerializedName(SERIALIZED_NAME_ITEMS)
	@javax.annotation.Nonnull
	private List<ListOrganizationsResponseItemsInner> items = new ArrayList<>();

	public static final String SERIALIZED_NAME_LIMIT = "limit";

	@SerializedName(SERIALIZED_NAME_LIMIT)
	@javax.annotation.Nonnull
	private BigDecimal limit = new BigDecimal("50");

	public static final String SERIALIZED_NAME_OFFSET = "offset";

	@SerializedName(SERIALIZED_NAME_OFFSET)
	@javax.annotation.Nonnull
	private BigDecimal offset = new BigDecimal("0");

	public ListOrganizationsResponse() {}

	public ListOrganizationsResponse items(
			@javax.annotation.Nonnull List<ListOrganizationsResponseItemsInner> items) {
		this.items = items;
		return this;
	}

	public ListOrganizationsResponse addItemsItem(ListOrganizationsResponseItemsInner itemsItem) {
		if (this.items == null) {
			this.items = new ArrayList<>();
		}
		this.items.add(itemsItem);
		return this;
	}

	/**
	 * Get items
	 *
	 * @return items
	 */
	@javax.annotation.Nonnull
	public List<ListOrganizationsResponseItemsInner> getItems() {
		return items;
	}

	public void setItems(
			@javax.annotation.Nonnull List<ListOrganizationsResponseItemsInner> items) {
		this.items = items;
	}

	public ListOrganizationsResponse limit(@javax.annotation.Nonnull BigDecimal limit) {
		this.limit = limit;
		return this;
	}

	/**
	 * The maximum number of projects to return in the response. If not present, an appropriate
	 * default will be used. minimum: 0 maximum: 100
	 *
	 * @return limit
	 */
	@javax.annotation.Nonnull
	public BigDecimal getLimit() {
		return limit;
	}

	public void setLimit(@javax.annotation.Nonnull BigDecimal limit) {
		this.limit = limit;
	}

	public ListOrganizationsResponse offset(@javax.annotation.Nonnull BigDecimal offset) {
		this.offset = offset;
		return this;
	}

	/**
	 * The offset of the first item in the collection to return. minimum: 0
	 *
	 * @return offset
	 */
	@javax.annotation.Nonnull
	public BigDecimal getOffset() {
		return offset;
	}

	public void setOffset(@javax.annotation.Nonnull BigDecimal offset) {
		this.offset = offset;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ListOrganizationsResponse listOrganizationsResponse = (ListOrganizationsResponse) o;
		return Objects.equals(this.items, listOrganizationsResponse.items)
				&& Objects.equals(this.limit, listOrganizationsResponse.limit)
				&& Objects.equals(this.offset, listOrganizationsResponse.offset);
	}

	@Override
	public int hashCode() {
		return Objects.hash(items, limit, offset);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ListOrganizationsResponse {\n");
		sb.append("    items: ").append(toIndentedString(items)).append("\n");
		sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
		sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>(Arrays.asList("items", "limit", "offset"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(Arrays.asList("items", "limit", "offset"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to ListOrganizationsResponse
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!ListOrganizationsResponse.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in ListOrganizationsResponse is not found in the empty JSON string",
								ListOrganizationsResponse.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!ListOrganizationsResponse.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `ListOrganizationsResponse` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : ListOrganizationsResponse.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		// ensure the json data is an array
		if (!jsonObj.get("items").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `items` to be an array in the JSON string but got `%s`",
							jsonObj.get("items").toString()));
		}

		JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
		// validate the required field `items` (array)
		for (int i = 0; i < jsonArrayitems.size(); i++) {
			ListOrganizationsResponseItemsInner.validateJsonElement(jsonArrayitems.get(i));
		}
		;
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!ListOrganizationsResponse.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'ListOrganizationsResponse' and its
				// subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<ListOrganizationsResponse> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(ListOrganizationsResponse.class));

			return (TypeAdapter<T>)
					new TypeAdapter<ListOrganizationsResponse>() {
						@Override
						public void write(JsonWriter out, ListOrganizationsResponse value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public ListOrganizationsResponse read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of ListOrganizationsResponse given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of ListOrganizationsResponse
	 * @throws IOException if the JSON string is invalid with respect to ListOrganizationsResponse
	 */
	public static ListOrganizationsResponse fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, ListOrganizationsResponse.class);
	}

	/**
	 * Convert an instance of ListOrganizationsResponse to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
