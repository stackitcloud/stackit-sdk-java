/*
 * Resource Manager API
 * API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.resourcemanager.auth;

import cloud.stackit.sdk.resourcemanager.ApiException;
import cloud.stackit.sdk.resourcemanager.Pair;
import java.net.URI;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Supplier;

@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.14.0")
public class HttpBearerAuth implements Authentication {
	private final String scheme;
	private Supplier<String> tokenSupplier;

	public HttpBearerAuth(String scheme) {
		this.scheme = scheme;
	}

	/**
	 * Gets the token, which together with the scheme, will be sent as the value of the
	 * Authorization header.
	 *
	 * @return The bearer token
	 */
	public String getBearerToken() {
		return tokenSupplier.get();
	}

	/**
	 * Sets the token, which together with the scheme, will be sent as the value of the
	 * Authorization header.
	 *
	 * @param bearerToken The bearer token to send in the Authorization header
	 */
	public void setBearerToken(String bearerToken) {
		this.tokenSupplier = () -> bearerToken;
	}

	/**
	 * Sets the supplier of tokens, which together with the scheme, will be sent as the value of the
	 * Authorization header.
	 *
	 * @param tokenSupplier The supplier of bearer tokens to send in the Authorization header
	 */
	public void setBearerToken(Supplier<String> tokenSupplier) {
		this.tokenSupplier = tokenSupplier;
	}

	@Override
	public void applyToParams(
			List<Pair> queryParams,
			Map<String, String> headerParams,
			Map<String, String> cookieParams,
			String payload,
			String method,
			URI uri)
			throws ApiException {
		String bearerToken = Optional.ofNullable(tokenSupplier).map(Supplier::get).orElse(null);
		if (bearerToken == null) {
			return;
		}

		headerParams.put(
				"Authorization",
				(scheme != null ? upperCaseBearer(scheme) + " " : "") + bearerToken);
	}

	private static String upperCaseBearer(String scheme) {
		return ("bearer".equalsIgnoreCase(scheme)) ? "Bearer" : scheme;
	}
}
