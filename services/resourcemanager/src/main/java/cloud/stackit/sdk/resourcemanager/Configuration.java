/*
 * Resource Manager API
 * API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.resourcemanager;

import java.util.Objects;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Supplier;

@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.14.0")
public class Configuration {
	public static final String VERSION = "2.0";

	private static final AtomicReference<ApiClient> defaultApiClient = new AtomicReference<>();
	private static volatile Supplier<ApiClient> apiClientFactory = ApiClient::new;

	/**
	 * Get the default API client, which would be used when creating API instances without providing
	 * an API client.
	 *
	 * @return Default API client
	 */
	public static ApiClient getDefaultApiClient() {
		ApiClient client = defaultApiClient.get();
		if (client == null) {
			client =
					defaultApiClient.updateAndGet(
							val -> {
								if (val != null) { // changed by another thread
									return val;
								}
								return apiClientFactory.get();
							});
		}
		return client;
	}

	/**
	 * Set the default API client, which would be used when creating API instances without providing
	 * an API client.
	 *
	 * @param apiClient API client
	 */
	public static void setDefaultApiClient(ApiClient apiClient) {
		defaultApiClient.set(apiClient);
	}

	/** set the callback used to create new ApiClient objects */
	public static void setApiClientFactory(Supplier<ApiClient> factory) {
		apiClientFactory = Objects.requireNonNull(factory);
	}

	private Configuration() {}
}
