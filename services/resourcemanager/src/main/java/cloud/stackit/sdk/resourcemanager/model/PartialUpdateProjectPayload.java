/*
 * Resource Manager API
 * API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.resourcemanager.model;

import cloud.stackit.sdk.resourcemanager.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** PartialUpdateProjectPayload */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class PartialUpdateProjectPayload {
	public static final String SERIALIZED_NAME_CONTAINER_PARENT_ID = "containerParentId";

	@SerializedName(SERIALIZED_NAME_CONTAINER_PARENT_ID)
	@javax.annotation.Nullable private String containerParentId;

	public static final String SERIALIZED_NAME_LABELS = "labels";

	@SerializedName(SERIALIZED_NAME_LABELS)
	@javax.annotation.Nullable private Map<String, String> labels = new HashMap<>();

	public static final String SERIALIZED_NAME_NAME = "name";

	@SerializedName(SERIALIZED_NAME_NAME)
	@javax.annotation.Nullable private String name;

	public PartialUpdateProjectPayload() {}

	public PartialUpdateProjectPayload containerParentId(
			@javax.annotation.Nullable String containerParentId) {
		this.containerParentId = containerParentId;
		return this;
	}

	/**
	 * New parent identifier for the resource container - containerId as well as UUID identifier is
	 * supported.
	 *
	 * @return containerParentId
	 */
	@javax.annotation.Nullable public String getContainerParentId() {
		return containerParentId;
	}

	public void setContainerParentId(@javax.annotation.Nullable String containerParentId) {
		this.containerParentId = containerParentId;
	}

	public PartialUpdateProjectPayload labels(
			@javax.annotation.Nullable Map<String, String> labels) {
		this.labels = labels;
		return this;
	}

	public PartialUpdateProjectPayload putLabelsItem(String key, String labelsItem) {
		if (this.labels == null) {
			this.labels = new HashMap<>();
		}
		this.labels.put(key, labelsItem);
		return this;
	}

	/**
	 * Labels are key-value string pairs that can be attached to a resource container. Some labels
	 * may be enforced via policies. - A label key must match the regex
	 * &#x60;[A-ZÄÜÖa-zäüöß0-9_-]{1,64}&#x60;. - A label value must match the regex
	 * &#x60;^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}&#x60;.
	 *
	 * @return labels
	 */
	@javax.annotation.Nullable public Map<String, String> getLabels() {
		return labels;
	}

	public void setLabels(@javax.annotation.Nullable Map<String, String> labels) {
		this.labels = labels;
	}

	public PartialUpdateProjectPayload name(@javax.annotation.Nullable String name) {
		this.name = name;
		return this;
	}

	/**
	 * New name for the resource container matching the regex &#x60;^[a-zA-ZäüöÄÜÖ0-9](
	 * ?[a-zA-ZäüöÄÜÖß0-9_+&amp;-]){0,39}$&#x60;.
	 *
	 * @return name
	 */
	@javax.annotation.Nullable public String getName() {
		return name;
	}

	public void setName(@javax.annotation.Nullable String name) {
		this.name = name;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		PartialUpdateProjectPayload partialUpdateProjectPayload = (PartialUpdateProjectPayload) o;
		return Objects.equals(this.containerParentId, partialUpdateProjectPayload.containerParentId)
				&& Objects.equals(this.labels, partialUpdateProjectPayload.labels)
				&& Objects.equals(this.name, partialUpdateProjectPayload.name);
	}

	@Override
	public int hashCode() {
		return Objects.hash(containerParentId, labels, name);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class PartialUpdateProjectPayload {\n");
		sb.append("    containerParentId: ")
				.append(toIndentedString(containerParentId))
				.append("\n");
		sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>(Arrays.asList("containerParentId", "labels", "name"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>(0);
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to
	 *     PartialUpdateProjectPayload
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!PartialUpdateProjectPayload.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in PartialUpdateProjectPayload is not found in the empty JSON string",
								PartialUpdateProjectPayload.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!PartialUpdateProjectPayload.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `PartialUpdateProjectPayload` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if ((jsonObj.get("containerParentId") != null
						&& !jsonObj.get("containerParentId").isJsonNull())
				&& !jsonObj.get("containerParentId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `containerParentId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("containerParentId").toString()));
		}
		if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
				&& !jsonObj.get("name").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `name` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("name").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!PartialUpdateProjectPayload.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'PartialUpdateProjectPayload' and its
				// subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<PartialUpdateProjectPayload> thisAdapter =
					gson.getDelegateAdapter(this, TypeToken.get(PartialUpdateProjectPayload.class));

			return (TypeAdapter<T>)
					new TypeAdapter<PartialUpdateProjectPayload>() {
						@Override
						public void write(JsonWriter out, PartialUpdateProjectPayload value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public PartialUpdateProjectPayload read(JsonReader in) throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of PartialUpdateProjectPayload given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of PartialUpdateProjectPayload
	 * @throws IOException if the JSON string is invalid with respect to PartialUpdateProjectPayload
	 */
	public static PartialUpdateProjectPayload fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, PartialUpdateProjectPayload.class);
	}

	/**
	 * Convert an instance of PartialUpdateProjectPayload to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
