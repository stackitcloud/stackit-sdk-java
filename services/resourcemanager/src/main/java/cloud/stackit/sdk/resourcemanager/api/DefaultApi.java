/*
 * Resource Manager API
 * API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.stackit.sdk.resourcemanager.api;

import cloud.stackit.sdk.resourcemanager.ApiCallback;
import cloud.stackit.sdk.resourcemanager.ApiClient;
import cloud.stackit.sdk.resourcemanager.ApiException;
import cloud.stackit.sdk.resourcemanager.ApiResponse;
import cloud.stackit.sdk.resourcemanager.Configuration;
import cloud.stackit.sdk.resourcemanager.Pair;
import cloud.stackit.sdk.resourcemanager.ProgressRequestBody;
import cloud.stackit.sdk.resourcemanager.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import cloud.stackit.sdk.resourcemanager.model.CreateFolderPayload;
import cloud.stackit.sdk.resourcemanager.model.CreateProjectPayload;
import cloud.stackit.sdk.resourcemanager.model.ErrorResponse;
import cloud.stackit.sdk.resourcemanager.model.FolderResponse;
import cloud.stackit.sdk.resourcemanager.model.GetFolderDetailsResponse;
import cloud.stackit.sdk.resourcemanager.model.GetProjectResponse;
import cloud.stackit.sdk.resourcemanager.model.ListFoldersResponse;
import cloud.stackit.sdk.resourcemanager.model.ListOrganizationsResponse;
import cloud.stackit.sdk.resourcemanager.model.ListProjectsResponse;
import java.time.OffsetDateTime;
import cloud.stackit.sdk.resourcemanager.model.OrganizationResponse;
import cloud.stackit.sdk.resourcemanager.model.PartialUpdateFolderPayload;
import cloud.stackit.sdk.resourcemanager.model.PartialUpdateOrganizationPayload;
import cloud.stackit.sdk.resourcemanager.model.PartialUpdateProjectPayload;
import cloud.stackit.sdk.resourcemanager.model.Project;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createFolder
     * @param createFolderPayload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFolderCall(@javax.annotation.Nullable CreateFolderPayload createFolderPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFolderPayload;

        // create path and map variables
        String localVarPath = "/v2/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFolderValidateBeforeCall(@javax.annotation.Nullable CreateFolderPayload createFolderPayload, final ApiCallback _callback) throws ApiException {
        return createFolderCall(createFolderPayload, _callback);

    }

    /**
     * Create Folder
     * Create a new folder.
     * @param createFolderPayload  (optional)
     * @return FolderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public FolderResponse createFolder(@javax.annotation.Nullable CreateFolderPayload createFolderPayload) throws ApiException {
        ApiResponse<FolderResponse> localVarResp = createFolderWithHttpInfo(createFolderPayload);
        return localVarResp.getData();
    }

    /**
     * Create Folder
     * Create a new folder.
     * @param createFolderPayload  (optional)
     * @return ApiResponse&lt;FolderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FolderResponse> createFolderWithHttpInfo(@javax.annotation.Nullable CreateFolderPayload createFolderPayload) throws ApiException {
        okhttp3.Call localVarCall = createFolderValidateBeforeCall(createFolderPayload, null);
        Type localVarReturnType = new TypeToken<FolderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Folder (asynchronously)
     * Create a new folder.
     * @param createFolderPayload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFolderAsync(@javax.annotation.Nullable CreateFolderPayload createFolderPayload, final ApiCallback<FolderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFolderValidateBeforeCall(createFolderPayload, _callback);
        Type localVarReturnType = new TypeToken<FolderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProject
     * @param createProjectPayload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectCall(@javax.annotation.Nullable CreateProjectPayload createProjectPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProjectPayload;

        // create path and map variables
        String localVarPath = "/v2/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectValidateBeforeCall(@javax.annotation.Nullable CreateProjectPayload createProjectPayload, final ApiCallback _callback) throws ApiException {
        return createProjectCall(createProjectPayload, _callback);

    }

    /**
     * Create Project
     * Create a new project.  - The request is synchronous, but the workflow-based creation is asynchronous. - Lifecycle state remains in CREATING, until workflow completes
     * @param createProjectPayload  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public Project createProject(@javax.annotation.Nullable CreateProjectPayload createProjectPayload) throws ApiException {
        ApiResponse<Project> localVarResp = createProjectWithHttpInfo(createProjectPayload);
        return localVarResp.getData();
    }

    /**
     * Create Project
     * Create a new project.  - The request is synchronous, but the workflow-based creation is asynchronous. - Lifecycle state remains in CREATING, until workflow completes
     * @param createProjectPayload  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> createProjectWithHttpInfo(@javax.annotation.Nullable CreateProjectPayload createProjectPayload) throws ApiException {
        okhttp3.Call localVarCall = createProjectValidateBeforeCall(createProjectPayload, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Project (asynchronously)
     * Create a new project.  - The request is synchronous, but the workflow-based creation is asynchronous. - Lifecycle state remains in CREATING, until workflow completes
     * @param createProjectPayload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectAsync(@javax.annotation.Nullable CreateProjectPayload createProjectPayload, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectValidateBeforeCall(createProjectPayload, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFolder
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param force If true, all nested, empty folders are deleted recursively - if no project is attached! (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Deletion process triggered </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFolderCall(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/folders/{containerId}"
            .replace("{" + "containerId" + "}", localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFolderValidateBeforeCall(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling deleteFolder(Async)");
        }

        return deleteFolderCall(containerId, force, _callback);

    }

    /**
     * Delete Folder
     * Delete a folder and its metadata. - Folder must not be parent of any other container - A force flag may be set, deleting all underlying folders recursively - if no project is attached!
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param force If true, all nested, empty folders are deleted recursively - if no project is attached! (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Deletion process triggered </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFolder(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable Boolean force) throws ApiException {
        deleteFolderWithHttpInfo(containerId, force);
    }

    /**
     * Delete Folder
     * Delete a folder and its metadata. - Folder must not be parent of any other container - A force flag may be set, deleting all underlying folders recursively - if no project is attached!
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param force If true, all nested, empty folders are deleted recursively - if no project is attached! (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Deletion process triggered </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFolderWithHttpInfo(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable Boolean force) throws ApiException {
        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(containerId, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Folder (asynchronously)
     * Delete a folder and its metadata. - Folder must not be parent of any other container - A force flag may be set, deleting all underlying folders recursively - if no project is attached!
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param force If true, all nested, empty folders are deleted recursively - if no project is attached! (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Deletion process triggered </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFolderAsync(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(containerId, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFolderLabels
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param keys Label name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Labels removed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFolderLabelsCall(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/folders/{containerId}/labels"
            .replace("{" + "containerId" + "}", localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFolderLabelsValidateBeforeCall(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling deleteFolderLabels(Async)");
        }

        return deleteFolderLabelsCall(containerId, keys, _callback);

    }

    /**
     * Delete Folder Labels
     * Deletes all folder labels by given keys. - Specific labels may be deleted by key(s) - If no key is specified, all labels will be deleted!
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param keys Label name. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Labels removed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFolderLabels(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys) throws ApiException {
        deleteFolderLabelsWithHttpInfo(containerId, keys);
    }

    /**
     * Delete Folder Labels
     * Deletes all folder labels by given keys. - Specific labels may be deleted by key(s) - If no key is specified, all labels will be deleted!
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param keys Label name. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Labels removed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFolderLabelsWithHttpInfo(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys) throws ApiException {
        okhttp3.Call localVarCall = deleteFolderLabelsValidateBeforeCall(containerId, keys, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Folder Labels (asynchronously)
     * Deletes all folder labels by given keys. - Specific labels may be deleted by key(s) - If no key is specified, all labels will be deleted!
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param keys Label name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Labels removed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFolderLabelsAsync(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFolderLabelsValidateBeforeCall(containerId, keys, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationLabels
     * @param containerId Organization identifier - containerId as well as UUID identifier is supported. (required)
     * @param keys Label name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Labels removed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationLabelsCall(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/organizations/{containerId}/labels"
            .replace("{" + "containerId" + "}", localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationLabelsValidateBeforeCall(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling deleteOrganizationLabels(Async)");
        }

        return deleteOrganizationLabelsCall(containerId, keys, _callback);

    }

    /**
     * Delete Organization Labels
     * Deletes all organization labels by given keys. - Specific labels may be deleted by key(s) - If no key is specified, all labels will be deleted!
     * @param containerId Organization identifier - containerId as well as UUID identifier is supported. (required)
     * @param keys Label name. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Labels removed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationLabels(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys) throws ApiException {
        deleteOrganizationLabelsWithHttpInfo(containerId, keys);
    }

    /**
     * Delete Organization Labels
     * Deletes all organization labels by given keys. - Specific labels may be deleted by key(s) - If no key is specified, all labels will be deleted!
     * @param containerId Organization identifier - containerId as well as UUID identifier is supported. (required)
     * @param keys Label name. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Labels removed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationLabelsWithHttpInfo(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationLabelsValidateBeforeCall(containerId, keys, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Organization Labels (asynchronously)
     * Deletes all organization labels by given keys. - Specific labels may be deleted by key(s) - If no key is specified, all labels will be deleted!
     * @param containerId Organization identifier - containerId as well as UUID identifier is supported. (required)
     * @param keys Label name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Labels removed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationLabelsAsync(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationLabelsValidateBeforeCall(containerId, keys, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProject
     * @param id Project identifier - containerId as well as UUID identifier is supported. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Deletion process triggered </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectValidateBeforeCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteProject(Async)");
        }

        return deleteProjectCall(id, _callback);

    }

    /**
     * Delete Project
     * Triggers the deletion of a project.  - The request is synchronous, but the workflow-based deletion is asynchronous - Lifecycle state remains in DELETING, until workflow completes
     * @param id Project identifier - containerId as well as UUID identifier is supported. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Deletion process triggered </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProject(@javax.annotation.Nonnull String id) throws ApiException {
        deleteProjectWithHttpInfo(id);
    }

    /**
     * Delete Project
     * Triggers the deletion of a project.  - The request is synchronous, but the workflow-based deletion is asynchronous - Lifecycle state remains in DELETING, until workflow completes
     * @param id Project identifier - containerId as well as UUID identifier is supported. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Deletion process triggered </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectWithHttpInfo(@javax.annotation.Nonnull String id) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Project (asynchronously)
     * Triggers the deletion of a project.  - The request is synchronous, but the workflow-based deletion is asynchronous - Lifecycle state remains in DELETING, until workflow completes
     * @param id Project identifier - containerId as well as UUID identifier is supported. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Deletion process triggered </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectAsync(@javax.annotation.Nonnull String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectLabels
     * @param containerId Project identifier - containerId as well as UUID identifier is supported. (required)
     * @param keys Label name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Labels removed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectLabelsCall(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{containerId}/labels"
            .replace("{" + "containerId" + "}", localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectLabelsValidateBeforeCall(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling deleteProjectLabels(Async)");
        }

        return deleteProjectLabelsCall(containerId, keys, _callback);

    }

    /**
     * Delete Project Labels
     * Deletes all project labels by given keys. - Specific labels may be deleted by key(s) - If no key is specified, all labels will be deleted!
     * @param containerId Project identifier - containerId as well as UUID identifier is supported. (required)
     * @param keys Label name. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Labels removed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectLabels(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys) throws ApiException {
        deleteProjectLabelsWithHttpInfo(containerId, keys);
    }

    /**
     * Delete Project Labels
     * Deletes all project labels by given keys. - Specific labels may be deleted by key(s) - If no key is specified, all labels will be deleted!
     * @param containerId Project identifier - containerId as well as UUID identifier is supported. (required)
     * @param keys Label name. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Labels removed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectLabelsWithHttpInfo(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectLabelsValidateBeforeCall(containerId, keys, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Project Labels (asynchronously)
     * Deletes all project labels by given keys. - Specific labels may be deleted by key(s) - If no key is specified, all labels will be deleted!
     * @param containerId Project identifier - containerId as well as UUID identifier is supported. (required)
     * @param keys Label name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Labels removed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectLabelsAsync(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable List<String> keys, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectLabelsValidateBeforeCall(containerId, keys, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFolderDetails
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param includeParents  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderDetailsCall(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable Boolean includeParents, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/folders/{containerId}"
            .replace("{" + "containerId" + "}", localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeParents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeParents", includeParents));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderDetailsValidateBeforeCall(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable Boolean includeParents, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling getFolderDetails(Async)");
        }

        return getFolderDetailsCall(containerId, includeParents, _callback);

    }

    /**
     * Get Folder Details
     * Returns all metadata for a specific folder.
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param includeParents  (optional, default to false)
     * @return GetFolderDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderDetailsResponse getFolderDetails(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable Boolean includeParents) throws ApiException {
        ApiResponse<GetFolderDetailsResponse> localVarResp = getFolderDetailsWithHttpInfo(containerId, includeParents);
        return localVarResp.getData();
    }

    /**
     * Get Folder Details
     * Returns all metadata for a specific folder.
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param includeParents  (optional, default to false)
     * @return ApiResponse&lt;GetFolderDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFolderDetailsResponse> getFolderDetailsWithHttpInfo(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable Boolean includeParents) throws ApiException {
        okhttp3.Call localVarCall = getFolderDetailsValidateBeforeCall(containerId, includeParents, null);
        Type localVarReturnType = new TypeToken<GetFolderDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Folder Details (asynchronously)
     * Returns all metadata for a specific folder.
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param includeParents  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderDetailsAsync(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable Boolean includeParents, final ApiCallback<GetFolderDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderDetailsValidateBeforeCall(containerId, includeParents, _callback);
        Type localVarReturnType = new TypeToken<GetFolderDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganization
     * @param id Organization identifier - containerId as well as UUID identifier is supported. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/organizations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationValidateBeforeCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganization(Async)");
        }

        return getOrganizationCall(id, _callback);

    }

    /**
     * Get Organization Details
     * Returns the organization and its metadata.
     * @param id Organization identifier - containerId as well as UUID identifier is supported. (required)
     * @return OrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationResponse getOrganization(@javax.annotation.Nonnull String id) throws ApiException {
        ApiResponse<OrganizationResponse> localVarResp = getOrganizationWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Organization Details
     * Returns the organization and its metadata.
     * @param id Organization identifier - containerId as well as UUID identifier is supported. (required)
     * @return ApiResponse&lt;OrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationResponse> getOrganizationWithHttpInfo(@javax.annotation.Nonnull String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OrganizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Organization Details (asynchronously)
     * Returns the organization and its metadata.
     * @param id Organization identifier - containerId as well as UUID identifier is supported. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAsync(@javax.annotation.Nonnull String id, final ApiCallback<OrganizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OrganizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProject
     * @param id Project identifier - containerId as well as UUID identifier is supported. (required)
     * @param includeParents  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable Boolean includeParents, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeParents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeParents", includeParents));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable Boolean includeParents, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProject(Async)");
        }

        return getProjectCall(id, includeParents, _callback);

    }

    /**
     * Get Project Details
     * Returns the project and its metadata.
     * @param id Project identifier - containerId as well as UUID identifier is supported. (required)
     * @param includeParents  (optional, default to false)
     * @return GetProjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectResponse getProject(@javax.annotation.Nonnull String id, @javax.annotation.Nullable Boolean includeParents) throws ApiException {
        ApiResponse<GetProjectResponse> localVarResp = getProjectWithHttpInfo(id, includeParents);
        return localVarResp.getData();
    }

    /**
     * Get Project Details
     * Returns the project and its metadata.
     * @param id Project identifier - containerId as well as UUID identifier is supported. (required)
     * @param includeParents  (optional, default to false)
     * @return ApiResponse&lt;GetProjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProjectResponse> getProjectWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable Boolean includeParents) throws ApiException {
        okhttp3.Call localVarCall = getProjectValidateBeforeCall(id, includeParents, null);
        Type localVarReturnType = new TypeToken<GetProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project Details (asynchronously)
     * Returns the project and its metadata.
     * @param id Project identifier - containerId as well as UUID identifier is supported. (required)
     * @param includeParents  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable Boolean includeParents, final ApiCallback<GetProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectValidateBeforeCall(id, includeParents, _callback);
        Type localVarReturnType = new TypeToken<GetProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFolders
     * @param containerParentId Identifier of the parent resource container - containerId as well as UUID identifier is supported. (optional)
     * @param containerIds List of container identifiers - containerId as well as UUID identifier is supported. (optional)
     * @param member E-Mail address of the user for whom the visible resource containers should be filtered. (optional)
     * @param limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used. (optional, default to 50)
     * @param offset The offset of the first item in the collection to return. (optional, default to 0)
     * @param creationTimeStart A timestamp to specify the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFoldersCall(@javax.annotation.Nullable String containerParentId, @javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable OffsetDateTime creationTimeStart, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containerParentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containerParentId", containerParentId));
        }

        if (containerIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "containerIds", containerIds));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (creationTimeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creation-time-start", creationTimeStart));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFoldersValidateBeforeCall(@javax.annotation.Nullable String containerParentId, @javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable OffsetDateTime creationTimeStart, final ApiCallback _callback) throws ApiException {
        return listFoldersCall(containerParentId, containerIds, member, limit, offset, creationTimeStart, _callback);

    }

    /**
     * Get All Folders
     * Returns all folders and their metadata that:  - Are children of the specific containerParentId - Match the given containerIds - User is member of &lt;br /&gt;  Filter: - Either containerParentId OR containerIds OR member must be passed - If containerId and containerParentId are given, both are used for filtering - containers must point to the same parent - If member and containerParentId are given, both are used for filtering - If member is given, containers must not point to the same container parent 
     * @param containerParentId Identifier of the parent resource container - containerId as well as UUID identifier is supported. (optional)
     * @param containerIds List of container identifiers - containerId as well as UUID identifier is supported. (optional)
     * @param member E-Mail address of the user for whom the visible resource containers should be filtered. (optional)
     * @param limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used. (optional, default to 50)
     * @param offset The offset of the first item in the collection to return. (optional, default to 0)
     * @param creationTimeStart A timestamp to specify the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time. (optional)
     * @return ListFoldersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ListFoldersResponse listFolders(@javax.annotation.Nullable String containerParentId, @javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable OffsetDateTime creationTimeStart) throws ApiException {
        ApiResponse<ListFoldersResponse> localVarResp = listFoldersWithHttpInfo(containerParentId, containerIds, member, limit, offset, creationTimeStart);
        return localVarResp.getData();
    }

    /**
     * Get All Folders
     * Returns all folders and their metadata that:  - Are children of the specific containerParentId - Match the given containerIds - User is member of &lt;br /&gt;  Filter: - Either containerParentId OR containerIds OR member must be passed - If containerId and containerParentId are given, both are used for filtering - containers must point to the same parent - If member and containerParentId are given, both are used for filtering - If member is given, containers must not point to the same container parent 
     * @param containerParentId Identifier of the parent resource container - containerId as well as UUID identifier is supported. (optional)
     * @param containerIds List of container identifiers - containerId as well as UUID identifier is supported. (optional)
     * @param member E-Mail address of the user for whom the visible resource containers should be filtered. (optional)
     * @param limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used. (optional, default to 50)
     * @param offset The offset of the first item in the collection to return. (optional, default to 0)
     * @param creationTimeStart A timestamp to specify the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time. (optional)
     * @return ApiResponse&lt;ListFoldersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListFoldersResponse> listFoldersWithHttpInfo(@javax.annotation.Nullable String containerParentId, @javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable OffsetDateTime creationTimeStart) throws ApiException {
        okhttp3.Call localVarCall = listFoldersValidateBeforeCall(containerParentId, containerIds, member, limit, offset, creationTimeStart, null);
        Type localVarReturnType = new TypeToken<ListFoldersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Folders (asynchronously)
     * Returns all folders and their metadata that:  - Are children of the specific containerParentId - Match the given containerIds - User is member of &lt;br /&gt;  Filter: - Either containerParentId OR containerIds OR member must be passed - If containerId and containerParentId are given, both are used for filtering - containers must point to the same parent - If member and containerParentId are given, both are used for filtering - If member is given, containers must not point to the same container parent 
     * @param containerParentId Identifier of the parent resource container - containerId as well as UUID identifier is supported. (optional)
     * @param containerIds List of container identifiers - containerId as well as UUID identifier is supported. (optional)
     * @param member E-Mail address of the user for whom the visible resource containers should be filtered. (optional)
     * @param limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used. (optional, default to 50)
     * @param offset The offset of the first item in the collection to return. (optional, default to 0)
     * @param creationTimeStart A timestamp to specify the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFoldersAsync(@javax.annotation.Nullable String containerParentId, @javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable OffsetDateTime creationTimeStart, final ApiCallback<ListFoldersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFoldersValidateBeforeCall(containerParentId, containerIds, member, limit, offset, creationTimeStart, _callback);
        Type localVarReturnType = new TypeToken<ListFoldersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOrganizations
     * @param containerIds Organization identifiers - containerId as well as UUID identifier is supported. A combination of both is not allowed. (optional)
     * @param member E-Mail address of the user for whom the visible resource containers should be filtered. (optional)
     * @param limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used. (optional, default to 50)
     * @param offset The offset of the first item in the collection to return. (optional, default to 0)
     * @param creationTimeStart A timestamp to specify the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrganizationsCall(@javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable OffsetDateTime creationTimeStart, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containerIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "containerIds", containerIds));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (creationTimeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creation-time-start", creationTimeStart));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrganizationsValidateBeforeCall(@javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable OffsetDateTime creationTimeStart, final ApiCallback _callback) throws ApiException {
        return listOrganizationsCall(containerIds, member, limit, offset, creationTimeStart, _callback);

    }

    /**
     * Get All Organizations
     * Returns all organizations and their metadata. - If no containerIds are specified, all organizations are returned, if permitted - ContainerIds may be set to filter - Member may be set to filter - If member and containerIds are given, both are used for filtering 
     * @param containerIds Organization identifiers - containerId as well as UUID identifier is supported. A combination of both is not allowed. (optional)
     * @param member E-Mail address of the user for whom the visible resource containers should be filtered. (optional)
     * @param limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used. (optional, default to 50)
     * @param offset The offset of the first item in the collection to return. (optional, default to 0)
     * @param creationTimeStart A timestamp to specify the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time. (optional)
     * @return ListOrganizationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListOrganizationsResponse listOrganizations(@javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable OffsetDateTime creationTimeStart) throws ApiException {
        ApiResponse<ListOrganizationsResponse> localVarResp = listOrganizationsWithHttpInfo(containerIds, member, limit, offset, creationTimeStart);
        return localVarResp.getData();
    }

    /**
     * Get All Organizations
     * Returns all organizations and their metadata. - If no containerIds are specified, all organizations are returned, if permitted - ContainerIds may be set to filter - Member may be set to filter - If member and containerIds are given, both are used for filtering 
     * @param containerIds Organization identifiers - containerId as well as UUID identifier is supported. A combination of both is not allowed. (optional)
     * @param member E-Mail address of the user for whom the visible resource containers should be filtered. (optional)
     * @param limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used. (optional, default to 50)
     * @param offset The offset of the first item in the collection to return. (optional, default to 0)
     * @param creationTimeStart A timestamp to specify the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time. (optional)
     * @return ApiResponse&lt;ListOrganizationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListOrganizationsResponse> listOrganizationsWithHttpInfo(@javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable OffsetDateTime creationTimeStart) throws ApiException {
        okhttp3.Call localVarCall = listOrganizationsValidateBeforeCall(containerIds, member, limit, offset, creationTimeStart, null);
        Type localVarReturnType = new TypeToken<ListOrganizationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Organizations (asynchronously)
     * Returns all organizations and their metadata. - If no containerIds are specified, all organizations are returned, if permitted - ContainerIds may be set to filter - Member may be set to filter - If member and containerIds are given, both are used for filtering 
     * @param containerIds Organization identifiers - containerId as well as UUID identifier is supported. A combination of both is not allowed. (optional)
     * @param member E-Mail address of the user for whom the visible resource containers should be filtered. (optional)
     * @param limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used. (optional, default to 50)
     * @param offset The offset of the first item in the collection to return. (optional, default to 0)
     * @param creationTimeStart A timestamp to specify the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrganizationsAsync(@javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable OffsetDateTime creationTimeStart, final ApiCallback<ListOrganizationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrganizationsValidateBeforeCall(containerIds, member, limit, offset, creationTimeStart, _callback);
        Type localVarReturnType = new TypeToken<ListOrganizationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjects
     * @param containerParentId Identifier of the parent resource container - containerId as well as UUID identifier is supported. (optional)
     * @param containerIds List of container identifiers - containerId as well as UUID identifier is supported. (optional)
     * @param member E-Mail address of the user for whom the visible resource containers should be filtered. (optional)
     * @param offset The offset of the first item in the collection to return. (optional, default to 0)
     * @param limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used. (optional, default to 50)
     * @param creationTimeStart A timestamp to specify the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectsCall(@javax.annotation.Nullable String containerParentId, @javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable OffsetDateTime creationTimeStart, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containerParentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containerParentId", containerParentId));
        }

        if (containerIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "containerIds", containerIds));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (creationTimeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creation-time-start", creationTimeStart));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectsValidateBeforeCall(@javax.annotation.Nullable String containerParentId, @javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable OffsetDateTime creationTimeStart, final ApiCallback _callback) throws ApiException {
        return listProjectsCall(containerParentId, containerIds, member, offset, limit, creationTimeStart, _callback);

    }

    /**
     * Get All Projects
     * Returns all projects and their metadata that:  - Are children of the specific containerParentId - Match the given containerIds - User is member of  Filter: - Either containerParentId OR containerIds OR member must be passed - If containerId and containerParentId are given, both are used for filtering - containers must point to the same parent - If member and containerParentId are given, both are used for filtering - If member is given, containers must not point to the same container parent
     * @param containerParentId Identifier of the parent resource container - containerId as well as UUID identifier is supported. (optional)
     * @param containerIds List of container identifiers - containerId as well as UUID identifier is supported. (optional)
     * @param member E-Mail address of the user for whom the visible resource containers should be filtered. (optional)
     * @param offset The offset of the first item in the collection to return. (optional, default to 0)
     * @param limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used. (optional, default to 50)
     * @param creationTimeStart A timestamp to specify the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time. (optional)
     * @return ListProjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListProjectsResponse listProjects(@javax.annotation.Nullable String containerParentId, @javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable OffsetDateTime creationTimeStart) throws ApiException {
        ApiResponse<ListProjectsResponse> localVarResp = listProjectsWithHttpInfo(containerParentId, containerIds, member, offset, limit, creationTimeStart);
        return localVarResp.getData();
    }

    /**
     * Get All Projects
     * Returns all projects and their metadata that:  - Are children of the specific containerParentId - Match the given containerIds - User is member of  Filter: - Either containerParentId OR containerIds OR member must be passed - If containerId and containerParentId are given, both are used for filtering - containers must point to the same parent - If member and containerParentId are given, both are used for filtering - If member is given, containers must not point to the same container parent
     * @param containerParentId Identifier of the parent resource container - containerId as well as UUID identifier is supported. (optional)
     * @param containerIds List of container identifiers - containerId as well as UUID identifier is supported. (optional)
     * @param member E-Mail address of the user for whom the visible resource containers should be filtered. (optional)
     * @param offset The offset of the first item in the collection to return. (optional, default to 0)
     * @param limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used. (optional, default to 50)
     * @param creationTimeStart A timestamp to specify the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time. (optional)
     * @return ApiResponse&lt;ListProjectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListProjectsResponse> listProjectsWithHttpInfo(@javax.annotation.Nullable String containerParentId, @javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable OffsetDateTime creationTimeStart) throws ApiException {
        okhttp3.Call localVarCall = listProjectsValidateBeforeCall(containerParentId, containerIds, member, offset, limit, creationTimeStart, null);
        Type localVarReturnType = new TypeToken<ListProjectsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Projects (asynchronously)
     * Returns all projects and their metadata that:  - Are children of the specific containerParentId - Match the given containerIds - User is member of  Filter: - Either containerParentId OR containerIds OR member must be passed - If containerId and containerParentId are given, both are used for filtering - containers must point to the same parent - If member and containerParentId are given, both are used for filtering - If member is given, containers must not point to the same container parent
     * @param containerParentId Identifier of the parent resource container - containerId as well as UUID identifier is supported. (optional)
     * @param containerIds List of container identifiers - containerId as well as UUID identifier is supported. (optional)
     * @param member E-Mail address of the user for whom the visible resource containers should be filtered. (optional)
     * @param offset The offset of the first item in the collection to return. (optional, default to 0)
     * @param limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used. (optional, default to 50)
     * @param creationTimeStart A timestamp to specify the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectsAsync(@javax.annotation.Nullable String containerParentId, @javax.annotation.Nullable List<String> containerIds, @javax.annotation.Nullable String member, @javax.annotation.Nullable BigDecimal offset, @javax.annotation.Nullable BigDecimal limit, @javax.annotation.Nullable OffsetDateTime creationTimeStart, final ApiCallback<ListProjectsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectsValidateBeforeCall(containerParentId, containerIds, member, offset, limit, creationTimeStart, _callback);
        Type localVarReturnType = new TypeToken<ListProjectsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partialUpdateFolder
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param partialUpdateFolderPayload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partialUpdateFolderCall(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable PartialUpdateFolderPayload partialUpdateFolderPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partialUpdateFolderPayload;

        // create path and map variables
        String localVarPath = "/v2/folders/{containerId}"
            .replace("{" + "containerId" + "}", localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partialUpdateFolderValidateBeforeCall(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable PartialUpdateFolderPayload partialUpdateFolderPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling partialUpdateFolder(Async)");
        }

        return partialUpdateFolderCall(containerId, partialUpdateFolderPayload, _callback);

    }

    /**
     * Update Folder
     * Update the folder and its metadata. - Update folder name - Update folder labels - Update folder parent (folder or organization)
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param partialUpdateFolderPayload  (optional)
     * @return FolderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public FolderResponse partialUpdateFolder(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable PartialUpdateFolderPayload partialUpdateFolderPayload) throws ApiException {
        ApiResponse<FolderResponse> localVarResp = partialUpdateFolderWithHttpInfo(containerId, partialUpdateFolderPayload);
        return localVarResp.getData();
    }

    /**
     * Update Folder
     * Update the folder and its metadata. - Update folder name - Update folder labels - Update folder parent (folder or organization)
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param partialUpdateFolderPayload  (optional)
     * @return ApiResponse&lt;FolderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FolderResponse> partialUpdateFolderWithHttpInfo(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable PartialUpdateFolderPayload partialUpdateFolderPayload) throws ApiException {
        okhttp3.Call localVarCall = partialUpdateFolderValidateBeforeCall(containerId, partialUpdateFolderPayload, null);
        Type localVarReturnType = new TypeToken<FolderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Folder (asynchronously)
     * Update the folder and its metadata. - Update folder name - Update folder labels - Update folder parent (folder or organization)
     * @param containerId Folder identifier - containerId as well as UUID identifier is supported. (required)
     * @param partialUpdateFolderPayload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partialUpdateFolderAsync(@javax.annotation.Nonnull String containerId, @javax.annotation.Nullable PartialUpdateFolderPayload partialUpdateFolderPayload, final ApiCallback<FolderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = partialUpdateFolderValidateBeforeCall(containerId, partialUpdateFolderPayload, _callback);
        Type localVarReturnType = new TypeToken<FolderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partialUpdateOrganization
     * @param id Organization identifier - containerId as well as UUID identifier is supported. (required)
     * @param partialUpdateOrganizationPayload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partialUpdateOrganizationCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable PartialUpdateOrganizationPayload partialUpdateOrganizationPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partialUpdateOrganizationPayload;

        // create path and map variables
        String localVarPath = "/v2/organizations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partialUpdateOrganizationValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable PartialUpdateOrganizationPayload partialUpdateOrganizationPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partialUpdateOrganization(Async)");
        }

        return partialUpdateOrganizationCall(id, partialUpdateOrganizationPayload, _callback);

    }

    /**
     * Update Organization
     * Update the organization and its metadata. - Update organization name - Update organization labels
     * @param id Organization identifier - containerId as well as UUID identifier is supported. (required)
     * @param partialUpdateOrganizationPayload  (optional)
     * @return OrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationResponse partialUpdateOrganization(@javax.annotation.Nonnull String id, @javax.annotation.Nullable PartialUpdateOrganizationPayload partialUpdateOrganizationPayload) throws ApiException {
        ApiResponse<OrganizationResponse> localVarResp = partialUpdateOrganizationWithHttpInfo(id, partialUpdateOrganizationPayload);
        return localVarResp.getData();
    }

    /**
     * Update Organization
     * Update the organization and its metadata. - Update organization name - Update organization labels
     * @param id Organization identifier - containerId as well as UUID identifier is supported. (required)
     * @param partialUpdateOrganizationPayload  (optional)
     * @return ApiResponse&lt;OrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationResponse> partialUpdateOrganizationWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable PartialUpdateOrganizationPayload partialUpdateOrganizationPayload) throws ApiException {
        okhttp3.Call localVarCall = partialUpdateOrganizationValidateBeforeCall(id, partialUpdateOrganizationPayload, null);
        Type localVarReturnType = new TypeToken<OrganizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Organization (asynchronously)
     * Update the organization and its metadata. - Update organization name - Update organization labels
     * @param id Organization identifier - containerId as well as UUID identifier is supported. (required)
     * @param partialUpdateOrganizationPayload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partialUpdateOrganizationAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable PartialUpdateOrganizationPayload partialUpdateOrganizationPayload, final ApiCallback<OrganizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = partialUpdateOrganizationValidateBeforeCall(id, partialUpdateOrganizationPayload, _callback);
        Type localVarReturnType = new TypeToken<OrganizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partialUpdateProject
     * @param id Project identifier - containerId as well as UUID identifier is supported. (required)
     * @param partialUpdateProjectPayload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partialUpdateProjectCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable PartialUpdateProjectPayload partialUpdateProjectPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partialUpdateProjectPayload;

        // create path and map variables
        String localVarPath = "/v2/projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partialUpdateProjectValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable PartialUpdateProjectPayload partialUpdateProjectPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partialUpdateProject(Async)");
        }

        return partialUpdateProjectCall(id, partialUpdateProjectPayload, _callback);

    }

    /**
     * Update Project
     * Update the project and its metadata. - Update project name  - Update project labels  - Update project parent (folder or organization)
     * @param id Project identifier - containerId as well as UUID identifier is supported. (required)
     * @param partialUpdateProjectPayload  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public Project partialUpdateProject(@javax.annotation.Nonnull String id, @javax.annotation.Nullable PartialUpdateProjectPayload partialUpdateProjectPayload) throws ApiException {
        ApiResponse<Project> localVarResp = partialUpdateProjectWithHttpInfo(id, partialUpdateProjectPayload);
        return localVarResp.getData();
    }

    /**
     * Update Project
     * Update the project and its metadata. - Update project name  - Update project labels  - Update project parent (folder or organization)
     * @param id Project identifier - containerId as well as UUID identifier is supported. (required)
     * @param partialUpdateProjectPayload  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> partialUpdateProjectWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable PartialUpdateProjectPayload partialUpdateProjectPayload) throws ApiException {
        okhttp3.Call localVarCall = partialUpdateProjectValidateBeforeCall(id, partialUpdateProjectPayload, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Project (asynchronously)
     * Update the project and its metadata. - Update project name  - Update project labels  - Update project parent (folder or organization)
     * @param id Project identifier - containerId as well as UUID identifier is supported. (required)
     * @param partialUpdateProjectPayload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partialUpdateProjectAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable PartialUpdateProjectPayload partialUpdateProjectPayload, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = partialUpdateProjectValidateBeforeCall(id, partialUpdateProjectPayload, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
