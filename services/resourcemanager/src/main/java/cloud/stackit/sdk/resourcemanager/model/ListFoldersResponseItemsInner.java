/*
 * Resource Manager API
 * API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.resourcemanager.model;

import cloud.stackit.sdk.resourcemanager.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/** ListFoldersResponseItemsInner */
@javax.annotation.Generated(
		value = "org.openapitools.codegen.languages.JavaClientCodegen",
		comments = "Generator version: 7.15.0")
public class ListFoldersResponseItemsInner {
	public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";

	@SerializedName(SERIALIZED_NAME_CONTAINER_ID)
	@javax.annotation.Nonnull
	private String containerId;

	public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";

	@SerializedName(SERIALIZED_NAME_CREATION_TIME)
	@javax.annotation.Nonnull
	private OffsetDateTime creationTime;

	public static final String SERIALIZED_NAME_FOLDER_ID = "folderId";

	@SerializedName(SERIALIZED_NAME_FOLDER_ID)
	@javax.annotation.Nonnull
	private UUID folderId;

	public static final String SERIALIZED_NAME_LABELS = "labels";

	@SerializedName(SERIALIZED_NAME_LABELS)
	@javax.annotation.Nullable private Map<String, String> labels = new HashMap<>();

	public static final String SERIALIZED_NAME_NAME = "name";

	@SerializedName(SERIALIZED_NAME_NAME)
	@javax.annotation.Nonnull
	private String name;

	public static final String SERIALIZED_NAME_PARENT = "parent";

	@SerializedName(SERIALIZED_NAME_PARENT)
	@javax.annotation.Nonnull
	private Parent parent;

	public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

	@SerializedName(SERIALIZED_NAME_UPDATE_TIME)
	@javax.annotation.Nonnull
	private OffsetDateTime updateTime;

	public ListFoldersResponseItemsInner() {}

	public ListFoldersResponseItemsInner containerId(@javax.annotation.Nonnull String containerId) {
		this.containerId = containerId;
		return this;
	}

	/**
	 * Globally unique folder identifier.
	 *
	 * @return containerId
	 */
	@javax.annotation.Nonnull
	public String getContainerId() {
		return containerId;
	}

	public void setContainerId(@javax.annotation.Nonnull String containerId) {
		this.containerId = containerId;
	}

	public ListFoldersResponseItemsInner creationTime(
			@javax.annotation.Nonnull OffsetDateTime creationTime) {
		this.creationTime = creationTime;
		return this;
	}

	/**
	 * Timestamp at which the folder was created.
	 *
	 * @return creationTime
	 */
	@javax.annotation.Nonnull
	public OffsetDateTime getCreationTime() {
		return creationTime;
	}

	public void setCreationTime(@javax.annotation.Nonnull OffsetDateTime creationTime) {
		this.creationTime = creationTime;
	}

	public ListFoldersResponseItemsInner folderId(@javax.annotation.Nonnull UUID folderId) {
		this.folderId = folderId;
		return this;
	}

	/**
	 * Globally unique folder identifier.
	 *
	 * @return folderId
	 */
	@javax.annotation.Nonnull
	public UUID getFolderId() {
		return folderId;
	}

	public void setFolderId(@javax.annotation.Nonnull UUID folderId) {
		this.folderId = folderId;
	}

	public ListFoldersResponseItemsInner labels(
			@javax.annotation.Nullable Map<String, String> labels) {
		this.labels = labels;
		return this;
	}

	public ListFoldersResponseItemsInner putLabelsItem(String key, String labelsItem) {
		if (this.labels == null) {
			this.labels = new HashMap<>();
		}
		this.labels.put(key, labelsItem);
		return this;
	}

	/**
	 * Labels are key-value string pairs that can be attached to a resource container. Some labels
	 * may be enforced via policies. - A label key must match the regex
	 * &#x60;[A-ZÄÜÖa-zäüöß0-9_-]{1,64}&#x60;. - A label value must match the regex
	 * &#x60;^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}&#x60;.
	 *
	 * @return labels
	 */
	@javax.annotation.Nullable public Map<String, String> getLabels() {
		return labels;
	}

	public void setLabels(@javax.annotation.Nullable Map<String, String> labels) {
		this.labels = labels;
	}

	public ListFoldersResponseItemsInner name(@javax.annotation.Nonnull String name) {
		this.name = name;
		return this;
	}

	/**
	 * Name of the folder.
	 *
	 * @return name
	 */
	@javax.annotation.Nonnull
	public String getName() {
		return name;
	}

	public void setName(@javax.annotation.Nonnull String name) {
		this.name = name;
	}

	public ListFoldersResponseItemsInner parent(@javax.annotation.Nonnull Parent parent) {
		this.parent = parent;
		return this;
	}

	/**
	 * Get parent
	 *
	 * @return parent
	 */
	@javax.annotation.Nonnull
	public Parent getParent() {
		return parent;
	}

	public void setParent(@javax.annotation.Nonnull Parent parent) {
		this.parent = parent;
	}

	public ListFoldersResponseItemsInner updateTime(
			@javax.annotation.Nonnull OffsetDateTime updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	/**
	 * Timestamp at which the folder was created.
	 *
	 * @return updateTime
	 */
	@javax.annotation.Nonnull
	public OffsetDateTime getUpdateTime() {
		return updateTime;
	}

	public void setUpdateTime(@javax.annotation.Nonnull OffsetDateTime updateTime) {
		this.updateTime = updateTime;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ListFoldersResponseItemsInner listFoldersResponseItemsInner =
				(ListFoldersResponseItemsInner) o;
		return Objects.equals(this.containerId, listFoldersResponseItemsInner.containerId)
				&& Objects.equals(this.creationTime, listFoldersResponseItemsInner.creationTime)
				&& Objects.equals(this.folderId, listFoldersResponseItemsInner.folderId)
				&& Objects.equals(this.labels, listFoldersResponseItemsInner.labels)
				&& Objects.equals(this.name, listFoldersResponseItemsInner.name)
				&& Objects.equals(this.parent, listFoldersResponseItemsInner.parent)
				&& Objects.equals(this.updateTime, listFoldersResponseItemsInner.updateTime);
	}

	@Override
	public int hashCode() {
		return Objects.hash(containerId, creationTime, folderId, labels, name, parent, updateTime);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ListFoldersResponseItemsInner {\n");
		sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
		sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
		sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
		sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
		sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first
	 * line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields =
				new HashSet<String>(
						Arrays.asList(
								"containerId",
								"creationTime",
								"folderId",
								"labels",
								"name",
								"parent",
								"updateTime"));

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields =
				new HashSet<String>(
						Arrays.asList(
								"containerId",
								"creationTime",
								"folderId",
								"name",
								"parent",
								"updateTime"));
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to
	 *     ListFoldersResponseItemsInner
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!ListFoldersResponseItemsInner.openapiRequiredFields
					.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format(
								"The required field(s) %s in ListFoldersResponseItemsInner is not found in the empty JSON string",
								ListFoldersResponseItemsInner.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!ListFoldersResponseItemsInner.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format(
								"The field `%s` in the JSON string is not defined in the `ListFoldersResponseItemsInner` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON string
		for (String requiredField : ListFoldersResponseItemsInner.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(
						String.format(
								"The required field `%s` is not found in the JSON string: %s",
								requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if (!jsonObj.get("containerId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `containerId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("containerId").toString()));
		}
		if (!jsonObj.get("folderId").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `folderId` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("folderId").toString()));
		}
		if (!jsonObj.get("name").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format(
							"Expected the field `name` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("name").toString()));
		}
		// validate the required field `parent`
		Parent.validateJsonElement(jsonObj.get("parent"));
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!ListFoldersResponseItemsInner.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'ListFoldersResponseItemsInner' and its
				// subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<ListFoldersResponseItemsInner> thisAdapter =
					gson.getDelegateAdapter(
							this, TypeToken.get(ListFoldersResponseItemsInner.class));

			return (TypeAdapter<T>)
					new TypeAdapter<ListFoldersResponseItemsInner>() {
						@Override
						public void write(JsonWriter out, ListFoldersResponseItemsInner value)
								throws IOException {
							JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
							elementAdapter.write(out, obj);
						}

						@Override
						public ListFoldersResponseItemsInner read(JsonReader in)
								throws IOException {
							JsonElement jsonElement = elementAdapter.read(in);
							validateJsonElement(jsonElement);
							return thisAdapter.fromJsonTree(jsonElement);
						}
					}.nullSafe();
		}
	}

	/**
	 * Create an instance of ListFoldersResponseItemsInner given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of ListFoldersResponseItemsInner
	 * @throws IOException if the JSON string is invalid with respect to
	 *     ListFoldersResponseItemsInner
	 */
	public static ListFoldersResponseItemsInner fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, ListFoldersResponseItemsInner.class);
	}

	/**
	 * Convert an instance of ListFoldersResponseItemsInner to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
