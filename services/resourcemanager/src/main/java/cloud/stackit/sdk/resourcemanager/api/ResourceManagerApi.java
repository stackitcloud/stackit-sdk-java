/*
 * Resource Manager API
 * API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.stackit.sdk.resourcemanager.api;

import cloud.stackit.sdk.core.config.CoreConfiguration;
import java.io.IOException;
import okhttp3.OkHttpClient;

public class ResourceManagerApi extends DefaultApi {
	/**
	 * Basic constructor for ResourceManagerApi
	 *
	 * <p>For production use consider using the constructor with the OkHttpClient parameter.
	 *
	 * @throws IOException
	 */
	public ResourceManagerApi() throws IOException {
		super();
	}

	/**
	 * Basic Constructor for ResourceManagerApi
	 *
	 * <p>For production use consider using the constructor with the OkHttpClient parameter.
	 *
	 * @param config your STACKIT SDK CoreConfiguration
	 * @throws IOException
	 */
	public ResourceManagerApi(CoreConfiguration configuration) throws IOException {
		super(configuration);
	}

	/**
	 * Constructor for ResourceManagerApi
	 *
	 * @param httpClient OkHttpClient object
	 * @throws IOException
	 */
	public ResourceManagerApi(OkHttpClient httpClient) throws IOException {
		super(httpClient);
	}

	/**
	 * Constructor for ResourceManagerApi
	 *
	 * @param httpClient OkHttpClient object
	 * @param configuration your STACKIT SDK CoreConfiguration
	 * @throws IOException
	 */
	public ResourceManagerApi(OkHttpClient httpClient, CoreConfiguration configuration)
			throws IOException {
		super(httpClient, configuration);
	}
}
