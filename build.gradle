plugins {
	id 'java'
	id 'maven-publish'
	id 'idea'
	id 'eclipse'

	id 'com.diffplug.spotless' version '6.21.0'
}


allprojects {
	apply plugin: 'com.diffplug.spotless'

	repositories {
		mavenCentral()
	}

	javadoc {
		options.tags = [
			"http.response.details:a:Http Response Details"
		]
	}

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	tasks.withType(JavaCompile).configureEach {
		options.encoding = 'UTF-8'
	}

	spotless {
		groovyGradle {
			greclipse()

			trimTrailingWhitespace()
			indentWithTabs()
			endWithNewline()
		}
		format 'misc', {
			target '.gitattributes', '.gitignore'

			trimTrailingWhitespace()
			indentWithTabs()
			endWithNewline()
		}
		java {
			googleJavaFormat().aosp()

			removeUnusedImports()
			importOrder()
			formatAnnotations()
			trimTrailingWhitespace()
			indentWithTabs()
			endWithNewline()
		}
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'maven-publish'
	apply plugin: 'idea'
	apply plugin: 'eclipse'

	group = 'cloud.stackit'
	version = 'SNAPSHOT'

	afterEvaluate { project ->
		// only apply to service sub-projects and core
		if (project.path.startsWith(':services:') || project.name == "core" ) {

			// override the version of each service with the ones obtained from the VERSION files
			def versionFile = project.file("VERSION")
			if (versionFile.exists()) {
				try {
					version = versionFile.text.trim()
				} catch (IOException e) {
					logger.error("Could not read VERSION file for project '${project.name}': ${e.message}")
				}
			} else {
				logger.warn("VERSION file not found in project '${project.name}'. Skipping version setting.")
			}


			publishing {
				publications {
					maven(MavenPublication) {
						artifactId = "stackit-sdk-${project.name}"
						from components.java

						pom {
							name.set(project.name)
							description.set("STACKIT Java SDK for the ${project.name} service")
							url.set("https://github.com/stackitcloud/stackit-sdk-java/tree/main/services/${rootProject.name}")
							licenses {
								license {
									name.set("Apache License, Version 2.0")
									url.set("https://www.apache.org/licenses/LICENSE-2.0.txt")
								}
							}
							developers {
								developer {
									id.set("stackitcloud") // TODO: not clear which value must be placed here, check this when setting up publishment to Maven Central
									name.set("STACKIT Developer Tools")
									email.set("developer-tools@stackit.cloud")
								}
							}
							scm {
								connection.set("scm:git:git://github.com/stackitcloud/${rootProject.name}.git")
								developerConnection.set("scm:git:ssh://github.com/stackitcloud/${rootProject.name}.git")
								url.set("https://github.com/stackitcloud/${rootProject.name}")
							}
						}
					}
				}
				repositories {
					mavenLocal()
				}
			}
		}

		// only apply to example sub-projects
		if (project.path.startsWith(':examples:')) {
			task execute(type:JavaExec) {
				main = System.getProperty('mainClass')
				classpath = sourceSets.main.runtimeClasspath
			}
		}
	}

	tasks.withType(Test).configureEach {
		// Enable JUnit 5 (Gradle 4.6+).
		useJUnitPlatform()

		// Always run tests, even when nothing changed.
		dependsOn 'cleanTest'

		// Show test results.
		testLogging {
			events "passed", "skipped", "failed"
		}
	}

	dependencies {
		if (project.path != ':core') {
			// prevent circular dependency
			implementation project(':core')
		}

		testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.0'
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.0'
	}
}
